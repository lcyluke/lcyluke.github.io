{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/dark.css","path":"css/dark.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","path":"css/indexcover.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/post.css","path":"css/post.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/reward.css","path":"css/reward.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/avatar.jpg","path":"medias/reward/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1734105186220},{"_id":"source/_data/friends.json","hash":"69895fd30abbca1407d4c897ca0dd2ca3f0c18cc","modified":1734173486042},{"_id":"source/_posts/.DS_Store","hash":"c09cf340bb0289a8b06f1a6ffd913a0920d7452e","modified":1734116983216},{"_id":"source/about/index.md","hash":"2bdea1c148478331c47e1208bee7529ca9822bb4","modified":1734151259384},{"_id":"source/categories/index.md","hash":"123ff9c0c7f6f8e138113cde049634b47a8ba930","modified":1734151145272},{"_id":"source/friends/index.md","hash":"0a44f6b6731cd02aa865561506a3bf68c8f42a2e","modified":1734151777066},{"_id":"source/404.md","hash":"021fcd77c987db8592093c25526ac60f074bcc5b","modified":1734151905750},{"_id":"source/contact/index.md","hash":"034e0671129765a060bf0f2b56b0d284fba32c65","modified":1734152035217},{"_id":"source/tags/index.md","hash":"4e93502cdb8f0be7f688659626b42dfc55a6b5f0","modified":1734152027024},{"_id":"source/_posts/全功能JavaScript灯箱画廊插件lightgallery.js.md","hash":"e658724f549b6c6bf5a5e62fff851f4f15cdfe6f","modified":1734022186406},{"_id":"source/_posts/Vue 文档风格的 Typora 主题.md","hash":"ea5f815afb0f57d8c1eb17bc195ffcb76671f294","modified":1734022186412},{"_id":"source/_posts/Hexo博客主题之hexo-theme-matery的介绍.md","hash":"6e91b0651b54669be1f8d63e71adb662461f6d3a","modified":1734022186406},{"_id":"source/_posts/Git/Git知识点整理.md","hash":"125d342e6359ffd32ab7db3e36c2bf8022a8d738","modified":1734022186412},{"_id":"source/_posts/Linux/常用Bash命令整理之其他常用命令.md","hash":"21ed4cf6bb37f10528c0b2f943f59162808bcc4a","modified":1734022186412},{"_id":"source/_posts/Linux/常用Bash命令整理之文本处理.md","hash":"3a598ad488fd1e1188f6bbf1f0a35ccda3b51e96","modified":1734022186412},{"_id":"source/_posts/Linux/常用Bash命令整理之查看文件和目录.md","hash":"2071e533874135d9f7462895270e71641e641641","modified":1734022186412},{"_id":"source/_posts/devops/GitLab CI 介绍和使用.md","hash":"29e88a918435b3ab90ed98eb758491c466322e10","modified":1734022186413},{"_id":"source/_posts/Linux/常用Bash命令整理之操作文件和目录.md","hash":"2c5f0d8fc76009c53f59f2ca041adfc1772a2651","modified":1734022186412},{"_id":"source/_posts/Markdown/Vue 文档风格的 Typora 主题.md","hash":"ea5f815afb0f57d8c1eb17bc195ffcb76671f294","modified":1734022186412},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1734150225483},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1734150225483},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1734150225484},{"_id":"themes/hexo-theme-matery/README.md","hash":"5ee7b4eca9d77d440c877c7181d0928d00488b3c","modified":1734171732203},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"497c6645c55dce9f190ec7625de76083262e1707","modified":1734150225484},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1734150225485},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1734150225485},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"024c0a49a92fd89c21348f2a529744d14f55ae83","modified":1734172423345},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1734150225485},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1734150225485},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1734150225494},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1734150225491},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1734150225491},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1734150225485},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1734150225491},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1734150225491},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1734150225492},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1734150225491},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1734150225491},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1734150225492},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1734150225492},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1734150225492},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1734150225492},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1734150225492},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1734150225493},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1734150225493},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1734150225493},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1734150225492},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"94c2fee85418370ca8f7d54050c852267e924eb7","modified":1734150225492},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1734150225492},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1734150225492},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1734150225493},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1734150225493},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1734150225493},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","hash":"00f4f498ae8514022004f2281cab8ff304cd0f37","modified":1734150225494},{"_id":"themes/hexo-theme-matery/source/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1734150225493},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1734150225493},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1734150225494},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1734150225494},{"_id":"themes/hexo-theme-matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1734150225494},{"_id":"themes/hexo-theme-matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1734150225494},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1734150225540},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1734150225534},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1734150225494},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1734150225495},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1734150225495},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1734150225495},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1734150225495},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1734150225485},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1734150225486},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1734150225495},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"9e6b10d5cf4b5faf0d851f4777f75a7297ce68b9","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"e8958bc066b3c2fcd4152604cc12f30020106848","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f5c00f21af281a09dc7de89e82a3b442903451a7","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1734150225486},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"e8b44268b59add61af44b7338527523d10d9d742","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"0953217f4e19a51dfc5a0ffc7d066406df18060b","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1734150225487},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"70fccaea75ce48364222c4e5de0496e556b01cb1","modified":1734150225488},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1734150225488},{"_id":"themes/hexo-theme-matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1734150225488},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"6261f8191c3c1159f63ec7f9293bb93f7d2a3dbb","modified":1734150225488},{"_id":"themes/hexo-theme-matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1734150225489},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"236668e72b01db91f5bf29eec4c79e34e2746d98","modified":1734150225489},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1734150225489},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1734150225488},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1734150225488},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1734150225489},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1734150225489},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1734150225489},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1734150225489},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1734150225489},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1734150225490},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1734150225491},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1734150225491},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1734150225491},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1734150225491},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1734150225491},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1734150225533},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1734150225533},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1734150225533},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1734150225533},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1734150225535},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1734150225536},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1734150225536},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1734150225536},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1734150225537},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1734150225538},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1734150225538},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1734150225539},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1734150225539},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1734150225538},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1734150225540},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1734150225540},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1734150225496},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1734150225496},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1734150225496},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1734150225496},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1734150225496},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1734150225502},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1734150225502},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1734150225502},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1734150225502},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1734150225502},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1734150225502},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1734150225496},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1734150225502},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1734150225502},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1734150225502},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1734150225505},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1734150225502},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1734150225505},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1734150225508},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1734150225509},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1734150225508},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1734150225508},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1734150225507},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1734150225510},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1734150225517},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1734150225520},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1734150225521},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1734150225522},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1734150225509},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1734150225522},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1734150225522},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1734150225523},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1734150225524},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1734150225523},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1734150225523},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1734150225525},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1734150225524},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1734150225527},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1734150225523},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1734150225528},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1734150225527},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1734150225528},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1734150225499},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1734150225501},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1734150225501},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1734150225500},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1734150225509},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1734150225509},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1734150225510},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1734150225510},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1734150225510},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1734150225510},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1734150225510},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1734150225510},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1734150225526},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1734150225526},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1734150225526},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1734150225510},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1734150225526},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1734150225526},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1734150225526},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1734150225526},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1734150225531},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1734150225532},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1734150225532},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1734150225534},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1734150225534},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1734150225535},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1734150225536},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1734150225536},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1734150225535},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1734150225537},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1734150225538},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1734150225537},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1734150225539},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1734150225540},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1734150225539},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1734150225505},{"_id":"themes/hexo-theme-matery/source/medias/reward/avatar.jpg","hash":"0bcda6987411b08347ed29ce4c2c0f52524bab41","modified":1734157454406},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1734150225507},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1734150225508},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1734150225498},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1734150225499},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1734150225533},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1734150225533},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1734150225534},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1734150225531},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1734150225541},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1734150225503},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1734150225511},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1734150225511},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1734150225529},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1734150225497},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1734150225531},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1734150225499},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1734150225501},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1734150225495},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"367957a5eba0950fba0369f247af6f204b3e3067","modified":1734167580250},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"c701ae84367a76b792db5db85a7a6ec407862f02","modified":1734157341241},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"252f024c7f21010d6d44843fe3152168864fd858","modified":1734157374010},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1734150225530},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1734150225533},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1734150225543},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1734150225501},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1734150225528},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1734150225541},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1734150225525},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1734150225505},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1734150225507},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1734150225519},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1734150225516},{"_id":"public/search.xml","hash":"41048184dcac1d45527c9d610b1f367d943579f5","modified":1734173653972},{"_id":"public/404.html","hash":"3edca0b2b0c370a970326d4fd36f4cab169c4eef","modified":1734173653972},{"_id":"public/about/index.html","hash":"6ebf3db9fe035130d6bfa0e707807492141bed90","modified":1734173653972},{"_id":"public/contact/index.html","hash":"f99e08af129522aa4dc6a0cc5663295c9398fdde","modified":1734173653972},{"_id":"public/categories/index.html","hash":"794dffb701942741d8d25c79b94bceab0cde517d","modified":1734173653972},{"_id":"public/friends/index.html","hash":"86ec3acf1e1406f3ee6dc1b53be3596f204d8a28","modified":1734173653972},{"_id":"public/tags/index.html","hash":"a9ca6d2cf74258d87bad83209e7305555c183fc9","modified":1734173653972},{"_id":"public/2024/12/13/hello-world/index.html","hash":"0aa988570630aae59eef80d0f9c73f99491a3cf6","modified":1734173653972},{"_id":"public/2018/11/22/devops/gitlab-ci-jie-shao-he-shi-yong/index.html","hash":"8cde66d1c10cac208012b580e1dde4cbfc20c732","modified":1734173653972},{"_id":"public/2018/11/19/markdown/vue-wen-dang-feng-ge-de-typora-zhu-ti/index.html","hash":"7a390d383c061e65cd082e6c45b5da3f0db537dc","modified":1734173653972},{"_id":"public/2018/10/13/linux/chang-yong-bash-ming-ling-zheng-li-zhi-qi-ta-chang-yong-ming-ling/index.html","hash":"79510f156c2ca833a11730c5cdeb4da9a990ba30","modified":1734173653972},{"_id":"public/2018/10/11/linux/chang-yong-bash-ming-ling-zheng-li-zhi-wen-ben-chu-li/index.html","hash":"05f20ffd8c713d34a4d15ba961688393a5440e10","modified":1734173653972},{"_id":"public/2018/10/10/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cao-zuo-wen-jian-he-mu-lu/index.html","hash":"5d785ed1c0bf214fe16b3fdaa3a897f27ede93ef","modified":1734173653972},{"_id":"public/2018/10/09/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cha-kan-wen-jian-he-mu-lu/index.html","hash":"9b1356b6302c0d283bae05754db29973f7f45646","modified":1734173653972},{"_id":"public/2018/11/19/vue-wen-dang-feng-ge-de-typora-zhu-ti/index.html","hash":"1a2ebc84c6115e8983383d94537372299c461f1b","modified":1734173653972},{"_id":"public/2018/09/28/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/index.html","hash":"d2a20345080069e78df806a31bc6f1843fe9961b","modified":1734173653972},{"_id":"public/2018/09/24/git/git-zhi-shi-dian-zheng-li/index.html","hash":"082ed841cdf8192e4788517496e380befb5b6e96","modified":1734173653972},{"_id":"public/2018/10/06/quan-gong-neng-javascript-deng-xiang-hua-lang-cha-jian-lightgallery.js/index.html","hash":"f9442294054479812e09c137bdcc79f8dc03db36","modified":1734173653972},{"_id":"public/archives/2018/10/index.html","hash":"f474c763296383619a0c9fb72cc44872b725af5e","modified":1734173653972},{"_id":"public/archives/2018/index.html","hash":"32f7ac160313423ebddd1177deb81ac63ffc7d5a","modified":1734173653972},{"_id":"public/archives/2018/11/index.html","hash":"6f655b73ea5640e07d4b84e1bf24249978c71001","modified":1734173653972},{"_id":"public/archives/2018/09/index.html","hash":"f9d8593c55f2284b6a0f0b2234ecf04a8eea904f","modified":1734173653972},{"_id":"public/archives/index.html","hash":"1af9f5afa7afe124c5561f97ac74df7f39acbbae","modified":1734173653972},{"_id":"public/archives/2024/index.html","hash":"da891024b3477d3bf8460013df6ad464f5c40500","modified":1734173653972},{"_id":"public/archives/2024/12/index.html","hash":"92dc11b8da71b2d05a5c447a516f4ff82a367fd3","modified":1734173653972},{"_id":"public/categories/前端/index.html","hash":"105a84227684c74e72606bcb94945391c5d284bf","modified":1734173653972},{"_id":"public/categories/软件工具/index.html","hash":"0d53027d5a72994de993c6715afb11be8a438b01","modified":1734173653972},{"_id":"public/index.html","hash":"d074349b666b272e4da9495c103757a68cd09863","modified":1734173653972},{"_id":"public/tags/JavaScript/index.html","hash":"d998342ecc3059bbe33004cb38d4c4916d534403","modified":1734173653972},{"_id":"public/tags/Hexo/index.html","hash":"bf71467728c5b622db9e48b09c4a08c52abe28d5","modified":1734173653972},{"_id":"public/tags/hexo-theme-matery/index.html","hash":"562eafa9e47d956cdb45c35e78ab890ca5f5d1bd","modified":1734173653972},{"_id":"public/tags/Typora/index.html","hash":"8711e75ef7452c0f8a54ffb0b7aff9a9179fcd2d","modified":1734173653972},{"_id":"public/tags/Markdown/index.html","hash":"e9dce787f37dbbbdee5cfb55b70c2e6af6733ee4","modified":1734173653972},{"_id":"public/tags/Vue/index.html","hash":"af65783ebe8b53f526663dbe8bffa295969bcb49","modified":1734173653972},{"_id":"public/tags/Git/index.html","hash":"7b366d6e525e0c5ba1ba70b0e666a12b6bf360e3","modified":1734173653972},{"_id":"public/tags/Linux/index.html","hash":"97ad624331af124f3c02333e2b33c23fba7c79e2","modified":1734173653972},{"_id":"public/tags/GitLab-CI/index.html","hash":"3053037f455352a9348d8eaebf45e45f49fdbebb","modified":1734173653972},{"_id":"public/tags/DevOps/index.html","hash":"f3327c540ca037905d9d3600ce417e9700969cd8","modified":1734173653972},{"_id":"public/tags/Jenkins/index.html","hash":"4b2f5dc875210cccbf15e97570df654b4abe7f16","modified":1734173653972},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1734173653972},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1734173653972},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1734173653972},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1734173653972},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1734173653972},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1734173653972},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1734173653972},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1734173653972},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1734173653972},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1734173653972},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1734173653972},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1734173653972},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1734173653972},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1734173653972},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1734173653972},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1734173653972},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1734173653972},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1734173653972},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1734173653972},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1734173653972},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1734173653972},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1734173653972},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1734173653972},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1734173653972},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1734173653972},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1734173653972},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1734173653972},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1734173653972},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1734173653972},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1734173653972},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1734173653972},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1734173653972},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1734173653972},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1734173653972},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1734173653972},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1734173653972},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1734173653972},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1734173653972},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1734173653972},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1734173653972},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1734173653972},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1734173653972},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1734173653972},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1734173653972},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1734173653972},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1734173653972},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1734173653972},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1734173653972},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1734173653972},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1734173653972},{"_id":"public/medias/reward/avatar.jpg","hash":"0bcda6987411b08347ed29ce4c2c0f52524bab41","modified":1734173653972},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1734173653972},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1734173653972},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1734173653972},{"_id":"public/css/indexcover.css","hash":"bd027eb8192b4d1b0dc9b4f965fa264e8437f847","modified":1734173653972},{"_id":"public/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1734173653972},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1734173653972},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1734173653972},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1734173653972},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1734173653972},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1734173653972},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1734173653972},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1734173653972},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1734173653972},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1734173653972},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1734173653972},{"_id":"public/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1734173653972},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1734173653972},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1734173653972},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1734173653972},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1734173653972},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1734173653972},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1734173653972},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1734173653972},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1734173653972},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1734173653972},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1734173653972},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1734173653972},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1734173653972},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1734173653972},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1734173653972},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1734173653972},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1734173653972},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1734173653972},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1734173653972},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1734173653972},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1734173653972},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1734173653972},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1734173653972},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1734173653972},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1734173653972},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1734173653972},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1734173653972},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1734173653972},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1734173653972},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1734173653972},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1734173653972},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1734173653972},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1734173653972},{"_id":"public/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1734173653972},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1734173653972},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1734173653972},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1734173653972},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1734173653972},{"_id":"public/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1734173653972},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1734173653972},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1734173653972},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1734173653972},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1734173653972},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1734173653972},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1734173653972},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1734173653972},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1734173653972},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1734173653972},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1734173653972},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1734173653972},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1734173653972},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1734173653972},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1734173653972},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1734173653972},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1734173653972},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1734173653972},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1734173653972},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1734173653972},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1734173653972},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1734173653972},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1734173653972},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1734173653972},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1734173653972},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1734173653972},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1734173653972},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1734173653972},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1734173653972},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1734173653972},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1734173653972},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1734173653972},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1734173653972},{"_id":"public/medias/logo.png","hash":"367957a5eba0950fba0369f247af6f204b3e3067","modified":1734173653972},{"_id":"public/medias/reward/wechat.png","hash":"252f024c7f21010d6d44843fe3152168864fd858","modified":1734173653972},{"_id":"public/medias/reward/alipay.jpg","hash":"c701ae84367a76b792db5db85a7a6ec407862f02","modified":1734173653972},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1734173653972},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1734173653972},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1734173653972},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1734173653972},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1734173653972},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1734173653972}],"Category":[{"name":"前端","_id":"cm4o27ve90006ge9kdo1k9chf"},{"name":"软件工具","_id":"cm4o27vef000jge9k6w4fe0h9"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"Dify","introduction":"Dify，每个人都可称为AIGC应用开发者和创造者","url":"https://github.com/langgenius/dify","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"ChatTTS","introduction":"ChatTTS，免费创作最自然的语音机器人","url":"https://github.com/2noise/ChatTTS","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2024-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2024-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2024-12-14T04:51:45.750Z","path":"404.html","comments":1,"_id":"cm4o27ve20000ge9kfs7c9ov6","content":"","excerpt":"","more":""},{"title":"about","date":"2024-12-14T04:40:42.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-12-14 12:40:42\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2024-12-14T04:40:59.384Z","path":"about/index.html","comments":1,"_id":"cm4o27ve60002ge9k13jyhtaw","content":"","excerpt":"","more":""},{"title":"contact","date":"2024-12-14T04:41:04.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2024-12-14 12:41:04\ntype: \"contact\"\nlayout: \"contact\"\n---\n","updated":"2024-12-14T04:53:55.217Z","path":"contact/index.html","comments":1,"_id":"cm4o27ve80004ge9k5zd11ng3","content":"","excerpt":"","more":""},{"title":"categories","date":"2024-12-14T04:38:18.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-12-14 12:38:18\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2024-12-14T04:39:05.272Z","path":"categories/index.html","comments":1,"_id":"cm4o27veb0008ge9k7se78o37","content":"","excerpt":"","more":""},{"title":"friends","date":"2024-12-14T04:41:25.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2024-12-14 12:41:25\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2024-12-14T04:49:37.066Z","path":"friends/index.html","comments":1,"_id":"cm4o27vec000age9kht4y7pkd","content":"","excerpt":"","more":""},{"title":"tags","date":"2024-12-14T04:39:11.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-12-14 12:39:11\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2024-12-14T04:53:47.024Z","path":"tags/index.html","comments":1,"_id":"cm4o27vec000cge9k8l2a7vx9","content":"","excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-12-13T15:53:06.220Z","updated":"2024-12-13T15:53:06.220Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27ve40001ge9kcil4conx","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"全功能JavaScript灯箱画廊插件lightgallery.js","date":"2018-10-06T15:30:00.000Z","author":"blinkfox","img":"https://statics.sh1a.qingstor.com/2018/10/06/gallery.jpg","_content":"\n### 一、简介\n\n> [lightgallery.js][1] 是一个全功能、轻量级、无依赖的灯箱画廊显示库。\n\n![lightgallery][2]\n\n### 二、主要特性\n\n- 全响应式兼容\n- 模块化的架构和内置插件\n- 移动设备和触摸支持\n- 桌面设备拖拽支持\n- 双击查看图像的实际大小\n- 动画缩略图\n- 社交媒体分享\n- YouTube，Vimeo，DailyMotion，VK和 HTML5 视频支持\n- 20+ 硬件加速CSS3过渡\n- 全屏支持\n- 支持缩放\n- 浏览器历史记录\n- 响应式图像\n- HTML iframe 支持\n- 支持iFrame框架\n- 单页多实例\n- 可能过CSS(SCSS)定制样式\n- 智能图像预加载与代码优化\n- 桌面键盘导航\n- 字体图标支持\n- 还有更多\n\n### 三、浏览器支持\n\nlightgallery 支持所有主要的浏览器包括IE 9及以上。\n\n### 四、安装下载\n\n#### 1. Bower 安装\n\n你可以使用 [Bower][3] 包管理工具安装`lightgallery`：\n\n```bash\nbower install lightgallery.js --save\n```\n\n#### 2. npm\n\n你也能在 [npm][4] 上找到 `lightgallery`：\n\n```bash\nnpm install lightgallery.js\n```\n\n#### 3. Github 下载\n\n你也可以直接从 GitHub 下载[lightgallery][5]\n\n### 五、基础示例\n\n#### 1. 使用方法\n\n首先，在 html 头文件`<head>`中引入`lightgallery.css`：\n\n```html\n<head>\n    <link rel=\"stylesheet\" href=\"css/lightgallery.css\">\n</head>\n```\n\n然后，在`<body>`标签结尾引入`lightgallery.min.js`，如果你想引入其他 lightgallery 的功能插件，你可以将这些插件引入到`lightgallery.min.js`之后，如下：\n\n```html\n<body>\n    ...\n\n    <script src=\"js/lightgallery.min.js\"></script>\n\n    <!-- lightgallery plugins -->\n    <script src=\"js/lg-thumbnail.min.js\"></script>\n    <script src=\"js/lg-fullscreen.min.js\"></script>\n</body>\n```\n\n以下是页面标记的图片示例：\n\n```html\n<div id=\"lightgallery\">\n    <a href=\"img/img1.jpg\">\n        <img src=\"img/thumb1.jpg\">\n    </a>\n    <a href=\"img/img2.jpg\">\n        <img src=\"img/thumb2.jpg\">\n    </a>\n    ...\n</div>\n```\n\n最后，是 JavaScript 调用插件的方式：\n\n```javascript\n<script>\n    lightGallery(document.getElementById('lightgallery'));\n</script>\n```\n\n#### 2. 完整示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>lightgallery.js的使用示例</title>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"/lightGallery/css/lightgallery.min.css\" />\n    <style type=\"text/css\" rel=\"stylesheet\">\n        ul {\n            float: left;\n            list-style-type: none;\n        }\n        ul li {\n            float: left;\n            display: inline-block;\n            margin: 5px;\n        }\n        .lgallery {\n            width: 213px;\n            height: 137px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body onload=\"initLoad();\">\n\n    <ul id=\"lightGallery\">\n        <li data-src=\"/assets/images/a.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/a.jpg\">\n        </li>\n        <li data-src=\"/assets/images/b.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/b.jpg\">\n        </li>\n        <li data-src=\"/assets/images/c.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/c.jpg\">\n        </li>\n        <li data-src=\"/assets/images/d.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/d.jpg\">\n        </li>\n        <li data-src=\"/assets/images/e.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/e.jpg\">\n        </li>\n        <li data-src=\"/assets/images/f.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/f.jpg\">\n        </li>\n        <li data-src=\"/assets/images/g.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/g.jpg\">\n        </li>\n    </ul>\n\n<script type=\"text/javascript\" src=\"/lightGallery/js/lightgallery.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-fullscreen.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-thumbnail.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-autoplay.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-hash.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-pager.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-share.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-zoom.min.js\"></script>\n<script type=\"text/javascript\">\nfunction initLoad() {\n    var lg = document.getElementById('lightGallery');\n    lightGallery(lg, {\n        mode: 'lg-slide',\n        cssEasing: 'ease',\n        speed: 500\n    });\n}\n</script>\n</body>\n</html>\n```\n\n### 六、学习和参考资源\n\n- [API Reference][6]\n- [Events][7]\n- [Methods][8]\n- [Data Attributes][9]\n- [Dynamic variables][10]\n- [Sass variables][11]\n- [Module API][12]\n\n  [1]: https://sachinchoolur.github.io/lightgallery.js/\n  [2]: https://statics.sh1a.qingstor.com/2018/10/06/lg.png\n  [3]: https://bower.io/\n  [4]: https://www.npmjs.com/\n  [5]: https://github.com/sachinchoolur/lightgallery.js\n  [6]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html\n  [7]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html#events\n  [8]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html#methods\n  [9]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html#attributes\n  [10]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html#dynamic\n  [11]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html#sass\n  [12]: https://sachinchoolur.github.io/lightgallery.js/docs/plugin-api.html","source":"_posts/全功能JavaScript灯箱画廊插件lightgallery.js.md","raw":"---\ntitle: 全功能JavaScript灯箱画廊插件lightgallery.js\ndate: 2018-10-06 23:30:00\nauthor: blinkfox\nimg: https://statics.sh1a.qingstor.com/2018/10/06/gallery.jpg\ncategories: 前端\ntags:\n  - JavaScript\n---\n\n### 一、简介\n\n> [lightgallery.js][1] 是一个全功能、轻量级、无依赖的灯箱画廊显示库。\n\n![lightgallery][2]\n\n### 二、主要特性\n\n- 全响应式兼容\n- 模块化的架构和内置插件\n- 移动设备和触摸支持\n- 桌面设备拖拽支持\n- 双击查看图像的实际大小\n- 动画缩略图\n- 社交媒体分享\n- YouTube，Vimeo，DailyMotion，VK和 HTML5 视频支持\n- 20+ 硬件加速CSS3过渡\n- 全屏支持\n- 支持缩放\n- 浏览器历史记录\n- 响应式图像\n- HTML iframe 支持\n- 支持iFrame框架\n- 单页多实例\n- 可能过CSS(SCSS)定制样式\n- 智能图像预加载与代码优化\n- 桌面键盘导航\n- 字体图标支持\n- 还有更多\n\n### 三、浏览器支持\n\nlightgallery 支持所有主要的浏览器包括IE 9及以上。\n\n### 四、安装下载\n\n#### 1. Bower 安装\n\n你可以使用 [Bower][3] 包管理工具安装`lightgallery`：\n\n```bash\nbower install lightgallery.js --save\n```\n\n#### 2. npm\n\n你也能在 [npm][4] 上找到 `lightgallery`：\n\n```bash\nnpm install lightgallery.js\n```\n\n#### 3. Github 下载\n\n你也可以直接从 GitHub 下载[lightgallery][5]\n\n### 五、基础示例\n\n#### 1. 使用方法\n\n首先，在 html 头文件`<head>`中引入`lightgallery.css`：\n\n```html\n<head>\n    <link rel=\"stylesheet\" href=\"css/lightgallery.css\">\n</head>\n```\n\n然后，在`<body>`标签结尾引入`lightgallery.min.js`，如果你想引入其他 lightgallery 的功能插件，你可以将这些插件引入到`lightgallery.min.js`之后，如下：\n\n```html\n<body>\n    ...\n\n    <script src=\"js/lightgallery.min.js\"></script>\n\n    <!-- lightgallery plugins -->\n    <script src=\"js/lg-thumbnail.min.js\"></script>\n    <script src=\"js/lg-fullscreen.min.js\"></script>\n</body>\n```\n\n以下是页面标记的图片示例：\n\n```html\n<div id=\"lightgallery\">\n    <a href=\"img/img1.jpg\">\n        <img src=\"img/thumb1.jpg\">\n    </a>\n    <a href=\"img/img2.jpg\">\n        <img src=\"img/thumb2.jpg\">\n    </a>\n    ...\n</div>\n```\n\n最后，是 JavaScript 调用插件的方式：\n\n```javascript\n<script>\n    lightGallery(document.getElementById('lightgallery'));\n</script>\n```\n\n#### 2. 完整示例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>lightgallery.js的使用示例</title>\n    <link type=\"text/css\" rel=\"stylesheet\" href=\"/lightGallery/css/lightgallery.min.css\" />\n    <style type=\"text/css\" rel=\"stylesheet\">\n        ul {\n            float: left;\n            list-style-type: none;\n        }\n        ul li {\n            float: left;\n            display: inline-block;\n            margin: 5px;\n        }\n        .lgallery {\n            width: 213px;\n            height: 137px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body onload=\"initLoad();\">\n\n    <ul id=\"lightGallery\">\n        <li data-src=\"/assets/images/a.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/a.jpg\">\n        </li>\n        <li data-src=\"/assets/images/b.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/b.jpg\">\n        </li>\n        <li data-src=\"/assets/images/c.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/c.jpg\">\n        </li>\n        <li data-src=\"/assets/images/d.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/d.jpg\">\n        </li>\n        <li data-src=\"/assets/images/e.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/e.jpg\">\n        </li>\n        <li data-src=\"/assets/images/f.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/f.jpg\">\n        </li>\n        <li data-src=\"/assets/images/g.jpg\">\n            <img class=\"lgallery\" src=\"/assets/images/g.jpg\">\n        </li>\n    </ul>\n\n<script type=\"text/javascript\" src=\"/lightGallery/js/lightgallery.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-fullscreen.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-thumbnail.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-autoplay.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-hash.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-pager.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-share.min.js\"></script>\n<script type=\"text/javascript\" src=\"/lightGallery/js/plugins/lg-zoom.min.js\"></script>\n<script type=\"text/javascript\">\nfunction initLoad() {\n    var lg = document.getElementById('lightGallery');\n    lightGallery(lg, {\n        mode: 'lg-slide',\n        cssEasing: 'ease',\n        speed: 500\n    });\n}\n</script>\n</body>\n</html>\n```\n\n### 六、学习和参考资源\n\n- [API Reference][6]\n- [Events][7]\n- [Methods][8]\n- [Data Attributes][9]\n- [Dynamic variables][10]\n- [Sass variables][11]\n- [Module API][12]\n\n  [1]: https://sachinchoolur.github.io/lightgallery.js/\n  [2]: https://statics.sh1a.qingstor.com/2018/10/06/lg.png\n  [3]: https://bower.io/\n  [4]: https://www.npmjs.com/\n  [5]: https://github.com/sachinchoolur/lightgallery.js\n  [6]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html\n  [7]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html#events\n  [8]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html#methods\n  [9]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html#attributes\n  [10]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html#dynamic\n  [11]: https://sachinchoolur.github.io/lightgallery.js/docs/api.html#sass\n  [12]: https://sachinchoolur.github.io/lightgallery.js/docs/plugin-api.html","slug":"全功能JavaScript灯箱画廊插件lightgallery.js","published":1,"updated":"2024-12-12T16:49:46.406Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27ve70003ge9k5bou46e7","content":"<h3 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h3><blockquote>\n<p><a href=\"https://sachinchoolur.github.io/lightgallery.js/\">lightgallery.js</a> 是一个全功能、轻量级、无依赖的灯箱画廊显示库。</p>\n</blockquote>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/10/06/lg.png\" alt=\"lightgallery\"></p>\n<h3 id=\"二、主要特性\"><a href=\"#二、主要特性\" class=\"headerlink\" title=\"二、主要特性\"></a>二、主要特性</h3><ul>\n<li>全响应式兼容</li>\n<li>模块化的架构和内置插件</li>\n<li>移动设备和触摸支持</li>\n<li>桌面设备拖拽支持</li>\n<li>双击查看图像的实际大小</li>\n<li>动画缩略图</li>\n<li>社交媒体分享</li>\n<li>YouTube，Vimeo，DailyMotion，VK和 HTML5 视频支持</li>\n<li>20+ 硬件加速CSS3过渡</li>\n<li>全屏支持</li>\n<li>支持缩放</li>\n<li>浏览器历史记录</li>\n<li>响应式图像</li>\n<li>HTML iframe 支持</li>\n<li>支持iFrame框架</li>\n<li>单页多实例</li>\n<li>可能过CSS(SCSS)定制样式</li>\n<li>智能图像预加载与代码优化</li>\n<li>桌面键盘导航</li>\n<li>字体图标支持</li>\n<li>还有更多</li>\n</ul>\n<h3 id=\"三、浏览器支持\"><a href=\"#三、浏览器支持\" class=\"headerlink\" title=\"三、浏览器支持\"></a>三、浏览器支持</h3><p>lightgallery 支持所有主要的浏览器包括IE 9及以上。</p>\n<h3 id=\"四、安装下载\"><a href=\"#四、安装下载\" class=\"headerlink\" title=\"四、安装下载\"></a>四、安装下载</h3><h4 id=\"1-Bower-安装\"><a href=\"#1-Bower-安装\" class=\"headerlink\" title=\"1. Bower 安装\"></a>1. Bower 安装</h4><p>你可以使用 <a href=\"https://bower.io/\">Bower</a> 包管理工具安装<code>lightgallery</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install lightgallery.js --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-npm\"><a href=\"#2-npm\" class=\"headerlink\" title=\"2. npm\"></a>2. npm</h4><p>你也能在 <a href=\"https://www.npmjs.com/\">npm</a> 上找到 <code>lightgallery</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lightgallery.js</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Github-下载\"><a href=\"#3-Github-下载\" class=\"headerlink\" title=\"3. Github 下载\"></a>3. Github 下载</h4><p>你也可以直接从 GitHub 下载<a href=\"https://github.com/sachinchoolur/lightgallery.js\">lightgallery</a></p>\n<h3 id=\"五、基础示例\"><a href=\"#五、基础示例\" class=\"headerlink\" title=\"五、基础示例\"></a>五、基础示例</h3><h4 id=\"1-使用方法\"><a href=\"#1-使用方法\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h4><p>首先，在 html 头文件<code>&lt;head&gt;</code>中引入<code>lightgallery.css</code>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/lightgallery.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，在<code>&lt;body&gt;</code>标签结尾引入<code>lightgallery.min.js</code>，如果你想引入其他 lightgallery 的功能插件，你可以将这些插件引入到<code>lightgallery.min.js</code>之后，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/lightgallery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- lightgallery plugins --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/lg-thumbnail.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/lg-fullscreen.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以下是页面标记的图片示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;lightgallery&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;img/img1.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/thumb1.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;img/img2.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/thumb2.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，是 JavaScript 调用插件的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"title function_\">lightGallery</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;lightgallery&#x27;</span>));</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-完整示例\"><a href=\"#2-完整示例\" class=\"headerlink\" title=\"2. 完整示例\"></a>2. 完整示例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>lightgallery.js的使用示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/lightGallery/css/lightgallery.min.css&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">ul</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">float</span>: left;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">list-style-type</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">float</span>: left;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.lgallery</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">213px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">137px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">&quot;initLoad();&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;lightGallery&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/a.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/a.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/b.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/b.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/c.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/c.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/d.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/d.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/e.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/e.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/f.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/f.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/g.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/g.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/lightgallery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-fullscreen.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-thumbnail.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-autoplay.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-hash.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-pager.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-share.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-zoom.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">initLoad</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> lg = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;lightGallery&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">lightGallery</span>(lg, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;lg-slide&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">cssEasing</span>: <span class=\"string\">&#x27;ease&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">speed</span>: <span class=\"number\">500</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、学习和参考资源\"><a href=\"#六、学习和参考资源\" class=\"headerlink\" title=\"六、学习和参考资源\"></a>六、学习和参考资源</h3><ul>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html\">API Reference</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html#events\">Events</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html#methods\">Methods</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html#attributes\">Data Attributes</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html#dynamic\">Dynamic variables</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html#sass\">Sass variables</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/plugin-api.html\">Module API</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"一、简介\"><a href=\"#一、简介\" class=\"headerlink\" title=\"一、简介\"></a>一、简介</h3><blockquote>\n<p><a href=\"https://sachinchoolur.github.io/lightgallery.js/\">lightgallery.js</a> 是一个全功能、轻量级、无依赖的灯箱画廊显示库。</p>\n</blockquote>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/10/06/lg.png\" alt=\"lightgallery\"></p>\n<h3 id=\"二、主要特性\"><a href=\"#二、主要特性\" class=\"headerlink\" title=\"二、主要特性\"></a>二、主要特性</h3><ul>\n<li>全响应式兼容</li>\n<li>模块化的架构和内置插件</li>\n<li>移动设备和触摸支持</li>\n<li>桌面设备拖拽支持</li>\n<li>双击查看图像的实际大小</li>\n<li>动画缩略图</li>\n<li>社交媒体分享</li>\n<li>YouTube，Vimeo，DailyMotion，VK和 HTML5 视频支持</li>\n<li>20+ 硬件加速CSS3过渡</li>\n<li>全屏支持</li>\n<li>支持缩放</li>\n<li>浏览器历史记录</li>\n<li>响应式图像</li>\n<li>HTML iframe 支持</li>\n<li>支持iFrame框架</li>\n<li>单页多实例</li>\n<li>可能过CSS(SCSS)定制样式</li>\n<li>智能图像预加载与代码优化</li>\n<li>桌面键盘导航</li>\n<li>字体图标支持</li>\n<li>还有更多</li>\n</ul>\n<h3 id=\"三、浏览器支持\"><a href=\"#三、浏览器支持\" class=\"headerlink\" title=\"三、浏览器支持\"></a>三、浏览器支持</h3><p>lightgallery 支持所有主要的浏览器包括IE 9及以上。</p>\n<h3 id=\"四、安装下载\"><a href=\"#四、安装下载\" class=\"headerlink\" title=\"四、安装下载\"></a>四、安装下载</h3><h4 id=\"1-Bower-安装\"><a href=\"#1-Bower-安装\" class=\"headerlink\" title=\"1. Bower 安装\"></a>1. Bower 安装</h4><p>你可以使用 <a href=\"https://bower.io/\">Bower</a> 包管理工具安装<code>lightgallery</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bower install lightgallery.js --save</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-npm\"><a href=\"#2-npm\" class=\"headerlink\" title=\"2. npm\"></a>2. npm</h4><p>你也能在 <a href=\"https://www.npmjs.com/\">npm</a> 上找到 <code>lightgallery</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install lightgallery.js</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Github-下载\"><a href=\"#3-Github-下载\" class=\"headerlink\" title=\"3. Github 下载\"></a>3. Github 下载</h4><p>你也可以直接从 GitHub 下载<a href=\"https://github.com/sachinchoolur/lightgallery.js\">lightgallery</a></p>\n<h3 id=\"五、基础示例\"><a href=\"#五、基础示例\" class=\"headerlink\" title=\"五、基础示例\"></a>五、基础示例</h3><h4 id=\"1-使用方法\"><a href=\"#1-使用方法\" class=\"headerlink\" title=\"1. 使用方法\"></a>1. 使用方法</h4><p>首先，在 html 头文件<code>&lt;head&gt;</code>中引入<code>lightgallery.css</code>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/lightgallery.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后，在<code>&lt;body&gt;</code>标签结尾引入<code>lightgallery.min.js</code>，如果你想引入其他 lightgallery 的功能插件，你可以将这些插件引入到<code>lightgallery.min.js</code>之后，如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/lightgallery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- lightgallery plugins --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/lg-thumbnail.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;js/lg-fullscreen.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>以下是页面标记的图片示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;lightgallery&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;img/img1.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/thumb1.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;img/img2.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;img/thumb2.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>最后，是 JavaScript 调用插件的方式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"title function_\">lightGallery</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;lightgallery&#x27;</span>));</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-完整示例\"><a href=\"#2-完整示例\" class=\"headerlink\" title=\"2. 完整示例\"></a>2. 完整示例</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>lightgallery.js的使用示例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/lightGallery/css/lightgallery.min.css&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">ul</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">float</span>: left;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">list-style-type</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">float</span>: left;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">display</span>: inline-block;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">margin</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">        <span class=\"selector-class\">.lgallery</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">width</span>: <span class=\"number\">213px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">height</span>: <span class=\"number\">137px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">            <span class=\"attribute\">cursor</span>: pointer;</span></span><br><span class=\"line\"><span class=\"language-css\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">&quot;initLoad();&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;lightGallery&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/a.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/a.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/b.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/b.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/c.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/c.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/d.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/d.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/e.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/e.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/f.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/f.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">data-src</span>=<span class=\"string\">&quot;/assets/images/g.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;lgallery&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/assets/images/g.jpg&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/lightgallery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-fullscreen.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-thumbnail.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-autoplay.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-hash.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-pager.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-share.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/lightGallery/js/plugins/lg-zoom.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">function</span> <span class=\"title function_\">initLoad</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">var</span> lg = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;lightGallery&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">lightGallery</span>(lg, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;lg-slide&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">cssEasing</span>: <span class=\"string\">&#x27;ease&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">speed</span>: <span class=\"number\">500</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"六、学习和参考资源\"><a href=\"#六、学习和参考资源\" class=\"headerlink\" title=\"六、学习和参考资源\"></a>六、学习和参考资源</h3><ul>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html\">API Reference</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html#events\">Events</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html#methods\">Methods</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html#attributes\">Data Attributes</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html#dynamic\">Dynamic variables</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/api.html#sass\">Sass variables</a></p>\n</li>\n<li><p><a href=\"https://sachinchoolur.github.io/lightgallery.js/docs/plugin-api.html\">Module API</a></p>\n</li>\n</ul>\n"},{"title":"Hexo博客主题之hexo-theme-matery的介绍","date":"2018-09-28T05:34:00.000Z","author":"blinkfox","cover":true,"_content":"[English Document](README.md) | [演示示例](https://blinkfox.github.io/) | QQ交流群:`926552981`\n\n> 这是一个采用`Material Design`和响应式设计的 Hexo 博客主题。\n\n## 特性\n\n- 简单漂亮，文章内容美观易读\n- [Material Design](https://material.io/) 设计\n- 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现\n- 首页轮播文章及每天动态切换 `Banner` 图片\n- 瀑布流式的博客文章列表（文章无特色图片时会有 `24` 张漂亮的图片代替）\n- 时间轴式的归档页\n- **词云**的标签页和**雷达图**的分类页\n- 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）\n- 可自定义的数据的友情链接页面\n- 支持文章置顶和文章打赏\n- 支持 `MathJax`\n- `TOC` 目录\n- 可设置复制文章内容时追加版权信息\n- 可设置阅读文章时做密码验证\n- [Gitalk](https://gitalk.github.io/)、[Gitment](https://imsun.github.io/gitment/)、[Valine](https://valine.js.org/) 和 [Disqus](https://disqus.com/) 评论模块（推荐使用 `Gitalk`）\n- 集成了[不蒜子统计](http://busuanzi.ibruce.info/)、谷歌分析（`Google Analytics`）和文章字数统计等功能\n- 支持在首页的音乐播放和视频播放功能\n\n## 下载\n\n当你看到这里的时候，应该已经有一个自己的 [Hexo](https://hexo.io/zh-cn/) 博客了。如果还没有的话，不妨使用 Hexo 和 [Markdown](https://www.appinn.com/markdown/) 来写博客和文章。\n\n点击 [这里](https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master) 下载 `master` 分支的最新稳定版的代码，解压缩后，将 `hexo-theme-matery` 的文件夹复制到你 Hexo 的 `themes` 文件夹中即可。\n\n当然你也可以在你的 `themes` 文件夹下使用 `Git clone` 命令来下载:\n\n```bash\ngit clone https://github.com/blinkfox/hexo-theme-matery.git\n```\n\n## 配置\n\n### 切换主题\n\n修改 Hexo 根目录下的 `_config.yml` 的  `theme` 的值：`theme: hexo-theme-matery`\n\n#### `_config.yml` 文件的其它修改建议:\n \n- 请修改 `_config.yml` 的 `url` 的值为你的网站主 `URL`（如：`http://xxx.github.io`）。\n- 建议修改两个 `per_page` 的分页条数值为 `6` 的倍数，如：`12`、`18` 等，这样文章列表在各个屏幕下都能较好的显示。\n- 如果你是中文用户，则建议修改 `language` 的值为 `zh-CN`。\n\n### 新建分类 categories 页\n\n`categories` 页是用来展示所有分类的页面，如果在你的博客 `source` 目录下还没有 `categories/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"categories\"\n```\n\n编辑你刚刚新建的页面文件 `/source/categories/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n```\n\n### 新建标签 tags 页\n\n`tags` 页是用来展示所有标签的页面，如果在你的博客 `source` 目录下还没有 `tags/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"tags\"\n```\n\n编辑你刚刚新建的页面文件 `/source/tags/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n```\n\n### 新建关于我 about 页\n\n`about` 页是用来展示**关于我和我的博客**信息的页面，如果在你的博客 `source` 目录下还没有 `about/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"about\"\n```\n\n编辑你刚刚新建的页面文件 `/source/about/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n```\n\n### 新建友情连接 friends 页（可选的）\n\n`friends` 页是用来展示**友情连接**信息的页面，如果在你的博客 `source` 目录下还没有 `friends/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"friends\"\n```\n\n编辑你刚刚新建的页面文件 `/source/friends/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n```\n\n同时，在你的博客 `source` 目录下新建 `_data` 目录，在 `_data` 目录中新建 `friends.json` 文件，文件内容如下所示：\n\n```json\n[{\n    \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\",\n    \"name\": \"码酱\",\n    \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\",\n    \"url\": \"http://luokangyuan.com/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/4027734.jpeg\",\n    \"name\": \"闪烁之狐\",\n    \"introduction\": \"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\",\n    \"url\": \"https://blinkfox.github.io/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/avatar.jpg\",\n    \"name\": \"ja_rome\",\n    \"introduction\": \"平凡的脚步也可以走出伟大的行程\",\n    \"url\": \"ttps://me.csdn.net/jlh912008548\",\n    \"title\": \"前去学习\"\n}]\n```\n\n### 代码高亮\n\n由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 [hexo-prism-plugin](https://github.com/ele828/hexo-prism-plugin) 的 Hexo 插件来做代码高亮，安装命令如下：\n\n```bash\nnpm i -S hexo-prism-plugin\n```\n\n然后，修改 Hexo 根目录下 `_config.yml` 文件中 `highlight.enable` 的值为 `false`，并新增 `prism` 插件相关的配置，主要配置如下：\n\n```yaml\nhighlight:\n  enable: false\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:\n```\n\n### 搜索\n\n本主题中还使用到了 [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 的 Hexo 插件来做内容搜索，安装命令如下：\n\n```bash\nnpm install hexo-generator-search --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\nsearch:\n  path: search.xml\n  field: post\n```\n\n### 中文链接转拼音（可选的）\n\n如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 `SEO`，且 `gitment` 评论对中文链接也不支持。我们可以用 [hexo-permalink-pinyin](https://github.com/viko16/hexo-permalink-pinyin) Hexo 插件使在生成文章时生成中文拼音的永久链接。\n\n安装命令如下：\n\n```bash\nnpm i hexo-permalink-pinyin --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\npermalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'\n```\n\n> **注**：除了此插件外，[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink) 插件也可以生成非中文的链接。\n\n### 文章字数统计插件（可选的）\n\n如果你想要在文章中显示文章字数、阅读时长信息，可以安装 [hexo-wordcount](https://github.com/willin/hexo-wordcount)插件。\n\n安装命令如下：\n\n```bash\nnpm i --save hexo-wordcount\n```\n\n然后只需在本主题下的 `_config.yml` 文件中，激活以下配置项即可：\n\n```yaml\nwordCount:\n  enable: false # 将这个值设置为 true 即可.\n  postWordCount: true\n  min2read: true\n  totalCount: true\n```\n\n### 添加 RSS 订阅支持（可选的）\n\n本主题中还使用到了 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed) 的 Hexo 插件来做 `RSS`，安装命令如下：\n\n```bash\nnpm install hexo-generator-feed --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n```\n\n执行 `hexo clean && hexo g` 重新生成博客文件，然后在 `public` 文件夹中即可看到 `atom.xml` 文件，说明你已经安装成功了。\n\n### 修改页脚\n\n页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 `/layout/_partial/footer.ejs` 文件中，包括站点、使用的主题、访问量等。\n\n### 修改社交链接\n\n在主题的 `_config.yml` 文件中，默认支持 `QQ`、`GitHub` 和邮箱的配置，你可以在主题文件的 `/layout/_partial/social-link.ejs` 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：\n\n```html\n<a href=\"https://github.com/blinkfox\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\">\n    <i class=\"fa fa-github\"></i>\n</a>\n```\n\n其中，社交图标（如：`fa-github`）你可以在 [Font Awesome](https://fontawesome.com/icons) 中搜索找到。以下是常用社交图标的标识，供你参考：\n\n- Facebook: `fa-facebook`\n- Twitter: `fa-twitter`\n- Google-plus: `fa-google-plus`\n- Linkedin: `fa-linkedin`\n- Tumblr: `fa-tumblr`\n- Medium: `fa-medium`\n- Slack: `fa-slack`\n- 新浪微博: `fa-weibo`\n- 微信: `fa-wechat`\n- QQ: `fa-qq`\n\n> **注意**: 本主题中使用的 `Font Awesome` 版本为 `4.7.0`。\n\n### 修改打赏的二维码图片\n\n在主题文件的 `source/medias/reward` 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。\n\n### 配置音乐播放器（可选的）\n\n要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。\n\n首先，在你的博客 `source` 目录下的 `_data` 目录（没有的话就新建一个）中新建 `musics.json` 文件，文件内容如下所示：\n\n```json\n[{\n\t\"name\": \"五月雨变奏电音\",\n\t\"artist\": \"AnimeVibe\",\n\t\"url\": \"http://xxx.com/music1.mp3\",\n\t\"cover\": \"http://xxx.com/music-cover1.png\"\n}, {\n\t\"name\": \"Take me hand\",\n\t\"artist\": \"DAISHI DANCE,Cecile Corbel\",\n\t\"url\": \"/medias/music/music2.mp3\",\n\t\"cover\": \"/medias/music/cover2.png\"\n}, {\n\t\"name\": \"Shape of You\",\n\t\"artist\": \"J.Fla\",\n\t\"url\": \"http://xxx.com/music3.mp3\",\n\t\"cover\": \"http://xxx.com/music-cover3.png\"\n}]\n```\n\n> **注**：以上 JSON 中的属性：`name`、`artist`、`url`、`cover` 分别表示音乐的名称、作者、音乐文件地址、音乐封面。\n\n然后，在主题的 `_config.yml` 配置文件中激活配置即可：\n\n```yaml\n# 是否在首页显示音乐.\nmusic:\n  enable: true\n  showTitle: false\n  title: 听听音乐\n  fixed: false # 是否开启吸底模式\n  autoplay: false # 是否自动播放\n  theme: '#42b983'\n  loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'list' # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: false # 列表默认折叠\n  listMaxHeight: # 列表最大高度\n```\n\n## 文章 Front-matter 介绍\n\n### Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n| 配置选项   | 默认值                      | 描述                                                         |\n| ---------- | --------------------------- | ------------------------------------------------------------ |\n| title      | `Markdown` 的文件标题        | 文章标题，强烈建议填写此选项                                 |\n| date       | 文件创建时的日期时间          | 发布时间，强烈建议填写此选项，且最好保证全局唯一             |\n| author     | 根 `_config.yml` 中的 `author` | 文章作者                                                     |\n| img        | `featureImages` 中的某个值   | 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg` |\n| top        | `true`                      | 推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章 |\n| cover      | `false`                     | `v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中 |\n| coverImg   | 无                          | `v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 |\n| password   | 无                          | 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项 |\n| toc        | `true`                      | 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项 |\n| mathjax    | `false`                     | 是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行 |\n| summary    | 无                          | 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 |\n| categories | 无                          | 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 |\n| tags       | 无                          | 文章标签，一篇文章可以多个标签                              |\n\n> **注意**:\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图**各有特色**。\n> 2. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 3. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[开源中国在线工具](http://tool.oschina.net/encrypt?type=2)、[chahuo](http://encode.chahuo.com/)、[站长工具](http://tool.chinaz.com/tools/hash.aspx)。\n\n以下为文章的 `Front-matter` 示例。\n\n### 最简示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n\n### 最全示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```\n\n## 效果截图\n\n![首页](https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-1.png)\n\n![首页推荐文章](https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-2.png)\n\n![首页文章列表](https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-3.png)\n\n![首页文章列表](https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-7.png)\n\n![首页文章列表](https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-8.png)\n\n## 自定制修改\n\n在本主题的 `_config.yml` 中可以修改部分自定义信息，有以下几个部分：\n\n- 菜单\n- 我的梦想\n- 首页的音乐播放器和视频播放器配置\n- 是否显示推荐文章名称和按钮配置\n- `favicon` 和 `Logo`\n- 个人信息\n- TOC 目录\n- 文章打赏信息\n- 复制文章内容时追加版权信息\n- MathJax\n- 文章字数统计、阅读时长\n- 点击页面的'爱心'效果\n- 我的项目\n- 我的技能\n- 我的相册\n- `Gitalk`、`Gitment`、`Valine` 和 `disqus` 评论配置\n- [不蒜子统计](http://busuanzi.ibruce.info/)和谷歌分析（`Google Analytics`）\n- 默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 `hashcode` 值取余，来选择展示对应的特色图\n\n**我认为个人博客应该都有自己的风格和特色**。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 `_config.yml` 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：\n\n### 修改主题颜色\n\n在主题文件的 `/source/css/matery.css` 文件中，搜索 `.bg-color` 来修改背景颜色：\n\n```css\n/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */\n.bg-color {\n    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);\n}\n\n@-webkit-keyframes rainbow {\n   /* 动态切换背景颜色. */\n}\n\n@keyframes rainbow {\n    /* 动态切换背景颜色. */\n}\n```\n\n### 修改 banner 图和文章特色图\n\n你可以直接在 `/source/medias/banner` 文件夹中更换你喜欢的 `banner` 图片，主题代码中是每天动态切换一张，只需 `7` 张即可。如果你会 `JavaScript` 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，`banner` 切换的代码位置在 `/layout/_partial/bg-cover-content.ejs` 文件的 `<script></script>` 代码中：\n\n```javascript\n$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');\n```\n\n在 `/source/medias/featureimages` 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 `_config.yml` 做同步修改。\n\n## 版本记录\n\n- v1.0.0\n  - 新增了所有基础功能；\n- v1.0.1\n  - 调整 `css`、`js` 的文件请求路径在主题的`_config.yml`中配置，便于你更快捷的配置自己的 CDN；\n  - 新增代码是否折行为可配置，默认为折行；\n  - 默认激活 `TOC` 功能，并新增为某篇文章关闭 `TOC` 的 `Front-matter` 配置选项；\n  - 修复文章滚动时，高亮的目录选项不准确的问题；\n  - `IOS`下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；\n- v1.0.2\n  - 升级了 [Materialize](https://materializecss.com/) 框架版本为`1.0.0`，重构和修改了升级过程中的部分文件或问题；\n  - 新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；\n  - 修复首页第一个按钮是中文的问题\n  - 修复了 iPhone 上点击搜索输入获取焦点的问题；\n  - 修复了 iPhone 上输入框获取焦点后页面放大的问题；\n  - 修复一些文章或 UI 显示问题；\n","source":"_posts/Hexo博客主题之hexo-theme-matery的介绍.md","raw":"---\ntitle: Hexo博客主题之hexo-theme-matery的介绍\ndate: 2018-09-28 13:34:00\nauthor: blinkfox\ncover: true\ncategories: 前端\ntags:\n  - Hexo\n  - hexo-theme-matery\n---\n[English Document](README.md) | [演示示例](https://blinkfox.github.io/) | QQ交流群:`926552981`\n\n> 这是一个采用`Material Design`和响应式设计的 Hexo 博客主题。\n\n## 特性\n\n- 简单漂亮，文章内容美观易读\n- [Material Design](https://material.io/) 设计\n- 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现\n- 首页轮播文章及每天动态切换 `Banner` 图片\n- 瀑布流式的博客文章列表（文章无特色图片时会有 `24` 张漂亮的图片代替）\n- 时间轴式的归档页\n- **词云**的标签页和**雷达图**的分类页\n- 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）\n- 可自定义的数据的友情链接页面\n- 支持文章置顶和文章打赏\n- 支持 `MathJax`\n- `TOC` 目录\n- 可设置复制文章内容时追加版权信息\n- 可设置阅读文章时做密码验证\n- [Gitalk](https://gitalk.github.io/)、[Gitment](https://imsun.github.io/gitment/)、[Valine](https://valine.js.org/) 和 [Disqus](https://disqus.com/) 评论模块（推荐使用 `Gitalk`）\n- 集成了[不蒜子统计](http://busuanzi.ibruce.info/)、谷歌分析（`Google Analytics`）和文章字数统计等功能\n- 支持在首页的音乐播放和视频播放功能\n\n## 下载\n\n当你看到这里的时候，应该已经有一个自己的 [Hexo](https://hexo.io/zh-cn/) 博客了。如果还没有的话，不妨使用 Hexo 和 [Markdown](https://www.appinn.com/markdown/) 来写博客和文章。\n\n点击 [这里](https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master) 下载 `master` 分支的最新稳定版的代码，解压缩后，将 `hexo-theme-matery` 的文件夹复制到你 Hexo 的 `themes` 文件夹中即可。\n\n当然你也可以在你的 `themes` 文件夹下使用 `Git clone` 命令来下载:\n\n```bash\ngit clone https://github.com/blinkfox/hexo-theme-matery.git\n```\n\n## 配置\n\n### 切换主题\n\n修改 Hexo 根目录下的 `_config.yml` 的  `theme` 的值：`theme: hexo-theme-matery`\n\n#### `_config.yml` 文件的其它修改建议:\n \n- 请修改 `_config.yml` 的 `url` 的值为你的网站主 `URL`（如：`http://xxx.github.io`）。\n- 建议修改两个 `per_page` 的分页条数值为 `6` 的倍数，如：`12`、`18` 等，这样文章列表在各个屏幕下都能较好的显示。\n- 如果你是中文用户，则建议修改 `language` 的值为 `zh-CN`。\n\n### 新建分类 categories 页\n\n`categories` 页是用来展示所有分类的页面，如果在你的博客 `source` 目录下还没有 `categories/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"categories\"\n```\n\n编辑你刚刚新建的页面文件 `/source/categories/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n```\n\n### 新建标签 tags 页\n\n`tags` 页是用来展示所有标签的页面，如果在你的博客 `source` 目录下还没有 `tags/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"tags\"\n```\n\n编辑你刚刚新建的页面文件 `/source/tags/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n```\n\n### 新建关于我 about 页\n\n`about` 页是用来展示**关于我和我的博客**信息的页面，如果在你的博客 `source` 目录下还没有 `about/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"about\"\n```\n\n编辑你刚刚新建的页面文件 `/source/about/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n```\n\n### 新建友情连接 friends 页（可选的）\n\n`friends` 页是用来展示**友情连接**信息的页面，如果在你的博客 `source` 目录下还没有 `friends/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```bash\nhexo new page \"friends\"\n```\n\n编辑你刚刚新建的页面文件 `/source/friends/index.md`，至少需要以下内容：\n\n```yaml\n---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n```\n\n同时，在你的博客 `source` 目录下新建 `_data` 目录，在 `_data` 目录中新建 `friends.json` 文件，文件内容如下所示：\n\n```json\n[{\n    \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\",\n    \"name\": \"码酱\",\n    \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\",\n    \"url\": \"http://luokangyuan.com/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/4027734.jpeg\",\n    \"name\": \"闪烁之狐\",\n    \"introduction\": \"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\",\n    \"url\": \"https://blinkfox.github.io/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/avatar.jpg\",\n    \"name\": \"ja_rome\",\n    \"introduction\": \"平凡的脚步也可以走出伟大的行程\",\n    \"url\": \"ttps://me.csdn.net/jlh912008548\",\n    \"title\": \"前去学习\"\n}]\n```\n\n### 代码高亮\n\n由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 [hexo-prism-plugin](https://github.com/ele828/hexo-prism-plugin) 的 Hexo 插件来做代码高亮，安装命令如下：\n\n```bash\nnpm i -S hexo-prism-plugin\n```\n\n然后，修改 Hexo 根目录下 `_config.yml` 文件中 `highlight.enable` 的值为 `false`，并新增 `prism` 插件相关的配置，主要配置如下：\n\n```yaml\nhighlight:\n  enable: false\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:\n```\n\n### 搜索\n\n本主题中还使用到了 [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 的 Hexo 插件来做内容搜索，安装命令如下：\n\n```bash\nnpm install hexo-generator-search --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\nsearch:\n  path: search.xml\n  field: post\n```\n\n### 中文链接转拼音（可选的）\n\n如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 `SEO`，且 `gitment` 评论对中文链接也不支持。我们可以用 [hexo-permalink-pinyin](https://github.com/viko16/hexo-permalink-pinyin) Hexo 插件使在生成文章时生成中文拼音的永久链接。\n\n安装命令如下：\n\n```bash\nnpm i hexo-permalink-pinyin --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\npermalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'\n```\n\n> **注**：除了此插件外，[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink) 插件也可以生成非中文的链接。\n\n### 文章字数统计插件（可选的）\n\n如果你想要在文章中显示文章字数、阅读时长信息，可以安装 [hexo-wordcount](https://github.com/willin/hexo-wordcount)插件。\n\n安装命令如下：\n\n```bash\nnpm i --save hexo-wordcount\n```\n\n然后只需在本主题下的 `_config.yml` 文件中，激活以下配置项即可：\n\n```yaml\nwordCount:\n  enable: false # 将这个值设置为 true 即可.\n  postWordCount: true\n  min2read: true\n  totalCount: true\n```\n\n### 添加 RSS 订阅支持（可选的）\n\n本主题中还使用到了 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed) 的 Hexo 插件来做 `RSS`，安装命令如下：\n\n```bash\nnpm install hexo-generator-feed --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```yaml\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n```\n\n执行 `hexo clean && hexo g` 重新生成博客文件，然后在 `public` 文件夹中即可看到 `atom.xml` 文件，说明你已经安装成功了。\n\n### 修改页脚\n\n页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 `/layout/_partial/footer.ejs` 文件中，包括站点、使用的主题、访问量等。\n\n### 修改社交链接\n\n在主题的 `_config.yml` 文件中，默认支持 `QQ`、`GitHub` 和邮箱的配置，你可以在主题文件的 `/layout/_partial/social-link.ejs` 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：\n\n```html\n<a href=\"https://github.com/blinkfox\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\">\n    <i class=\"fa fa-github\"></i>\n</a>\n```\n\n其中，社交图标（如：`fa-github`）你可以在 [Font Awesome](https://fontawesome.com/icons) 中搜索找到。以下是常用社交图标的标识，供你参考：\n\n- Facebook: `fa-facebook`\n- Twitter: `fa-twitter`\n- Google-plus: `fa-google-plus`\n- Linkedin: `fa-linkedin`\n- Tumblr: `fa-tumblr`\n- Medium: `fa-medium`\n- Slack: `fa-slack`\n- 新浪微博: `fa-weibo`\n- 微信: `fa-wechat`\n- QQ: `fa-qq`\n\n> **注意**: 本主题中使用的 `Font Awesome` 版本为 `4.7.0`。\n\n### 修改打赏的二维码图片\n\n在主题文件的 `source/medias/reward` 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。\n\n### 配置音乐播放器（可选的）\n\n要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。\n\n首先，在你的博客 `source` 目录下的 `_data` 目录（没有的话就新建一个）中新建 `musics.json` 文件，文件内容如下所示：\n\n```json\n[{\n\t\"name\": \"五月雨变奏电音\",\n\t\"artist\": \"AnimeVibe\",\n\t\"url\": \"http://xxx.com/music1.mp3\",\n\t\"cover\": \"http://xxx.com/music-cover1.png\"\n}, {\n\t\"name\": \"Take me hand\",\n\t\"artist\": \"DAISHI DANCE,Cecile Corbel\",\n\t\"url\": \"/medias/music/music2.mp3\",\n\t\"cover\": \"/medias/music/cover2.png\"\n}, {\n\t\"name\": \"Shape of You\",\n\t\"artist\": \"J.Fla\",\n\t\"url\": \"http://xxx.com/music3.mp3\",\n\t\"cover\": \"http://xxx.com/music-cover3.png\"\n}]\n```\n\n> **注**：以上 JSON 中的属性：`name`、`artist`、`url`、`cover` 分别表示音乐的名称、作者、音乐文件地址、音乐封面。\n\n然后，在主题的 `_config.yml` 配置文件中激活配置即可：\n\n```yaml\n# 是否在首页显示音乐.\nmusic:\n  enable: true\n  showTitle: false\n  title: 听听音乐\n  fixed: false # 是否开启吸底模式\n  autoplay: false # 是否自动播放\n  theme: '#42b983'\n  loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'list' # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: false # 列表默认折叠\n  listMaxHeight: # 列表最大高度\n```\n\n## 文章 Front-matter 介绍\n\n### Front-matter 选项详解\n\n`Front-matter` 选项中的所有内容均为**非必填**的。但我仍然建议至少填写 `title` 和 `date` 的值。\n\n| 配置选项   | 默认值                      | 描述                                                         |\n| ---------- | --------------------------- | ------------------------------------------------------------ |\n| title      | `Markdown` 的文件标题        | 文章标题，强烈建议填写此选项                                 |\n| date       | 文件创建时的日期时间          | 发布时间，强烈建议填写此选项，且最好保证全局唯一             |\n| author     | 根 `_config.yml` 中的 `author` | 文章作者                                                     |\n| img        | `featureImages` 中的某个值   | 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: `http://xxx.com/xxx.jpg` |\n| top        | `true`                      | 推荐文章（文章是否置顶），如果 `top` 值为 `true`，则会作为首页推荐文章 |\n| cover      | `false`                     | `v1.0.2`版本新增，表示该文章是否需要加入到首页轮播封面中 |\n| coverImg   | 无                          | `v1.0.2`版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 |\n| password   | 无                          | 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 `password` 的值，该值必须是用 `SHA256` 加密后的密码，防止被他人识破。前提是在主题的 `config.yml` 中激活了 `verifyPassword` 选项 |\n| toc        | `true`                      | 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 `config.yml` 中激活了 `toc` 选项 |\n| mathjax    | `false`                     | 是否开启数学公式支持 ，本文章是否开启 `mathjax`，且需要在主题的 `_config.yml` 文件中也需要开启才行 |\n| summary    | 无                          | 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 |\n| categories | 无                          | 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 |\n| tags       | 无                          | 文章标签，一篇文章可以多个标签                              |\n\n> **注意**:\n> 1. 如果 `img` 属性不填写的话，文章特色图会根据文章标题的 `hashcode` 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图**各有特色**。\n> 2. `date` 的值尽量保证每篇文章是唯一的，因为本主题中 `Gitalk` 和 `Gitment` 识别 `id` 是通过 `date` 的值来作为唯一标识的。\n> 3. 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 `_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：[开源中国在线工具](http://tool.oschina.net/encrypt?type=2)、[chahuo](http://encode.chahuo.com/)、[站长工具](http://tool.chinaz.com/tools/hash.aspx)。\n\n以下为文章的 `Front-matter` 示例。\n\n### 最简示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\n---\n```\n\n### 最全示例\n\n```yaml\n---\ntitle: typora-vue-theme主题介绍\ndate: 2018-09-07 09:25:00\nauthor: 赵奇\nimg: /source/images/xxx.jpg\ntop: true\ncover: true\ncoverImg: /images/1.jpg\npassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92\ntoc: false\nmathjax: false\nsummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要\ncategories: Markdown\ntags:\n  - Typora\n  - Markdown\n---\n```\n\n## 效果截图\n\n![首页](https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-1.png)\n\n![首页推荐文章](https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-2.png)\n\n![首页文章列表](https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-3.png)\n\n![首页文章列表](https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-7.png)\n\n![首页文章列表](https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-8.png)\n\n## 自定制修改\n\n在本主题的 `_config.yml` 中可以修改部分自定义信息，有以下几个部分：\n\n- 菜单\n- 我的梦想\n- 首页的音乐播放器和视频播放器配置\n- 是否显示推荐文章名称和按钮配置\n- `favicon` 和 `Logo`\n- 个人信息\n- TOC 目录\n- 文章打赏信息\n- 复制文章内容时追加版权信息\n- MathJax\n- 文章字数统计、阅读时长\n- 点击页面的'爱心'效果\n- 我的项目\n- 我的技能\n- 我的相册\n- `Gitalk`、`Gitment`、`Valine` 和 `disqus` 评论配置\n- [不蒜子统计](http://busuanzi.ibruce.info/)和谷歌分析（`Google Analytics`）\n- 默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 `hashcode` 值取余，来选择展示对应的特色图\n\n**我认为个人博客应该都有自己的风格和特色**。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 `_config.yml` 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：\n\n### 修改主题颜色\n\n在主题文件的 `/source/css/matery.css` 文件中，搜索 `.bg-color` 来修改背景颜色：\n\n```css\n/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */\n.bg-color {\n    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);\n}\n\n@-webkit-keyframes rainbow {\n   /* 动态切换背景颜色. */\n}\n\n@keyframes rainbow {\n    /* 动态切换背景颜色. */\n}\n```\n\n### 修改 banner 图和文章特色图\n\n你可以直接在 `/source/medias/banner` 文件夹中更换你喜欢的 `banner` 图片，主题代码中是每天动态切换一张，只需 `7` 张即可。如果你会 `JavaScript` 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，`banner` 切换的代码位置在 `/layout/_partial/bg-cover-content.ejs` 文件的 `<script></script>` 代码中：\n\n```javascript\n$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');\n```\n\n在 `/source/medias/featureimages` 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 `_config.yml` 做同步修改。\n\n## 版本记录\n\n- v1.0.0\n  - 新增了所有基础功能；\n- v1.0.1\n  - 调整 `css`、`js` 的文件请求路径在主题的`_config.yml`中配置，便于你更快捷的配置自己的 CDN；\n  - 新增代码是否折行为可配置，默认为折行；\n  - 默认激活 `TOC` 功能，并新增为某篇文章关闭 `TOC` 的 `Front-matter` 配置选项；\n  - 修复文章滚动时，高亮的目录选项不准确的问题；\n  - `IOS`下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；\n- v1.0.2\n  - 升级了 [Materialize](https://materializecss.com/) 框架版本为`1.0.0`，重构和修改了升级过程中的部分文件或问题；\n  - 新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；\n  - 修复首页第一个按钮是中文的问题\n  - 修复了 iPhone 上点击搜索输入获取焦点的问题；\n  - 修复了 iPhone 上输入框获取焦点后页面放大的问题；\n  - 修复一些文章或 UI 显示问题；\n","slug":"Hexo博客主题之hexo-theme-matery的介绍","published":1,"updated":"2024-12-12T16:49:46.406Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27ve90005ge9k1v01grkv","content":"<p><a href=\"README.md\">English Document</a> | <a href=\"https://blinkfox.github.io/\">演示示例</a> | QQ交流群:<code>926552981</code></p>\n<blockquote>\n<p>这是一个采用<code>Material Design</code>和响应式设计的 Hexo 博客主题。</p>\n</blockquote>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>简单漂亮，文章内容美观易读</li>\n<li><a href=\"https://material.io/\">Material Design</a> 设计</li>\n<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>\n<li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li>\n<li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li>\n<li>时间轴式的归档页</li>\n<li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li>\n<li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li>\n<li>可自定义的数据的友情链接页面</li>\n<li>支持文章置顶和文章打赏</li>\n<li>支持 <code>MathJax</code></li>\n<li><code>TOC</code> 目录</li>\n<li>可设置复制文章内容时追加版权信息</li>\n<li>可设置阅读文章时做密码验证</li>\n<li><a href=\"https://gitalk.github.io/\">Gitalk</a>、<a href=\"https://imsun.github.io/gitment/\">Gitment</a>、<a href=\"https://valine.js.org/\">Valine</a> 和 <a href=\"https://disqus.com/\">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li>\n<li>集成了<a href=\"http://busuanzi.ibruce.info/\">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li>\n<li>支持在首页的音乐播放和视频播放功能</li>\n</ul>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href=\"https://hexo.io/zh-cn/\">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href=\"https://www.appinn.com/markdown/\">Markdown</a> 来写博客和文章。</p>\n<p>点击 <a href=\"https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master\">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p>\n<p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/blinkfox/hexo-theme-matery.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p>\n<h4 id=\"config-yml-文件的其它修改建议\"><a href=\"#config-yml-文件的其它修改建议\" class=\"headerlink\" title=\"_config.yml 文件的其它修改建议:\"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul>\n<li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li>\n<li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>\n<li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li>\n</ul>\n<h3 id=\"新建分类-categories-页\"><a href=\"#新建分类-categories-页\" class=\"headerlink\" title=\"新建分类 categories 页\"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-30 17:25:30</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建标签-tags-页\"><a href=\"#新建标签-tags-页\" class=\"headerlink\" title=\"新建标签 tags 页\"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-30 18:23:38</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;tags&quot;</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">&quot;tags&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建关于我-about-页\"><a href=\"#新建关于我-about-页\" class=\"headerlink\" title=\"新建关于我 about 页\"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">about</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-30 17:25:30</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;about&quot;</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">&quot;about&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建友情连接-friends-页（可选的）\"><a href=\"#新建友情连接-friends-页（可选的）\" class=\"headerlink\" title=\"新建友情连接 friends 页（可选的）\"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;friends&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">friends</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-12-12 21:25:30</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;friends&quot;</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">&quot;friends&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;avatar&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;码酱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;introduction&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;我不是大佬，只是在追寻大佬的脚步&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://luokangyuan.com/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;前去学习&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;avatar&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://image.luokangyuan.com/4027734.jpeg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;闪烁之狐&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;introduction&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://blinkfox.github.io/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;前去学习&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;avatar&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://image.luokangyuan.com/avatar.jpg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ja_rome&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;introduction&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;平凡的脚步也可以走出伟大的行程&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ttps://me.csdn.net/jlh912008548&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;前去学习&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href=\"https://github.com/ele828/hexo-prism-plugin\">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-prism-plugin</span><br></pre></td></tr></table></figure>\n\n<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">prism_plugin:</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;preprocess&#x27;</span>    <span class=\"comment\"># realtime/preprocess</span></span><br><span class=\"line\">  <span class=\"attr\">theme:</span> <span class=\"string\">&#x27;tomorrow&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">false</span>    <span class=\"comment\"># default false</span></span><br><span class=\"line\">  <span class=\"attr\">custom_css:</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>本主题中还使用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中文链接转拼音（可选的）\"><a href=\"#中文链接转拼音（可选的）\" class=\"headerlink\" title=\"中文链接转拼音（可选的）\"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href=\"https://github.com/viko16/hexo-permalink-pinyin\">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>\n<p>安装命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure>\n\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink_pinyin:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">separator:</span> <span class=\"string\">&#x27;-&#x27;</span> <span class=\"comment\"># default: &#x27;-&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注</strong>：除了此插件外，<a href=\"https://github.com/rozbo/hexo-abbrlink\">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>\n</blockquote>\n<h3 id=\"文章字数统计插件（可选的）\"><a href=\"#文章字数统计插件（可选的）\" class=\"headerlink\" title=\"文章字数统计插件（可选的）\"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href=\"https://github.com/willin/hexo-wordcount\">hexo-wordcount</a>插件。</p>\n<p>安装命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>\n\n<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">wordCount:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 将这个值设置为 true 即可.</span></span><br><span class=\"line\">  <span class=\"attr\">postWordCount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">min2read:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">totalCount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-RSS-订阅支持（可选的）\"><a href=\"#添加-RSS-订阅支持（可选的）\" class=\"headerlink\" title=\"添加 RSS 订阅支持（可选的）\"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href=\"https://github.com/hexojs/hexo-generator-feed\">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\">  <span class=\"attr\">limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\">  <span class=\"attr\">hub:</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">  <span class=\"attr\">content_limit:</span> <span class=\"number\">140</span></span><br><span class=\"line\">  <span class=\"attr\">content_limit_delim:</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p>\n<h3 id=\"修改页脚\"><a href=\"#修改页脚\" class=\"headerlink\" title=\"修改页脚\"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p>\n<h3 id=\"修改社交链接\"><a href=\"#修改社交链接\" class=\"headerlink\" title=\"修改社交链接\"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://github.com/blinkfox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tooltipped&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">data-tooltip</span>=<span class=\"string\">&quot;访问我的GitHub&quot;</span> <span class=\"attr\">data-position</span>=<span class=\"string\">&quot;top&quot;</span> <span class=\"attr\">data-delay</span>=<span class=\"string\">&quot;50&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-github&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href=\"https://fontawesome.com/icons\">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>\n<ul>\n<li>Facebook: <code>fa-facebook</code></li>\n<li>Twitter: <code>fa-twitter</code></li>\n<li>Google-plus: <code>fa-google-plus</code></li>\n<li>Linkedin: <code>fa-linkedin</code></li>\n<li>Tumblr: <code>fa-tumblr</code></li>\n<li>Medium: <code>fa-medium</code></li>\n<li>Slack: <code>fa-slack</code></li>\n<li>新浪微博: <code>fa-weibo</code></li>\n<li>微信: <code>fa-wechat</code></li>\n<li>QQ: <code>fa-qq</code></li>\n</ul>\n<blockquote>\n<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>4.7.0</code>。</p>\n</blockquote>\n<h3 id=\"修改打赏的二维码图片\"><a href=\"#修改打赏的二维码图片\" class=\"headerlink\" title=\"修改打赏的二维码图片\"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>\n<h3 id=\"配置音乐播放器（可选的）\"><a href=\"#配置音乐播放器（可选的）\" class=\"headerlink\" title=\"配置音乐播放器（可选的）\"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p>\n<p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;五月雨变奏电音&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;artist&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AnimeVibe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://xxx.com/music1.mp3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;cover&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://xxx.com/music-cover1.png&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Take me hand&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;artist&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;DAISHI DANCE,Cecile Corbel&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/medias/music/music2.mp3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;cover&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/medias/music/cover2.png&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Shape of You&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;artist&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;J.Fla&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://xxx.com/music3.mp3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;cover&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://xxx.com/music-cover3.png&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p>\n</blockquote>\n<p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是否在首页显示音乐.</span></span><br><span class=\"line\"><span class=\"attr\">music:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">showTitle:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span> <span class=\"string\">听听音乐</span></span><br><span class=\"line\">  <span class=\"attr\">fixed:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否开启吸底模式</span></span><br><span class=\"line\">  <span class=\"attr\">autoplay:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否自动播放</span></span><br><span class=\"line\">  <span class=\"attr\">theme:</span> <span class=\"string\">&#x27;#42b983&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span> <span class=\"string\">&#x27;all&#x27;</span> <span class=\"comment\"># 音频循环播放, 可选值: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order:</span> <span class=\"string\">&#x27;list&#x27;</span> <span class=\"comment\"># 音频循环顺序, 可选值: &#x27;list&#x27;, &#x27;random&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"string\">&#x27;auto&#x27;</span> <span class=\"comment\"># 预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">volume:</span> <span class=\"number\">0.7</span> <span class=\"comment\"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class=\"line\">  <span class=\"attr\">listFolded:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 列表默认折叠</span></span><br><span class=\"line\">  <span class=\"attr\">listMaxHeight:</span> <span class=\"comment\"># 列表最大高度</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文章-Front-matter-介绍\"><a href=\"#文章-Front-matter-介绍\" class=\"headerlink\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"Front-matter-选项详解\"><a href=\"#Front-matter-选项详解\" class=\"headerlink\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\">站长工具</a>。</li>\n</ol>\n</blockquote>\n<p>以下为文章的 <code>Front-matter</code> 示例。</p>\n<h3 id=\"最简示例\"><a href=\"#最简示例\" class=\"headerlink\" title=\"最简示例\"></a>最简示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最全示例\"><a href=\"#最全示例\" class=\"headerlink\" title=\"最全示例\"></a>最全示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">赵奇</span></span><br><span class=\"line\"><span class=\"attr\">img:</span> <span class=\"string\">/source/images/xxx.jpg</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">cover:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">coverImg:</span> <span class=\"string\">/images/1.jpg</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class=\"line\"><span class=\"attr\">toc:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">summary:</span> <span class=\"string\">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">Markdown</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Typora</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Markdown</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果截图\"><a href=\"#效果截图\" class=\"headerlink\" title=\"效果截图\"></a>效果截图</h2><p><img src=\"https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-1.png\" alt=\"首页\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-2.png\" alt=\"首页推荐文章\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-3.png\" alt=\"首页文章列表\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-7.png\" alt=\"首页文章列表\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-8.png\" alt=\"首页文章列表\"></p>\n<h2 id=\"自定制修改\"><a href=\"#自定制修改\" class=\"headerlink\" title=\"自定制修改\"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p>\n<ul>\n<li>菜单</li>\n<li>我的梦想</li>\n<li>首页的音乐播放器和视频播放器配置</li>\n<li>是否显示推荐文章名称和按钮配置</li>\n<li><code>favicon</code> 和 <code>Logo</code></li>\n<li>个人信息</li>\n<li>TOC 目录</li>\n<li>文章打赏信息</li>\n<li>复制文章内容时追加版权信息</li>\n<li>MathJax</li>\n<li>文章字数统计、阅读时长</li>\n<li>点击页面的’爱心’效果</li>\n<li>我的项目</li>\n<li>我的技能</li>\n<li>我的相册</li>\n<li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li>\n<li><a href=\"http://busuanzi.ibruce.info/\">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li>\n<li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li>\n</ul>\n<p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p>\n<h3 id=\"修改主题颜色\"><a href=\"#修改主题颜色\" class=\"headerlink\" title=\"修改主题颜色\"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to right, <span class=\"number\">#4cbf30</span> <span class=\"number\">0%</span>, <span class=\"number\">#0f9d58</span> <span class=\"number\">100%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> rainbow &#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 动态切换背景颜色. */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> rainbow &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 动态切换背景颜色. */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-banner-图和文章特色图\"><a href=\"#修改-banner-图和文章特色图\" class=\"headerlink\" title=\"修改 banner 图和文章特色图\"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.bg-cover&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;background-image&#x27;</span>, <span class=\"string\">&#x27;url(/medias/banner/&#x27;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getDay</span>() + <span class=\"string\">&#x27;.jpg)&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>\n<h2 id=\"版本记录\"><a href=\"#版本记录\" class=\"headerlink\" title=\"版本记录\"></a>版本记录</h2><ul>\n<li>v1.0.0<ul>\n<li>新增了所有基础功能；</li>\n</ul>\n</li>\n<li>v1.0.1<ul>\n<li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li>\n<li>新增代码是否折行为可配置，默认为折行；</li>\n<li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li>\n<li>修复文章滚动时，高亮的目录选项不准确的问题；</li>\n<li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li>\n</ul>\n</li>\n<li>v1.0.2<ul>\n<li>升级了 <a href=\"https://materializecss.com/\">Materialize</a> 框架版本为<code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li>\n<li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li>\n<li>修复首页第一个按钮是中文的问题</li>\n<li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li>\n<li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li>\n<li>修复一些文章或 UI 显示问题；</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<p><a href=\"README.md\">English Document</a> | <a href=\"https://blinkfox.github.io/\">演示示例</a> | QQ交流群:<code>926552981</code></p>\n<blockquote>\n<p>这是一个采用<code>Material Design</code>和响应式设计的 Hexo 博客主题。</p>\n</blockquote>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>简单漂亮，文章内容美观易读</li>\n<li><a href=\"https://material.io/\">Material Design</a> 设计</li>\n<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>\n<li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li>\n<li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li>\n<li>时间轴式的归档页</li>\n<li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li>\n<li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li>\n<li>可自定义的数据的友情链接页面</li>\n<li>支持文章置顶和文章打赏</li>\n<li>支持 <code>MathJax</code></li>\n<li><code>TOC</code> 目录</li>\n<li>可设置复制文章内容时追加版权信息</li>\n<li>可设置阅读文章时做密码验证</li>\n<li><a href=\"https://gitalk.github.io/\">Gitalk</a>、<a href=\"https://imsun.github.io/gitment/\">Gitment</a>、<a href=\"https://valine.js.org/\">Valine</a> 和 <a href=\"https://disqus.com/\">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li>\n<li>集成了<a href=\"http://busuanzi.ibruce.info/\">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li>\n<li>支持在首页的音乐播放和视频播放功能</li>\n</ul>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href=\"https://hexo.io/zh-cn/\">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href=\"https://www.appinn.com/markdown/\">Markdown</a> 来写博客和文章。</p>\n<p>点击 <a href=\"https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master\">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p>\n<p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/blinkfox/hexo-theme-matery.git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p>\n<h4 id=\"config-yml-文件的其它修改建议\"><a href=\"#config-yml-文件的其它修改建议\" class=\"headerlink\" title=\"_config.yml 文件的其它修改建议:\"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul>\n<li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li>\n<li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>\n<li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li>\n</ul>\n<h3 id=\"新建分类-categories-页\"><a href=\"#新建分类-categories-页\" class=\"headerlink\" title=\"新建分类 categories 页\"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">categories</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-30 17:25:30</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">&quot;categories&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建标签-tags-页\"><a href=\"#新建标签-tags-页\" class=\"headerlink\" title=\"新建标签 tags 页\"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">tags</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-30 18:23:38</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;tags&quot;</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">&quot;tags&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建关于我-about-页\"><a href=\"#新建关于我-about-页\" class=\"headerlink\" title=\"新建关于我 about 页\"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">about</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-30 17:25:30</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;about&quot;</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">&quot;about&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建友情连接-friends-页（可选的）\"><a href=\"#新建友情连接-friends-页（可选的）\" class=\"headerlink\" title=\"新建友情连接 friends 页（可选的）\"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page <span class=\"string\">&quot;friends&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">friends</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-12-12 21:25:30</span></span><br><span class=\"line\"><span class=\"attr\">type:</span> <span class=\"string\">&quot;friends&quot;</span></span><br><span class=\"line\"><span class=\"attr\">layout:</span> <span class=\"string\">&quot;friends&quot;</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;avatar&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;码酱&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;introduction&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;我不是大佬，只是在追寻大佬的脚步&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://luokangyuan.com/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;前去学习&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;avatar&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://image.luokangyuan.com/4027734.jpeg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;闪烁之狐&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;introduction&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://blinkfox.github.io/&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;前去学习&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;avatar&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://image.luokangyuan.com/avatar.jpg&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ja_rome&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;introduction&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;平凡的脚步也可以走出伟大的行程&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ttps://me.csdn.net/jlh912008548&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;前去学习&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href=\"https://github.com/ele828/hexo-prism-plugin\">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -S hexo-prism-plugin</span><br></pre></td></tr></table></figure>\n\n<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">prism_plugin:</span></span><br><span class=\"line\">  <span class=\"attr\">mode:</span> <span class=\"string\">&#x27;preprocess&#x27;</span>    <span class=\"comment\"># realtime/preprocess</span></span><br><span class=\"line\">  <span class=\"attr\">theme:</span> <span class=\"string\">&#x27;tomorrow&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">line_number:</span> <span class=\"literal\">false</span>    <span class=\"comment\"># default false</span></span><br><span class=\"line\">  <span class=\"attr\">custom_css:</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>本主题中还使用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>\n\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"中文链接转拼音（可选的）\"><a href=\"#中文链接转拼音（可选的）\" class=\"headerlink\" title=\"中文链接转拼音（可选的）\"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href=\"https://github.com/viko16/hexo-permalink-pinyin\">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>\n<p>安装命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure>\n\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">permalink_pinyin:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">separator:</span> <span class=\"string\">&#x27;-&#x27;</span> <span class=\"comment\"># default: &#x27;-&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注</strong>：除了此插件外，<a href=\"https://github.com/rozbo/hexo-abbrlink\">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>\n</blockquote>\n<h3 id=\"文章字数统计插件（可选的）\"><a href=\"#文章字数统计插件（可选的）\" class=\"headerlink\" title=\"文章字数统计插件（可选的）\"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href=\"https://github.com/willin/hexo-wordcount\">hexo-wordcount</a>插件。</p>\n<p>安装命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure>\n\n<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">wordCount:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 将这个值设置为 true 即可.</span></span><br><span class=\"line\">  <span class=\"attr\">postWordCount:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">min2read:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">totalCount:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加-RSS-订阅支持（可选的）\"><a href=\"#添加-RSS-订阅支持（可选的）\" class=\"headerlink\" title=\"添加 RSS 订阅支持（可选的）\"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href=\"https://github.com/hexojs/hexo-generator-feed\">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">feed:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">atom</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">atom.xml</span></span><br><span class=\"line\">  <span class=\"attr\">limit:</span> <span class=\"number\">20</span></span><br><span class=\"line\">  <span class=\"attr\">hub:</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span></span><br><span class=\"line\">  <span class=\"attr\">content_limit:</span> <span class=\"number\">140</span></span><br><span class=\"line\">  <span class=\"attr\">content_limit_delim:</span> <span class=\"string\">&#x27; &#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order_by:</span> <span class=\"string\">-date</span></span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p>\n<h3 id=\"修改页脚\"><a href=\"#修改页脚\" class=\"headerlink\" title=\"修改页脚\"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p>\n<h3 id=\"修改社交链接\"><a href=\"#修改社交链接\" class=\"headerlink\" title=\"修改社交链接\"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://github.com/blinkfox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tooltipped&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span> <span class=\"attr\">data-tooltip</span>=<span class=\"string\">&quot;访问我的GitHub&quot;</span> <span class=\"attr\">data-position</span>=<span class=\"string\">&quot;top&quot;</span> <span class=\"attr\">data-delay</span>=<span class=\"string\">&quot;50&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fa fa-github&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href=\"https://fontawesome.com/icons\">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>\n<ul>\n<li>Facebook: <code>fa-facebook</code></li>\n<li>Twitter: <code>fa-twitter</code></li>\n<li>Google-plus: <code>fa-google-plus</code></li>\n<li>Linkedin: <code>fa-linkedin</code></li>\n<li>Tumblr: <code>fa-tumblr</code></li>\n<li>Medium: <code>fa-medium</code></li>\n<li>Slack: <code>fa-slack</code></li>\n<li>新浪微博: <code>fa-weibo</code></li>\n<li>微信: <code>fa-wechat</code></li>\n<li>QQ: <code>fa-qq</code></li>\n</ul>\n<blockquote>\n<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>4.7.0</code>。</p>\n</blockquote>\n<h3 id=\"修改打赏的二维码图片\"><a href=\"#修改打赏的二维码图片\" class=\"headerlink\" title=\"修改打赏的二维码图片\"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>\n<h3 id=\"配置音乐播放器（可选的）\"><a href=\"#配置音乐播放器（可选的）\" class=\"headerlink\" title=\"配置音乐播放器（可选的）\"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p>\n<p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;五月雨变奏电音&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;artist&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;AnimeVibe&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://xxx.com/music1.mp3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;cover&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://xxx.com/music-cover1.png&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Take me hand&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;artist&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;DAISHI DANCE,Cecile Corbel&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/medias/music/music2.mp3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;cover&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;/medias/music/cover2.png&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Shape of You&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;artist&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;J.Fla&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://xxx.com/music3.mp3&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t<span class=\"attr\">&quot;cover&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://xxx.com/music-cover3.png&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p>\n</blockquote>\n<p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 是否在首页显示音乐.</span></span><br><span class=\"line\"><span class=\"attr\">music:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">showTitle:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">title:</span> <span class=\"string\">听听音乐</span></span><br><span class=\"line\">  <span class=\"attr\">fixed:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否开启吸底模式</span></span><br><span class=\"line\">  <span class=\"attr\">autoplay:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否自动播放</span></span><br><span class=\"line\">  <span class=\"attr\">theme:</span> <span class=\"string\">&#x27;#42b983&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">loop:</span> <span class=\"string\">&#x27;all&#x27;</span> <span class=\"comment\"># 音频循环播放, 可选值: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">order:</span> <span class=\"string\">&#x27;list&#x27;</span> <span class=\"comment\"># 音频循环顺序, 可选值: &#x27;list&#x27;, &#x27;random&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"string\">&#x27;auto&#x27;</span> <span class=\"comment\"># 预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">volume:</span> <span class=\"number\">0.7</span> <span class=\"comment\"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class=\"line\">  <span class=\"attr\">listFolded:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 列表默认折叠</span></span><br><span class=\"line\">  <span class=\"attr\">listMaxHeight:</span> <span class=\"comment\"># 列表最大高度</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文章-Front-matter-介绍\"><a href=\"#文章-Front-matter-介绍\" class=\"headerlink\" title=\"文章 Front-matter 介绍\"></a>文章 Front-matter 介绍</h2><h3 id=\"Front-matter-选项详解\"><a href=\"#Front-matter-选项详解\" class=\"headerlink\" title=\"Front-matter 选项详解\"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p>\n<table>\n<thead>\n<tr>\n<th>配置选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td><code>Markdown</code> 的文件标题</td>\n<td>文章标题，强烈建议填写此选项</td>\n</tr>\n<tr>\n<td>date</td>\n<td>文件创建时的日期时间</td>\n<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>\n</tr>\n<tr>\n<td>author</td>\n<td>根 <code>_config.yml</code> 中的 <code>author</code></td>\n<td>文章作者</td>\n</tr>\n<tr>\n<td>img</td>\n<td><code>featureImages</code> 中的某个值</td>\n<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td>\n</tr>\n<tr>\n<td>top</td>\n<td><code>true</code></td>\n<td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td>\n</tr>\n<tr>\n<td>cover</td>\n<td><code>false</code></td>\n<td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td>\n</tr>\n<tr>\n<td>coverImg</td>\n<td>无</td>\n<td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>\n</tr>\n<tr>\n<td>password</td>\n<td>无</td>\n<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td>\n</tr>\n<tr>\n<td>toc</td>\n<td><code>true</code></td>\n<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td>\n</tr>\n<tr>\n<td>mathjax</td>\n<td><code>false</code></td>\n<td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td>\n</tr>\n<tr>\n<td>summary</td>\n<td>无</td>\n<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>无</td>\n<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>无</td>\n<td>文章标签，一篇文章可以多个标签</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意</strong>:</p>\n<ol>\n<li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li>\n<li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li>\n<li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href=\"http://tool.oschina.net/encrypt?type=2\">开源中国在线工具</a>、<a href=\"http://encode.chahuo.com/\">chahuo</a>、<a href=\"http://tool.chinaz.com/tools/hash.aspx\">站长工具</a>。</li>\n</ol>\n</blockquote>\n<p>以下为文章的 <code>Front-matter</code> 示例。</p>\n<h3 id=\"最简示例\"><a href=\"#最简示例\" class=\"headerlink\" title=\"最简示例\"></a>最简示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"最全示例\"><a href=\"#最全示例\" class=\"headerlink\" title=\"最全示例\"></a>最全示例</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">typora-vue-theme主题介绍</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2018-09-07 09:25:00</span></span><br><span class=\"line\"><span class=\"attr\">author:</span> <span class=\"string\">赵奇</span></span><br><span class=\"line\"><span class=\"attr\">img:</span> <span class=\"string\">/source/images/xxx.jpg</span></span><br><span class=\"line\"><span class=\"attr\">top:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">cover:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">coverImg:</span> <span class=\"string\">/images/1.jpg</span></span><br><span class=\"line\"><span class=\"attr\">password:</span> <span class=\"string\">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class=\"line\"><span class=\"attr\">toc:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"attr\">summary:</span> <span class=\"string\">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">Markdown</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Typora</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">Markdown</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果截图\"><a href=\"#效果截图\" class=\"headerlink\" title=\"效果截图\"></a>效果截图</h2><p><img src=\"https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-1.png\" alt=\"首页\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-2.png\" alt=\"首页推荐文章\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-3.png\" alt=\"首页文章列表\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-7.png\" alt=\"首页文章列表\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-8.png\" alt=\"首页文章列表\"></p>\n<h2 id=\"自定制修改\"><a href=\"#自定制修改\" class=\"headerlink\" title=\"自定制修改\"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p>\n<ul>\n<li>菜单</li>\n<li>我的梦想</li>\n<li>首页的音乐播放器和视频播放器配置</li>\n<li>是否显示推荐文章名称和按钮配置</li>\n<li><code>favicon</code> 和 <code>Logo</code></li>\n<li>个人信息</li>\n<li>TOC 目录</li>\n<li>文章打赏信息</li>\n<li>复制文章内容时追加版权信息</li>\n<li>MathJax</li>\n<li>文章字数统计、阅读时长</li>\n<li>点击页面的’爱心’效果</li>\n<li>我的项目</li>\n<li>我的技能</li>\n<li>我的相册</li>\n<li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li>\n<li><a href=\"http://busuanzi.ibruce.info/\">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li>\n<li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li>\n</ul>\n<p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p>\n<h3 id=\"修改主题颜色\"><a href=\"#修改主题颜色\" class=\"headerlink\" title=\"修改主题颜色\"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span></span><br><span class=\"line\"><span class=\"selector-class\">.bg-color</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">linear-gradient</span>(to right, <span class=\"number\">#4cbf30</span> <span class=\"number\">0%</span>, <span class=\"number\">#0f9d58</span> <span class=\"number\">100%</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@-webkit-keyframes</span> rainbow &#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 动态切换背景颜色. */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> rainbow &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 动态切换背景颜色. */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-banner-图和文章特色图\"><a href=\"#修改-banner-图和文章特色图\" class=\"headerlink\" title=\"修改 banner 图和文章特色图\"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&#x27;.bg-cover&#x27;</span>).<span class=\"title function_\">css</span>(<span class=\"string\">&#x27;background-image&#x27;</span>, <span class=\"string\">&#x27;url(/medias/banner/&#x27;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>().<span class=\"title function_\">getDay</span>() + <span class=\"string\">&#x27;.jpg)&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p>\n<h2 id=\"版本记录\"><a href=\"#版本记录\" class=\"headerlink\" title=\"版本记录\"></a>版本记录</h2><ul>\n<li>v1.0.0<ul>\n<li>新增了所有基础功能；</li>\n</ul>\n</li>\n<li>v1.0.1<ul>\n<li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li>\n<li>新增代码是否折行为可配置，默认为折行；</li>\n<li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li>\n<li>修复文章滚动时，高亮的目录选项不准确的问题；</li>\n<li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li>\n</ul>\n</li>\n<li>v1.0.2<ul>\n<li>升级了 <a href=\"https://materializecss.com/\">Materialize</a> 框架版本为<code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li>\n<li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li>\n<li>修复首页第一个按钮是中文的问题</li>\n<li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li>\n<li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li>\n<li>修复一些文章或 UI 显示问题；</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Vue 文档风格的 Typora 主题","date":"2018-11-18T16:30:00.000Z","author":"blinkfox","img":"https://statics.sh1a.qingstor.com/2018/11/19/vue.jpg","cover":true,"_content":"\n> [typora-vue-theme](https://github.com/blinkfox/typora-vue-theme) 是 Typora Markdown 文档编辑器中一款类似[Vue](https://vuejs.org/)文档风格的主题。\n\n## 简介\n\n[Typora](https://www.typora.io/)是一款支持实时预览的 Markdown 编辑器和阅读器，支持`Windows`、`macOS`、`Linux`三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**[typora-vue-theme](https://github.com/blinkfox/typora-vue-theme)就是参考了[Vue](https://vuejs.org/)文档风格而开发的一个 Typora 自定义主题**。\n\n## 安装主题\n\n1. 下载本主题中的`vue.css`、`vue-dark.css`文件和包含字体的`vue`文件夹；\n2. 打开 Typora，点击“**偏好设置**” => “**打开主题文件夹**”按钮，将弹出 Typora 的主题文件夹；\n3. 将下载好的`vue.css`和`vue-dark.css`文件和包含字体的`vue`文件夹放到 Typora 的主题文件夹中；\n4. 关闭并重新打开 Typora，从菜单栏中选择 “**主题**” => “**Vue**” 或者 “**Vue Dark**” 即可。\n\n## 效果图\n\n![vue主题效果图1](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-1.png)\n\n![vue主题效果图2](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-2.png)\n\n![vue主题效果图3](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-3.png)\n\n### Vue Dark\n\n![vue主题效果图4](https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png)\n\n![vue主题效果图5](https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png)\n\n> **感谢**: 本主题中的`vue-dark.css`来自[typora-vue-dark-theme](https://github.com/MamoruDS/typora-vue-dark-theme).\n","source":"_posts/Vue 文档风格的 Typora 主题.md","raw":"---\ntitle: Vue 文档风格的 Typora 主题\ndate: 2018-11-19 00:30:00\nauthor: blinkfox\nimg: https://statics.sh1a.qingstor.com/2018/11/19/vue.jpg\ncover: true\ncategories: 软件工具\ntags:\n  - Typora\n  - Markdown\n  - Vue\n---\n\n> [typora-vue-theme](https://github.com/blinkfox/typora-vue-theme) 是 Typora Markdown 文档编辑器中一款类似[Vue](https://vuejs.org/)文档风格的主题。\n\n## 简介\n\n[Typora](https://www.typora.io/)是一款支持实时预览的 Markdown 编辑器和阅读器，支持`Windows`、`macOS`、`Linux`三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**[typora-vue-theme](https://github.com/blinkfox/typora-vue-theme)就是参考了[Vue](https://vuejs.org/)文档风格而开发的一个 Typora 自定义主题**。\n\n## 安装主题\n\n1. 下载本主题中的`vue.css`、`vue-dark.css`文件和包含字体的`vue`文件夹；\n2. 打开 Typora，点击“**偏好设置**” => “**打开主题文件夹**”按钮，将弹出 Typora 的主题文件夹；\n3. 将下载好的`vue.css`和`vue-dark.css`文件和包含字体的`vue`文件夹放到 Typora 的主题文件夹中；\n4. 关闭并重新打开 Typora，从菜单栏中选择 “**主题**” => “**Vue**” 或者 “**Vue Dark**” 即可。\n\n## 效果图\n\n![vue主题效果图1](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-1.png)\n\n![vue主题效果图2](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-2.png)\n\n![vue主题效果图3](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-3.png)\n\n### Vue Dark\n\n![vue主题效果图4](https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png)\n\n![vue主题效果图5](https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png)\n\n> **感谢**: 本主题中的`vue-dark.css`来自[typora-vue-dark-theme](https://github.com/MamoruDS/typora-vue-dark-theme).\n","slug":"Vue 文档风格的 Typora 主题","published":1,"updated":"2024-12-12T16:49:46.412Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27veb0009ge9kab0tfc5k","content":"<blockquote>\n<p><a href=\"https://github.com/blinkfox/typora-vue-theme\">typora-vue-theme</a> 是 Typora Markdown 文档编辑器中一款类似<a href=\"https://vuejs.org/\">Vue</a>文档风格的主题。</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://www.typora.io/\">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**<a href=\"https://github.com/blinkfox/typora-vue-theme\">typora-vue-theme</a>就是参考了<a href=\"https://vuejs.org/\">Vue</a>文档风格而开发的一个 Typora 自定义主题**。</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><ol>\n<li>下载本主题中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li>\n<li>打开 Typora，点击“<strong>偏好设置</strong>” &#x3D;&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li>\n<li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li>\n<li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” &#x3D;&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li>\n</ol>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-1.png\" alt=\"vue主题效果图1\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-2.png\" alt=\"vue主题效果图2\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-3.png\" alt=\"vue主题效果图3\"></p>\n<h3 id=\"Vue-Dark\"><a href=\"#Vue-Dark\" class=\"headerlink\" title=\"Vue Dark\"></a>Vue Dark</h3><p><img src=\"https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png\" alt=\"vue主题效果图4\"></p>\n<p><img src=\"https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png\" alt=\"vue主题效果图5\"></p>\n<blockquote>\n<p><strong>感谢</strong>: 本主题中的<code>vue-dark.css</code>来自<a href=\"https://github.com/MamoruDS/typora-vue-dark-theme\">typora-vue-dark-theme</a>.</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p><a href=\"https://github.com/blinkfox/typora-vue-theme\">typora-vue-theme</a> 是 Typora Markdown 文档编辑器中一款类似<a href=\"https://vuejs.org/\">Vue</a>文档风格的主题。</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://www.typora.io/\">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**<a href=\"https://github.com/blinkfox/typora-vue-theme\">typora-vue-theme</a>就是参考了<a href=\"https://vuejs.org/\">Vue</a>文档风格而开发的一个 Typora 自定义主题**。</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><ol>\n<li>下载本主题中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li>\n<li>打开 Typora，点击“<strong>偏好设置</strong>” &#x3D;&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li>\n<li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li>\n<li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” &#x3D;&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li>\n</ol>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-1.png\" alt=\"vue主题效果图1\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-2.png\" alt=\"vue主题效果图2\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-3.png\" alt=\"vue主题效果图3\"></p>\n<h3 id=\"Vue-Dark\"><a href=\"#Vue-Dark\" class=\"headerlink\" title=\"Vue Dark\"></a>Vue Dark</h3><p><img src=\"https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png\" alt=\"vue主题效果图4\"></p>\n<p><img src=\"https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png\" alt=\"vue主题效果图5\"></p>\n<blockquote>\n<p><strong>感谢</strong>: 本主题中的<code>vue-dark.css</code>来自<a href=\"https://github.com/MamoruDS/typora-vue-dark-theme\">typora-vue-dark-theme</a>.</p>\n</blockquote>\n"},{"title":"Git知识点整理","date":"2018-09-24T13:50:00.000Z","author":"blinkfox","img":"https://statics.sh1a.qingstor.com/2018/09/24/git.jpg","_content":"\n## 1. Git基本概念。\n\n- `repository`\n- `config`\n- `init`\n- `clone`\n- `fetch`\n- `pull`\n- `commit`\n- `push`\n- `branch`\n- `head`\n- `tag`\n- `merge`\n- `conflict`\n- `diff`\n- `log`\n- `show`\n- `status`\n\n## 2. Git工作空间和文件状态\n\n### (1).工作空间\n\n![Git工作空间][1]\n\n左侧为工作区，右侧为版本库。\n\n- 工作区（`Working Directory`） 就是在电脑里能看到的目录，比如learngit文件夹就是一个工作区。\n- 版本库（`Repository`）工作区有一个隐藏目录`.git`，是Git的版本库。\n\n在版本库中标记为`index`的区域为暂存区，标记为`master`的是Git为我们自动创建的第一个分支，代表的是目录树。此时`HEAD`实际是指向`master`分支的一个“游标”，所以图示的命令中出现HEAD的地方可以用`master`来替换。图中的objects标识的区域为git的对象库，实际位于`.git/objects`目录下。\n\n- 当对工作区修改（或新增）的文件执行`git add`命令时，暂存区的目录树会被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的id被记录在暂存区的文件索引中。\n- 当执行提交操作`git commit`时，暂存区的目录树会写到版本库（对象库）中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区的目录树。\n- 当执行`git reset HEAD`命令时，暂存区的目录树会被重写，会被master分支指向的目录树所替换，但是工作区不受影响。\n- 当执行`git rm --cached`命令时，会直接从暂存区删除文件，工作区则不做出改变。\n- 当执行`git checkout .`或`git checkout --` 命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。\n- 当执行`git checkout HEAD .`或`git checkout HEAD`命令时，会用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极度危险的。因为不但会清楚工作区中未提交的改动，也会清楚暂存区中未提交的改动。\n\n### (1).文件状态\n\nGit 有三种状态，你的文件可能处于其中之一：**已提交(`committed`)**、**已修改(`modified`)**和**已暂存(`staged`)**。\n\n## 3. Git配置系统级、全局、当前仓库用户名、邮箱的命令\n\n系统级、全局、当前仓库选项分别是:仓库-system、-global、-local(或默认不填)\n\n```bash\ngit config --global user.name \"Jerry Mouse\"\ngit config --global user.email \"jerry@yiibai.com\"\n```\n\n列出Git设置\n\n```bash\n\ngit config --list\ngit config -l\n```\n\n## 4. Git fetch和pull的区别\n\n- `git fetch`：相当于是从远程获取最新版本到本地，不会自动merge.\n- `git pull`：相当于是从远程获取最新版本并merge到本地.\n\n### (1). git fetch示例：\n\n```bash\nGit fetch origin master\ngit log -p master..origin/master\ngit merge origin/master\n```\n\n以上命令的含义：\n\n- 首先从远程的`origin`的`master`主分支下载最新的版本到`origin/master`分支上\n- 然后比较本地的`master`分支和`origin/master`分支的差别\n- 最后进行合并\n- 上述过程其实可以用以下更清晰的方式来进行：\n\n### (1). git pull示例：\n\n```bash\ngit pull origin master\n```\n\n上述命令其实相当于`git fetch`和`git merge`。在实际使用中，`git fetch`更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。\n\n## 5. Git reset和revert的却别\n\n- `git revert`是用一次新的commit来回滚之前的commit，`git reset`是直接删除指定的commit。 \n- 在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为`git revert`是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是`git reset`是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。\n- `git reset`是把HEAD向后移动了一下，而`git revert`是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。\n- git revert与git reset最大的不同是，git revert 仅仅是撤销某次提交。\n\n另外，说一下`git revert`， `git reset –hard`和 `–soft`的区别\n\n- `git reset –mixed id`: 是将git的HEAD变了（也就是提交记录变了），但文件并没有改变，（也就是working tree并没有改变）。\n- `git reset –soft id`: 实际上，是`git reset –mixed id`后，又做了一次`git add`。\n- `git reset –herd id`: 是将git的HEAD变了，文件也变了。\n\n## 6. Git merge和reabse的相同点和不同点\n\n`merge`是合并的意思，`rebase`是复位基底的意思，相同点都是用来合并分支的。\n\n![merge和rebase][2]\n\n不同点:\n\n- `merge`操作会生成一个新的节点，之前的提交分开显示。而`rebase`操作不会生成新的节点，是将两个分支融合成一个线性的提交。\n- 解决冲突时。merge操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit就可以了。而`rebase`操作的话，会中断rebase,同时会提示去解决冲突。解决冲突后,将修改add后执行`git rebase –continue`继续操作，或者`git rebase –skip`忽略冲突。\n- `git pull`和`git pull --rebase`区别：`git pull`做了两个操作分别是\"获取\"和\"合并\"。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。\n\n**总结**：选择 merge 还是 rebase？\n\n- merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容\n- merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面\n- rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面\n- rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面\n- merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定\n- merge 和 rebase 还有很多强大的选项，可以使用 git help <command> 查看\n\n## 7. Git stash是什么？它的相关使用方式命令\n\n- git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。\n- git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。\n- git stash pop --index stash@{0}: 恢复编号为0的进度的工作区和暂存区。\n- git stash apply stash@{1} 以将你指定版本号为stash@{1}的工作取出来\n- git stash drop[<stash>] 删除某一个进度，默认删除最新进度\n- git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。\n- git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了\n\n```bash\n# 恢复工作进度\ngit stash pop [--index] [<stash>]\n--index 参数：不仅恢复工作区，还恢复暂存区\n<stash> 指定恢复某一个具体进度。如果没有这个参数，默认恢复最新进度\n\n# 这是git stash保存进度的完整命令形式\ngit stash [save message] [-k|--no-keep-index] [--patch]\n-k和--no-keep-index指定保存进度后，是否重置暂存区\n--patch 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git add -p命令类似\n\n使用save可以对进度添加备注\n# git stash save \"这是保存的进度\"\n```\n\n## 8. Git只从暂存区删除，从工作空间删除的命令分别是什么?\n\n```bash\ngit rm --cached\n\ngit rm\ngit commit\n```\n\n## 9. Git标签的使用\n\n```bash\n# 列出现有的标签\ngit tag\n\n# 打标签\ngit tag -a v1.01 -m \"Relase version 1.01\"\n\n# 查看相应标签的版本信息\ngit show v1.4\n```\n\n- -a 选项,创建一个含附注类型的标签\n- -m 选项,指定了对应的标签说明\n\n## 9. Git分支的使用\n\n```bash\n# 查看本地分支\ngit branch\n\n# 查看远程分支\ngit branch -r\n\n# 创建本地分支(注意新分支创建后不会自动切换为当前分支)\ngit branch [name]\n\n# 切换分支\ngit checkout [name]\n\n# 创建新分支并立即切换到新分支\ngit checkout -b [name]\n\n# 强制删除一个分支\ngit branch -D [name]\n\n# 合并分支(将名称为[name]的分支与当前分支合并)\ngit merge [name]\n\n# 查看各个分支最后提交信息\ngit br -v\n\n# 查看已经被合并到当前分支的分支\ngit br --merged\n\n# 查看尚未被合并到当前分支的分支\ngit br --no-merged\n```\n\n## 10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。\n\nmerge和rebase对于ours和theirs的定义是完全相反的。在merge时，ours指代的是当前分支，theirs代表需要被合并的分支。而在rebase过程中，ours指向了修改参考分支，theirs却是当前分支。因为rebase 隐含了一个`git checkout upstream`的过程，将`HEAD`从local分支变成了upstream分支。git会在rebase结束后撤销这个改变，但它已经不可避免地影响了冲突的状态，使rebase中ours和theirs的定义与merge 截然相反。因此，在使用ours与theirs时请格外小心。\n\n## 11. Git远程操作相关\n\n### (1). clone\n\n> git clone <版本库的网址>\n> git clone <版本库的网址> <本地目录名>\n\n```bash\n# 克隆jQuery的版本库\n git clone https://github.com/jquery/jquery.git\n \n git clone -o jQuery https://github.com/jquery/jquery.git\n```\n\n### (2). remote\n\n```bash\n# 列出所有远程主机\ngit remote\n\n# 使用-v选项，可以参看远程主机的网址\ngit remote -v\n \n# 可以查看该主机的详细信息\ngit remote show <主机名>\n \n# 添加远程主机\ngit remote add <主机名> <网址>\n\n# 删除远程主机\ngit remote rm <主机名>\n\n# 修改远程主机名称\ngit remote rename <原主机名> <新主机名>\n```\n\n### (3). fetch\n\n```bash\n# 取回所有分支(branch)的更新到本地\ngit fetch <远程主机名>\n\n# 取回某的特定分支的更新\ngit fetch <远程主机名> <分支名>\n\n# 取回origin主机的master分支的更新\ngit fetch origin master\n\n# 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支\ngit merge origin/master\ngit rebase origin/master\n```\n\n### (4). pull\n\n> git pull <远程主机名> <远程分支名>:<本地分支名>\n\n```bash\n# 取回origin主机的next分支，与本地的master分支合并\ngit pull origin next:master\n\n# 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\ngit pull origin next\n\n# 上面的命令实质上等同于先做git fetch，再做git merge。\ngit fetch origin\ngit merge origin/next\n\n# 合并需要采用rebase模式\ngit pull --rebase <远程主机名> <远程分支名>:<本地分支名>\n```\n\n### (5). push\n\n> git push <远程主机名> <本地分支名>:<远程分支名>\n\n**注意**:分支推送顺序的写法是\"<来源地>:<目的地>\"，所以git pull是\"<远程分支>:<本地分支>\"，而git push是\"<本地分支>:<远程分支>\"。\n\n- 如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。\n- 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。\n\n```bash\n# 将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建\ngit push origin master\n\n# 省略了本地分支，以下等同，删除origin主机的master分支\ngit push origin :master\ngit push origin --delete master\n\n# 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略\ngit push origin\n\n# 如果当前分支只有一个追踪分支，那么主机名都可以省略。\ngit push\n\n# 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push\ngit push -u origin master\n\n# 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机\ngit push --all origin\n\n# 强制推送\ngit push --force origin\n\n# git push不会推送标签(tag)，除非使用–tags选项\ngit push origin --tags\n```\n\n## 12. Git Flow使用简介\n\n就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范。三种广泛使用的工作流程：\n\n- Git flow\n- Github flow\n- Gitlab flow\n\n三种工作流程，有一个共同点：都采用\"功能驱动式开发\"（Feature-driven development，简称FDD）。它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。最早诞生、并得到广泛采用的一种工作流程，就是[Git flow][3]。\n\n它最主要的特点有两个。首先，项目存在两个长期分支，分别是：主分支master、开发分支develop。其次，项目存在三种短期分支，分别是：功能分支（feature branch）、补丁分支（hotfix branch）、预发分支（release branch），一旦完成开发，它们就会被合并进develop或master，然后被删除。\n\n### (1). Git Flow流程图\n\n![Git Flow流程图][4]\n\n### (2). Git Flow常用的分支\n\n- `Production`分支。也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。\n- `Develop`分支。这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支。\n- `Feature`分支。这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release。\n- `Release`分支。当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支。\n- `Hotfix`分支。当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release。\n\n### (3). Git Flow代码示例\n\n#### a. 创建develop分支\n\n```bash\ngit branch develop\ngit push -u origin develop\n```\n\n#### b. 开始新Feature开发\n\n```bash\ngit checkout -b some-feature develop\n# Optionally, push branch to origin:\ngit push -u origin some-feature\n\n# 做一些改动\ngit status\ngit add some-file\ngit commit\n```\n\n#### c. 完成Feature\n\n```bash\ngit pull origin develop\ngit checkout develop\ngit merge --no-ff some-feature\ngit push origin develop\n\ngit branch -d some-feature\n\n# If you pushed branch to origin:\ngit push origin --delete some-feature\n```\n\n#### d. 开始Relase\n\n```bash\ngit checkout -b release-0.1.0 develop\n\n# Optional: Bump version number, commit\n# Prepare release, commit\n```\n\n#### e. 完成Release\n\n```bash\ngit checkout master\ngit merge --no-ff release-0.1.0\ngit push\n\ngit checkout develop\ngit merge --no-ff release-0.1.0\ngit push\n\ngit branch -d release-0.1.0\n\n# If you pushed branch to origin:\ngit push origin --delete release-0.1.0   \n\ngit tag -a v0.1.0 master\ngit push --tags\n```\n\n#### f. 开始Hotfix\n\n```bash\ngit checkout -b hotfix-0.1.1 master\n```\n\n#### g. 完成Hotfix\n\n```bash\ngit checkout master\ngit merge --no-ff hotfix-0.1.1\ngit push\n\ngit checkout develop\ngit merge --no-ff hotfix-0.1.1\ngit push\n\ngit branch -d hotfix-0.1.1\n\ngit tag -a v0.1.1 master\ngit push --tags\n```\n\n  [1]: http://blog.chinaunix.net/attachment/201402/19/10415985_139279770639pM.jpg\n  [2]: http://images2015.cnblogs.com/blog/759200/201608/759200-20160806092734215-279978821.png\n  [3]: http://nvie.com/posts/a-successful-git-branching-model/\n  [4]: https://statics.sh1a.qingstor.com/2018/09/24/imagegit-flow.png\n","source":"_posts/Git/Git知识点整理.md","raw":"---\ntitle: Git知识点整理\ndate: 2018-09-24 21:50:00\nauthor: blinkfox\nimg: https://statics.sh1a.qingstor.com/2018/09/24/git.jpg\ncategories: 软件工具\ntags: Git\n---\n\n## 1. Git基本概念。\n\n- `repository`\n- `config`\n- `init`\n- `clone`\n- `fetch`\n- `pull`\n- `commit`\n- `push`\n- `branch`\n- `head`\n- `tag`\n- `merge`\n- `conflict`\n- `diff`\n- `log`\n- `show`\n- `status`\n\n## 2. Git工作空间和文件状态\n\n### (1).工作空间\n\n![Git工作空间][1]\n\n左侧为工作区，右侧为版本库。\n\n- 工作区（`Working Directory`） 就是在电脑里能看到的目录，比如learngit文件夹就是一个工作区。\n- 版本库（`Repository`）工作区有一个隐藏目录`.git`，是Git的版本库。\n\n在版本库中标记为`index`的区域为暂存区，标记为`master`的是Git为我们自动创建的第一个分支，代表的是目录树。此时`HEAD`实际是指向`master`分支的一个“游标”，所以图示的命令中出现HEAD的地方可以用`master`来替换。图中的objects标识的区域为git的对象库，实际位于`.git/objects`目录下。\n\n- 当对工作区修改（或新增）的文件执行`git add`命令时，暂存区的目录树会被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的id被记录在暂存区的文件索引中。\n- 当执行提交操作`git commit`时，暂存区的目录树会写到版本库（对象库）中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区的目录树。\n- 当执行`git reset HEAD`命令时，暂存区的目录树会被重写，会被master分支指向的目录树所替换，但是工作区不受影响。\n- 当执行`git rm --cached`命令时，会直接从暂存区删除文件，工作区则不做出改变。\n- 当执行`git checkout .`或`git checkout --` 命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。\n- 当执行`git checkout HEAD .`或`git checkout HEAD`命令时，会用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极度危险的。因为不但会清楚工作区中未提交的改动，也会清楚暂存区中未提交的改动。\n\n### (1).文件状态\n\nGit 有三种状态，你的文件可能处于其中之一：**已提交(`committed`)**、**已修改(`modified`)**和**已暂存(`staged`)**。\n\n## 3. Git配置系统级、全局、当前仓库用户名、邮箱的命令\n\n系统级、全局、当前仓库选项分别是:仓库-system、-global、-local(或默认不填)\n\n```bash\ngit config --global user.name \"Jerry Mouse\"\ngit config --global user.email \"jerry@yiibai.com\"\n```\n\n列出Git设置\n\n```bash\n\ngit config --list\ngit config -l\n```\n\n## 4. Git fetch和pull的区别\n\n- `git fetch`：相当于是从远程获取最新版本到本地，不会自动merge.\n- `git pull`：相当于是从远程获取最新版本并merge到本地.\n\n### (1). git fetch示例：\n\n```bash\nGit fetch origin master\ngit log -p master..origin/master\ngit merge origin/master\n```\n\n以上命令的含义：\n\n- 首先从远程的`origin`的`master`主分支下载最新的版本到`origin/master`分支上\n- 然后比较本地的`master`分支和`origin/master`分支的差别\n- 最后进行合并\n- 上述过程其实可以用以下更清晰的方式来进行：\n\n### (1). git pull示例：\n\n```bash\ngit pull origin master\n```\n\n上述命令其实相当于`git fetch`和`git merge`。在实际使用中，`git fetch`更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。\n\n## 5. Git reset和revert的却别\n\n- `git revert`是用一次新的commit来回滚之前的commit，`git reset`是直接删除指定的commit。 \n- 在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为`git revert`是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是`git reset`是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。\n- `git reset`是把HEAD向后移动了一下，而`git revert`是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。\n- git revert与git reset最大的不同是，git revert 仅仅是撤销某次提交。\n\n另外，说一下`git revert`， `git reset –hard`和 `–soft`的区别\n\n- `git reset –mixed id`: 是将git的HEAD变了（也就是提交记录变了），但文件并没有改变，（也就是working tree并没有改变）。\n- `git reset –soft id`: 实际上，是`git reset –mixed id`后，又做了一次`git add`。\n- `git reset –herd id`: 是将git的HEAD变了，文件也变了。\n\n## 6. Git merge和reabse的相同点和不同点\n\n`merge`是合并的意思，`rebase`是复位基底的意思，相同点都是用来合并分支的。\n\n![merge和rebase][2]\n\n不同点:\n\n- `merge`操作会生成一个新的节点，之前的提交分开显示。而`rebase`操作不会生成新的节点，是将两个分支融合成一个线性的提交。\n- 解决冲突时。merge操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit就可以了。而`rebase`操作的话，会中断rebase,同时会提示去解决冲突。解决冲突后,将修改add后执行`git rebase –continue`继续操作，或者`git rebase –skip`忽略冲突。\n- `git pull`和`git pull --rebase`区别：`git pull`做了两个操作分别是\"获取\"和\"合并\"。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。\n\n**总结**：选择 merge 还是 rebase？\n\n- merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容\n- merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面\n- rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面\n- rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面\n- merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定\n- merge 和 rebase 还有很多强大的选项，可以使用 git help <command> 查看\n\n## 7. Git stash是什么？它的相关使用方式命令\n\n- git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。\n- git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。\n- git stash pop --index stash@{0}: 恢复编号为0的进度的工作区和暂存区。\n- git stash apply stash@{1} 以将你指定版本号为stash@{1}的工作取出来\n- git stash drop[<stash>] 删除某一个进度，默认删除最新进度\n- git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。\n- git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了\n\n```bash\n# 恢复工作进度\ngit stash pop [--index] [<stash>]\n--index 参数：不仅恢复工作区，还恢复暂存区\n<stash> 指定恢复某一个具体进度。如果没有这个参数，默认恢复最新进度\n\n# 这是git stash保存进度的完整命令形式\ngit stash [save message] [-k|--no-keep-index] [--patch]\n-k和--no-keep-index指定保存进度后，是否重置暂存区\n--patch 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git add -p命令类似\n\n使用save可以对进度添加备注\n# git stash save \"这是保存的进度\"\n```\n\n## 8. Git只从暂存区删除，从工作空间删除的命令分别是什么?\n\n```bash\ngit rm --cached\n\ngit rm\ngit commit\n```\n\n## 9. Git标签的使用\n\n```bash\n# 列出现有的标签\ngit tag\n\n# 打标签\ngit tag -a v1.01 -m \"Relase version 1.01\"\n\n# 查看相应标签的版本信息\ngit show v1.4\n```\n\n- -a 选项,创建一个含附注类型的标签\n- -m 选项,指定了对应的标签说明\n\n## 9. Git分支的使用\n\n```bash\n# 查看本地分支\ngit branch\n\n# 查看远程分支\ngit branch -r\n\n# 创建本地分支(注意新分支创建后不会自动切换为当前分支)\ngit branch [name]\n\n# 切换分支\ngit checkout [name]\n\n# 创建新分支并立即切换到新分支\ngit checkout -b [name]\n\n# 强制删除一个分支\ngit branch -D [name]\n\n# 合并分支(将名称为[name]的分支与当前分支合并)\ngit merge [name]\n\n# 查看各个分支最后提交信息\ngit br -v\n\n# 查看已经被合并到当前分支的分支\ngit br --merged\n\n# 查看尚未被合并到当前分支的分支\ngit br --no-merged\n```\n\n## 10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。\n\nmerge和rebase对于ours和theirs的定义是完全相反的。在merge时，ours指代的是当前分支，theirs代表需要被合并的分支。而在rebase过程中，ours指向了修改参考分支，theirs却是当前分支。因为rebase 隐含了一个`git checkout upstream`的过程，将`HEAD`从local分支变成了upstream分支。git会在rebase结束后撤销这个改变，但它已经不可避免地影响了冲突的状态，使rebase中ours和theirs的定义与merge 截然相反。因此，在使用ours与theirs时请格外小心。\n\n## 11. Git远程操作相关\n\n### (1). clone\n\n> git clone <版本库的网址>\n> git clone <版本库的网址> <本地目录名>\n\n```bash\n# 克隆jQuery的版本库\n git clone https://github.com/jquery/jquery.git\n \n git clone -o jQuery https://github.com/jquery/jquery.git\n```\n\n### (2). remote\n\n```bash\n# 列出所有远程主机\ngit remote\n\n# 使用-v选项，可以参看远程主机的网址\ngit remote -v\n \n# 可以查看该主机的详细信息\ngit remote show <主机名>\n \n# 添加远程主机\ngit remote add <主机名> <网址>\n\n# 删除远程主机\ngit remote rm <主机名>\n\n# 修改远程主机名称\ngit remote rename <原主机名> <新主机名>\n```\n\n### (3). fetch\n\n```bash\n# 取回所有分支(branch)的更新到本地\ngit fetch <远程主机名>\n\n# 取回某的特定分支的更新\ngit fetch <远程主机名> <分支名>\n\n# 取回origin主机的master分支的更新\ngit fetch origin master\n\n# 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支\ngit merge origin/master\ngit rebase origin/master\n```\n\n### (4). pull\n\n> git pull <远程主机名> <远程分支名>:<本地分支名>\n\n```bash\n# 取回origin主机的next分支，与本地的master分支合并\ngit pull origin next:master\n\n# 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\ngit pull origin next\n\n# 上面的命令实质上等同于先做git fetch，再做git merge。\ngit fetch origin\ngit merge origin/next\n\n# 合并需要采用rebase模式\ngit pull --rebase <远程主机名> <远程分支名>:<本地分支名>\n```\n\n### (5). push\n\n> git push <远程主机名> <本地分支名>:<远程分支名>\n\n**注意**:分支推送顺序的写法是\"<来源地>:<目的地>\"，所以git pull是\"<远程分支>:<本地分支>\"，而git push是\"<本地分支>:<远程分支>\"。\n\n- 如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。\n- 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。\n\n```bash\n# 将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建\ngit push origin master\n\n# 省略了本地分支，以下等同，删除origin主机的master分支\ngit push origin :master\ngit push origin --delete master\n\n# 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略\ngit push origin\n\n# 如果当前分支只有一个追踪分支，那么主机名都可以省略。\ngit push\n\n# 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push\ngit push -u origin master\n\n# 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机\ngit push --all origin\n\n# 强制推送\ngit push --force origin\n\n# git push不会推送标签(tag)，除非使用–tags选项\ngit push origin --tags\n```\n\n## 12. Git Flow使用简介\n\n就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范。三种广泛使用的工作流程：\n\n- Git flow\n- Github flow\n- Gitlab flow\n\n三种工作流程，有一个共同点：都采用\"功能驱动式开发\"（Feature-driven development，简称FDD）。它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。最早诞生、并得到广泛采用的一种工作流程，就是[Git flow][3]。\n\n它最主要的特点有两个。首先，项目存在两个长期分支，分别是：主分支master、开发分支develop。其次，项目存在三种短期分支，分别是：功能分支（feature branch）、补丁分支（hotfix branch）、预发分支（release branch），一旦完成开发，它们就会被合并进develop或master，然后被删除。\n\n### (1). Git Flow流程图\n\n![Git Flow流程图][4]\n\n### (2). Git Flow常用的分支\n\n- `Production`分支。也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。\n- `Develop`分支。这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支。\n- `Feature`分支。这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release。\n- `Release`分支。当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支。\n- `Hotfix`分支。当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release。\n\n### (3). Git Flow代码示例\n\n#### a. 创建develop分支\n\n```bash\ngit branch develop\ngit push -u origin develop\n```\n\n#### b. 开始新Feature开发\n\n```bash\ngit checkout -b some-feature develop\n# Optionally, push branch to origin:\ngit push -u origin some-feature\n\n# 做一些改动\ngit status\ngit add some-file\ngit commit\n```\n\n#### c. 完成Feature\n\n```bash\ngit pull origin develop\ngit checkout develop\ngit merge --no-ff some-feature\ngit push origin develop\n\ngit branch -d some-feature\n\n# If you pushed branch to origin:\ngit push origin --delete some-feature\n```\n\n#### d. 开始Relase\n\n```bash\ngit checkout -b release-0.1.0 develop\n\n# Optional: Bump version number, commit\n# Prepare release, commit\n```\n\n#### e. 完成Release\n\n```bash\ngit checkout master\ngit merge --no-ff release-0.1.0\ngit push\n\ngit checkout develop\ngit merge --no-ff release-0.1.0\ngit push\n\ngit branch -d release-0.1.0\n\n# If you pushed branch to origin:\ngit push origin --delete release-0.1.0   \n\ngit tag -a v0.1.0 master\ngit push --tags\n```\n\n#### f. 开始Hotfix\n\n```bash\ngit checkout -b hotfix-0.1.1 master\n```\n\n#### g. 完成Hotfix\n\n```bash\ngit checkout master\ngit merge --no-ff hotfix-0.1.1\ngit push\n\ngit checkout develop\ngit merge --no-ff hotfix-0.1.1\ngit push\n\ngit branch -d hotfix-0.1.1\n\ngit tag -a v0.1.1 master\ngit push --tags\n```\n\n  [1]: http://blog.chinaunix.net/attachment/201402/19/10415985_139279770639pM.jpg\n  [2]: http://images2015.cnblogs.com/blog/759200/201608/759200-20160806092734215-279978821.png\n  [3]: http://nvie.com/posts/a-successful-git-branching-model/\n  [4]: https://statics.sh1a.qingstor.com/2018/09/24/imagegit-flow.png\n","slug":"Git/Git知识点整理","published":1,"updated":"2024-12-12T16:49:46.412Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27vec000bge9k2p6h3ku6","content":"<h2 id=\"1-Git基本概念。\"><a href=\"#1-Git基本概念。\" class=\"headerlink\" title=\"1. Git基本概念。\"></a>1. Git基本概念。</h2><ul>\n<li><code>repository</code></li>\n<li><code>config</code></li>\n<li><code>init</code></li>\n<li><code>clone</code></li>\n<li><code>fetch</code></li>\n<li><code>pull</code></li>\n<li><code>commit</code></li>\n<li><code>push</code></li>\n<li><code>branch</code></li>\n<li><code>head</code></li>\n<li><code>tag</code></li>\n<li><code>merge</code></li>\n<li><code>conflict</code></li>\n<li><code>diff</code></li>\n<li><code>log</code></li>\n<li><code>show</code></li>\n<li><code>status</code></li>\n</ul>\n<h2 id=\"2-Git工作空间和文件状态\"><a href=\"#2-Git工作空间和文件状态\" class=\"headerlink\" title=\"2. Git工作空间和文件状态\"></a>2. Git工作空间和文件状态</h2><h3 id=\"1-工作空间\"><a href=\"#1-工作空间\" class=\"headerlink\" title=\"(1).工作空间\"></a>(1).工作空间</h3><p><img src=\"http://blog.chinaunix.net/attachment/201402/19/10415985_139279770639pM.jpg\" alt=\"Git工作空间\"></p>\n<p>左侧为工作区，右侧为版本库。</p>\n<ul>\n<li>工作区（<code>Working Directory</code>） 就是在电脑里能看到的目录，比如learngit文件夹就是一个工作区。</li>\n<li>版本库（<code>Repository</code>）工作区有一个隐藏目录<code>.git</code>，是Git的版本库。</li>\n</ul>\n<p>在版本库中标记为<code>index</code>的区域为暂存区，标记为<code>master</code>的是Git为我们自动创建的第一个分支，代表的是目录树。此时<code>HEAD</code>实际是指向<code>master</code>分支的一个“游标”，所以图示的命令中出现HEAD的地方可以用<code>master</code>来替换。图中的objects标识的区域为git的对象库，实际位于<code>.git/objects</code>目录下。</p>\n<ul>\n<li>当对工作区修改（或新增）的文件执行<code>git add</code>命令时，暂存区的目录树会被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的id被记录在暂存区的文件索引中。</li>\n<li>当执行提交操作<code>git commit</code>时，暂存区的目录树会写到版本库（对象库）中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区的目录树。</li>\n<li>当执行<code>git reset HEAD</code>命令时，暂存区的目录树会被重写，会被master分支指向的目录树所替换，但是工作区不受影响。</li>\n<li>当执行<code>git rm --cached</code>命令时，会直接从暂存区删除文件，工作区则不做出改变。</li>\n<li>当执行<code>git checkout .</code>或<code>git checkout --</code> 命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。</li>\n<li>当执行<code>git checkout HEAD .</code>或<code>git checkout HEAD</code>命令时，会用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极度危险的。因为不但会清楚工作区中未提交的改动，也会清楚暂存区中未提交的改动。</li>\n</ul>\n<h3 id=\"1-文件状态\"><a href=\"#1-文件状态\" class=\"headerlink\" title=\"(1).文件状态\"></a>(1).文件状态</h3><p>Git 有三种状态，你的文件可能处于其中之一：**已提交(<code>committed</code>)<strong>、</strong>已修改(<code>modified</code>)<strong>和</strong>已暂存(<code>staged</code>)**。</p>\n<h2 id=\"3-Git配置系统级、全局、当前仓库用户名、邮箱的命令\"><a href=\"#3-Git配置系统级、全局、当前仓库用户名、邮箱的命令\" class=\"headerlink\" title=\"3. Git配置系统级、全局、当前仓库用户名、邮箱的命令\"></a>3. Git配置系统级、全局、当前仓库用户名、邮箱的命令</h2><p>系统级、全局、当前仓库选项分别是:仓库-system、-global、-local(或默认不填)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;Jerry Mouse&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;jerry@yiibai.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>列出Git设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git config --list</span><br><span class=\"line\">git config -l</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Git-fetch和pull的区别\"><a href=\"#4-Git-fetch和pull的区别\" class=\"headerlink\" title=\"4. Git fetch和pull的区别\"></a>4. Git fetch和pull的区别</h2><ul>\n<li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动merge.</li>\n<li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地.</li>\n</ul>\n<h3 id=\"1-git-fetch示例：\"><a href=\"#1-git-fetch示例：\" class=\"headerlink\" title=\"(1). git fetch示例：\"></a>(1). git fetch示例：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git fetch origin master</span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p master..origin/master</span><br><span class=\"line\">git merge origin/master</span><br></pre></td></tr></table></figure>\n\n<p>以上命令的含义：</p>\n<ul>\n<li>首先从远程的<code>origin</code>的<code>master</code>主分支下载最新的版本到<code>origin/master</code>分支上</li>\n<li>然后比较本地的<code>master</code>分支和<code>origin/master</code>分支的差别</li>\n<li>最后进行合并</li>\n<li>上述过程其实可以用以下更清晰的方式来进行：</li>\n</ul>\n<h3 id=\"1-git-pull示例：\"><a href=\"#1-git-pull示例：\" class=\"headerlink\" title=\"(1). git pull示例：\"></a>(1). git pull示例：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n\n<p>上述命令其实相当于<code>git fetch</code>和<code>git merge</code>。在实际使用中，<code>git fetch</code>更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。</p>\n<h2 id=\"5-Git-reset和revert的却别\"><a href=\"#5-Git-reset和revert的却别\" class=\"headerlink\" title=\"5. Git reset和revert的却别\"></a>5. Git reset和revert的却别</h2><ul>\n<li><code>git revert</code>是用一次新的commit来回滚之前的commit，<code>git reset</code>是直接删除指定的commit。 </li>\n<li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为<code>git revert</code>是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是<code>git reset</code>是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</li>\n<li><code>git reset</code>是把HEAD向后移动了一下，而<code>git revert</code>是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li>\n<li>git revert与git reset最大的不同是，git revert 仅仅是撤销某次提交。</li>\n</ul>\n<p>另外，说一下<code>git revert</code>， <code>git reset –hard</code>和 <code>–soft</code>的区别</p>\n<ul>\n<li><code>git reset –mixed id</code>: 是将git的HEAD变了（也就是提交记录变了），但文件并没有改变，（也就是working tree并没有改变）。</li>\n<li><code>git reset –soft id</code>: 实际上，是<code>git reset –mixed id</code>后，又做了一次<code>git add</code>。</li>\n<li><code>git reset –herd id</code>: 是将git的HEAD变了，文件也变了。</li>\n</ul>\n<h2 id=\"6-Git-merge和reabse的相同点和不同点\"><a href=\"#6-Git-merge和reabse的相同点和不同点\" class=\"headerlink\" title=\"6. Git merge和reabse的相同点和不同点\"></a>6. Git merge和reabse的相同点和不同点</h2><p><code>merge</code>是合并的意思，<code>rebase</code>是复位基底的意思，相同点都是用来合并分支的。</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/759200/201608/759200-20160806092734215-279978821.png\" alt=\"merge和rebase\"></p>\n<p>不同点:</p>\n<ul>\n<li><code>merge</code>操作会生成一个新的节点，之前的提交分开显示。而<code>rebase</code>操作不会生成新的节点，是将两个分支融合成一个线性的提交。</li>\n<li>解决冲突时。merge操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit就可以了。而<code>rebase</code>操作的话，会中断rebase,同时会提示去解决冲突。解决冲突后,将修改add后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</li>\n<li><code>git pull</code>和<code>git pull --rebase</code>区别：<code>git pull</code>做了两个操作分别是”获取”和”合并”。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。</li>\n</ul>\n<p><strong>总结</strong>：选择 merge 还是 rebase？</p>\n<ul>\n<li>merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容</li>\n<li>merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面</li>\n<li>rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面</li>\n<li>rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面</li>\n<li>merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定</li>\n<li>merge 和 rebase 还有很多强大的选项，可以使用 git help <command> 查看</li>\n</ul>\n<h2 id=\"7-Git-stash是什么？它的相关使用方式命令\"><a href=\"#7-Git-stash是什么？它的相关使用方式命令\" class=\"headerlink\" title=\"7. Git stash是什么？它的相关使用方式命令\"></a>7. Git stash是什么？它的相关使用方式命令</h2><ul>\n<li>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</li>\n<li>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</li>\n<li>git stash pop –index stash@{0}: 恢复编号为0的进度的工作区和暂存区。</li>\n<li>git stash apply stash@{1} 以将你指定版本号为stash@{1}的工作取出来</li>\n<li>git stash drop[<stash>] 删除某一个进度，默认删除最新进度</li>\n<li>git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</li>\n<li>git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复工作进度</span></span><br><span class=\"line\">git stash pop [--index] [&lt;stash&gt;]</span><br><span class=\"line\">--index 参数：不仅恢复工作区，还恢复暂存区</span><br><span class=\"line\">&lt;stash&gt; 指定恢复某一个具体进度。如果没有这个参数，默认恢复最新进度</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这是git stash保存进度的完整命令形式</span></span><br><span class=\"line\">git stash [save message] [-k|--no-keep-index] [--patch]</span><br><span class=\"line\">-k和--no-keep-index指定保存进度后，是否重置暂存区</span><br><span class=\"line\">--patch 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git add -p命令类似</span><br><span class=\"line\"></span><br><span class=\"line\">使用save可以对进度添加备注</span><br><span class=\"line\"><span class=\"comment\"># git stash save &quot;这是保存的进度&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Git只从暂存区删除，从工作空间删除的命令分别是什么\"><a href=\"#8-Git只从暂存区删除，从工作空间删除的命令分别是什么\" class=\"headerlink\" title=\"8. Git只从暂存区删除，从工作空间删除的命令分别是什么?\"></a>8. Git只从暂存区删除，从工作空间删除的命令分别是什么?</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> --cached</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">rm</span></span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-Git标签的使用\"><a href=\"#9-Git标签的使用\" class=\"headerlink\" title=\"9. Git标签的使用\"></a>9. Git标签的使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出现有的标签</span></span><br><span class=\"line\">git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打标签</span></span><br><span class=\"line\">git tag -a v1.01 -m <span class=\"string\">&quot;Relase version 1.01&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看相应标签的版本信息</span></span><br><span class=\"line\">git show v1.4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-a 选项,创建一个含附注类型的标签</li>\n<li>-m 选项,指定了对应的标签说明</li>\n</ul>\n<h2 id=\"9-Git分支的使用\"><a href=\"#9-Git分支的使用\" class=\"headerlink\" title=\"9. Git分支的使用\"></a>9. Git分支的使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建本地分支(注意新分支创建后不会自动切换为当前分支)</span></span><br><span class=\"line\">git branch [name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout [name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建新分支并立即切换到新分支</span></span><br><span class=\"line\">git checkout -b [name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制删除一个分支</span></span><br><span class=\"line\">git branch -D [name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并分支(将名称为[name]的分支与当前分支合并)</span></span><br><span class=\"line\">git merge [name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看各个分支最后提交信息</span></span><br><span class=\"line\">git br -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看已经被合并到当前分支的分支</span></span><br><span class=\"line\">git br --merged</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看尚未被合并到当前分支的分支</span></span><br><span class=\"line\">git br --no-merged</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。\"><a href=\"#10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。\" class=\"headerlink\" title=\"10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。\"></a>10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。</h2><p>merge和rebase对于ours和theirs的定义是完全相反的。在merge时，ours指代的是当前分支，theirs代表需要被合并的分支。而在rebase过程中，ours指向了修改参考分支，theirs却是当前分支。因为rebase 隐含了一个<code>git checkout upstream</code>的过程，将<code>HEAD</code>从local分支变成了upstream分支。git会在rebase结束后撤销这个改变，但它已经不可避免地影响了冲突的状态，使rebase中ours和theirs的定义与merge 截然相反。因此，在使用ours与theirs时请格外小心。</p>\n<h2 id=\"11-Git远程操作相关\"><a href=\"#11-Git远程操作相关\" class=\"headerlink\" title=\"11. Git远程操作相关\"></a>11. Git远程操作相关</h2><h3 id=\"1-clone\"><a href=\"#1-clone\" class=\"headerlink\" title=\"(1). clone\"></a>(1). clone</h3><blockquote>\n<p>git clone &lt;版本库的网址&gt;<br>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆jQuery的版本库</span></span><br><span class=\"line\"> git <span class=\"built_in\">clone</span> https://github.com/jquery/jquery.git</span><br><span class=\"line\"> </span><br><span class=\"line\"> git <span class=\"built_in\">clone</span> -o jQuery https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-remote\"><a href=\"#2-remote\" class=\"headerlink\" title=\"(2). remote\"></a>(2). remote</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有远程主机</span></span><br><span class=\"line\">git remote</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用-v选项，可以参看远程主机的网址</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 可以查看该主机的详细信息</span></span><br><span class=\"line\">git remote show &lt;主机名&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 添加远程主机</span></span><br><span class=\"line\">git remote add &lt;主机名&gt; &lt;网址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程主机</span></span><br><span class=\"line\">git remote <span class=\"built_in\">rm</span> &lt;主机名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改远程主机名称</span></span><br><span class=\"line\">git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-fetch\"><a href=\"#3-fetch\" class=\"headerlink\" title=\"(3). fetch\"></a>(3). fetch</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取回所有分支(branch)的更新到本地</span></span><br><span class=\"line\">git fetch &lt;远程主机名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回某的特定分支的更新</span></span><br><span class=\"line\">git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回origin主机的master分支的更新</span></span><br><span class=\"line\">git fetch origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支</span></span><br><span class=\"line\">git merge origin/master</span><br><span class=\"line\">git rebase origin/master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-pull\"><a href=\"#4-pull\" class=\"headerlink\" title=\"(4). pull\"></a>(4). pull</h3><blockquote>\n<p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取回origin主机的next分支，与本地的master分支合并</span></span><br><span class=\"line\">git pull origin next:master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span></span><br><span class=\"line\">git pull origin next</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上面的命令实质上等同于先做git fetch，再做git merge。</span></span><br><span class=\"line\">git fetch origin</span><br><span class=\"line\">git merge origin/next</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并需要采用rebase模式</span></span><br><span class=\"line\">git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-push\"><a href=\"#5-push\" class=\"headerlink\" title=\"(5). push\"></a>(5). push</h3><blockquote>\n<p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p>\n</blockquote>\n<p><strong>注意</strong>:分支推送顺序的写法是”&lt;来源地&gt;:&lt;目的地&gt;”，所以git pull是”&lt;远程分支&gt;:&lt;本地分支&gt;”，而git push是”&lt;本地分支&gt;:&lt;远程分支&gt;”。</p>\n<ul>\n<li>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</li>\n<li>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建</span></span><br><span class=\"line\">git push origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 省略了本地分支，以下等同，删除origin主机的master分支</span></span><br><span class=\"line\">git push origin :master</span><br><span class=\"line\">git push origin --delete master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略</span></span><br><span class=\"line\">git push origin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果当前分支只有一个追踪分支，那么主机名都可以省略。</span></span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push</span></span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机</span></span><br><span class=\"line\">git push --all origin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制推送</span></span><br><span class=\"line\">git push --force origin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># git push不会推送标签(tag)，除非使用–tags选项</span></span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-Git-Flow使用简介\"><a href=\"#12-Git-Flow使用简介\" class=\"headerlink\" title=\"12. Git Flow使用简介\"></a>12. Git Flow使用简介</h2><p>就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范。三种广泛使用的工作流程：</p>\n<ul>\n<li>Git flow</li>\n<li>Github flow</li>\n<li>Gitlab flow</li>\n</ul>\n<p>三种工作流程，有一个共同点：都采用”功能驱动式开发”（Feature-driven development，简称FDD）。它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。最早诞生、并得到广泛采用的一种工作流程，就是<a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">Git flow</a>。</p>\n<p>它最主要的特点有两个。首先，项目存在两个长期分支，分别是：主分支master、开发分支develop。其次，项目存在三种短期分支，分别是：功能分支（feature branch）、补丁分支（hotfix branch）、预发分支（release branch），一旦完成开发，它们就会被合并进develop或master，然后被删除。</p>\n<h3 id=\"1-Git-Flow流程图\"><a href=\"#1-Git-Flow流程图\" class=\"headerlink\" title=\"(1). Git Flow流程图\"></a>(1). Git Flow流程图</h3><p><img src=\"https://statics.sh1a.qingstor.com/2018/09/24/imagegit-flow.png\" alt=\"Git Flow流程图\"></p>\n<h3 id=\"2-Git-Flow常用的分支\"><a href=\"#2-Git-Flow常用的分支\" class=\"headerlink\" title=\"(2). Git Flow常用的分支\"></a>(2). Git Flow常用的分支</h3><ul>\n<li><code>Production</code>分支。也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。</li>\n<li><code>Develop</code>分支。这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支。</li>\n<li><code>Feature</code>分支。这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release。</li>\n<li><code>Release</code>分支。当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支。</li>\n<li><code>Hotfix</code>分支。当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release。</li>\n</ul>\n<h3 id=\"3-Git-Flow代码示例\"><a href=\"#3-Git-Flow代码示例\" class=\"headerlink\" title=\"(3). Git Flow代码示例\"></a>(3). Git Flow代码示例</h3><h4 id=\"a-创建develop分支\"><a href=\"#a-创建develop分支\" class=\"headerlink\" title=\"a. 创建develop分支\"></a>a. 创建develop分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch develop</span><br><span class=\"line\">git push -u origin develop</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"b-开始新Feature开发\"><a href=\"#b-开始新Feature开发\" class=\"headerlink\" title=\"b. 开始新Feature开发\"></a>b. 开始新Feature开发</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b some-feature develop</span><br><span class=\"line\"><span class=\"comment\"># Optionally, push branch to origin:</span></span><br><span class=\"line\">git push -u origin some-feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 做一些改动</span></span><br><span class=\"line\">git status</span><br><span class=\"line\">git add some-file</span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"c-完成Feature\"><a href=\"#c-完成Feature\" class=\"headerlink\" title=\"c. 完成Feature\"></a>c. 完成Feature</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin develop</span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff some-feature</span><br><span class=\"line\">git push origin develop</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d some-feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you pushed branch to origin:</span></span><br><span class=\"line\">git push origin --delete some-feature</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"d-开始Relase\"><a href=\"#d-开始Relase\" class=\"headerlink\" title=\"d. 开始Relase\"></a>d. 开始Relase</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b release-0.1.0 develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optional: Bump version number, commit</span></span><br><span class=\"line\"><span class=\"comment\"># Prepare release, commit</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"e-完成Release\"><a href=\"#e-完成Release\" class=\"headerlink\" title=\"e. 完成Release\"></a>e. 完成Release</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff release-0.1.0</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff release-0.1.0</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d release-0.1.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you pushed branch to origin:</span></span><br><span class=\"line\">git push origin --delete release-0.1.0   </span><br><span class=\"line\"></span><br><span class=\"line\">git tag -a v0.1.0 master</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"f-开始Hotfix\"><a href=\"#f-开始Hotfix\" class=\"headerlink\" title=\"f. 开始Hotfix\"></a>f. 开始Hotfix</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b hotfix-0.1.1 master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"g-完成Hotfix\"><a href=\"#g-完成Hotfix\" class=\"headerlink\" title=\"g. 完成Hotfix\"></a>g. 完成Hotfix</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff hotfix-0.1.1</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff hotfix-0.1.1</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d hotfix-0.1.1</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -a v0.1.1 master</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"1-Git基本概念。\"><a href=\"#1-Git基本概念。\" class=\"headerlink\" title=\"1. Git基本概念。\"></a>1. Git基本概念。</h2><ul>\n<li><code>repository</code></li>\n<li><code>config</code></li>\n<li><code>init</code></li>\n<li><code>clone</code></li>\n<li><code>fetch</code></li>\n<li><code>pull</code></li>\n<li><code>commit</code></li>\n<li><code>push</code></li>\n<li><code>branch</code></li>\n<li><code>head</code></li>\n<li><code>tag</code></li>\n<li><code>merge</code></li>\n<li><code>conflict</code></li>\n<li><code>diff</code></li>\n<li><code>log</code></li>\n<li><code>show</code></li>\n<li><code>status</code></li>\n</ul>\n<h2 id=\"2-Git工作空间和文件状态\"><a href=\"#2-Git工作空间和文件状态\" class=\"headerlink\" title=\"2. Git工作空间和文件状态\"></a>2. Git工作空间和文件状态</h2><h3 id=\"1-工作空间\"><a href=\"#1-工作空间\" class=\"headerlink\" title=\"(1).工作空间\"></a>(1).工作空间</h3><p><img src=\"http://blog.chinaunix.net/attachment/201402/19/10415985_139279770639pM.jpg\" alt=\"Git工作空间\"></p>\n<p>左侧为工作区，右侧为版本库。</p>\n<ul>\n<li>工作区（<code>Working Directory</code>） 就是在电脑里能看到的目录，比如learngit文件夹就是一个工作区。</li>\n<li>版本库（<code>Repository</code>）工作区有一个隐藏目录<code>.git</code>，是Git的版本库。</li>\n</ul>\n<p>在版本库中标记为<code>index</code>的区域为暂存区，标记为<code>master</code>的是Git为我们自动创建的第一个分支，代表的是目录树。此时<code>HEAD</code>实际是指向<code>master</code>分支的一个“游标”，所以图示的命令中出现HEAD的地方可以用<code>master</code>来替换。图中的objects标识的区域为git的对象库，实际位于<code>.git/objects</code>目录下。</p>\n<ul>\n<li>当对工作区修改（或新增）的文件执行<code>git add</code>命令时，暂存区的目录树会被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的id被记录在暂存区的文件索引中。</li>\n<li>当执行提交操作<code>git commit</code>时，暂存区的目录树会写到版本库（对象库）中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区的目录树。</li>\n<li>当执行<code>git reset HEAD</code>命令时，暂存区的目录树会被重写，会被master分支指向的目录树所替换，但是工作区不受影响。</li>\n<li>当执行<code>git rm --cached</code>命令时，会直接从暂存区删除文件，工作区则不做出改变。</li>\n<li>当执行<code>git checkout .</code>或<code>git checkout --</code> 命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。</li>\n<li>当执行<code>git checkout HEAD .</code>或<code>git checkout HEAD</code>命令时，会用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极度危险的。因为不但会清楚工作区中未提交的改动，也会清楚暂存区中未提交的改动。</li>\n</ul>\n<h3 id=\"1-文件状态\"><a href=\"#1-文件状态\" class=\"headerlink\" title=\"(1).文件状态\"></a>(1).文件状态</h3><p>Git 有三种状态，你的文件可能处于其中之一：**已提交(<code>committed</code>)<strong>、</strong>已修改(<code>modified</code>)<strong>和</strong>已暂存(<code>staged</code>)**。</p>\n<h2 id=\"3-Git配置系统级、全局、当前仓库用户名、邮箱的命令\"><a href=\"#3-Git配置系统级、全局、当前仓库用户名、邮箱的命令\" class=\"headerlink\" title=\"3. Git配置系统级、全局、当前仓库用户名、邮箱的命令\"></a>3. Git配置系统级、全局、当前仓库用户名、邮箱的命令</h2><p>系统级、全局、当前仓库选项分别是:仓库-system、-global、-local(或默认不填)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">&quot;Jerry Mouse&quot;</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">&quot;jerry@yiibai.com&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>列出Git设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">git config --list</span><br><span class=\"line\">git config -l</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Git-fetch和pull的区别\"><a href=\"#4-Git-fetch和pull的区别\" class=\"headerlink\" title=\"4. Git fetch和pull的区别\"></a>4. Git fetch和pull的区别</h2><ul>\n<li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动merge.</li>\n<li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地.</li>\n</ul>\n<h3 id=\"1-git-fetch示例：\"><a href=\"#1-git-fetch示例：\" class=\"headerlink\" title=\"(1). git fetch示例：\"></a>(1). git fetch示例：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Git fetch origin master</span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p master..origin/master</span><br><span class=\"line\">git merge origin/master</span><br></pre></td></tr></table></figure>\n\n<p>以上命令的含义：</p>\n<ul>\n<li>首先从远程的<code>origin</code>的<code>master</code>主分支下载最新的版本到<code>origin/master</code>分支上</li>\n<li>然后比较本地的<code>master</code>分支和<code>origin/master</code>分支的差别</li>\n<li>最后进行合并</li>\n<li>上述过程其实可以用以下更清晰的方式来进行：</li>\n</ul>\n<h3 id=\"1-git-pull示例：\"><a href=\"#1-git-pull示例：\" class=\"headerlink\" title=\"(1). git pull示例：\"></a>(1). git pull示例：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n\n<p>上述命令其实相当于<code>git fetch</code>和<code>git merge</code>。在实际使用中，<code>git fetch</code>更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。</p>\n<h2 id=\"5-Git-reset和revert的却别\"><a href=\"#5-Git-reset和revert的却别\" class=\"headerlink\" title=\"5. Git reset和revert的却别\"></a>5. Git reset和revert的却别</h2><ul>\n<li><code>git revert</code>是用一次新的commit来回滚之前的commit，<code>git reset</code>是直接删除指定的commit。 </li>\n<li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为<code>git revert</code>是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是<code>git reset</code>是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</li>\n<li><code>git reset</code>是把HEAD向后移动了一下，而<code>git revert</code>是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li>\n<li>git revert与git reset最大的不同是，git revert 仅仅是撤销某次提交。</li>\n</ul>\n<p>另外，说一下<code>git revert</code>， <code>git reset –hard</code>和 <code>–soft</code>的区别</p>\n<ul>\n<li><code>git reset –mixed id</code>: 是将git的HEAD变了（也就是提交记录变了），但文件并没有改变，（也就是working tree并没有改变）。</li>\n<li><code>git reset –soft id</code>: 实际上，是<code>git reset –mixed id</code>后，又做了一次<code>git add</code>。</li>\n<li><code>git reset –herd id</code>: 是将git的HEAD变了，文件也变了。</li>\n</ul>\n<h2 id=\"6-Git-merge和reabse的相同点和不同点\"><a href=\"#6-Git-merge和reabse的相同点和不同点\" class=\"headerlink\" title=\"6. Git merge和reabse的相同点和不同点\"></a>6. Git merge和reabse的相同点和不同点</h2><p><code>merge</code>是合并的意思，<code>rebase</code>是复位基底的意思，相同点都是用来合并分支的。</p>\n<p><img src=\"http://images2015.cnblogs.com/blog/759200/201608/759200-20160806092734215-279978821.png\" alt=\"merge和rebase\"></p>\n<p>不同点:</p>\n<ul>\n<li><code>merge</code>操作会生成一个新的节点，之前的提交分开显示。而<code>rebase</code>操作不会生成新的节点，是将两个分支融合成一个线性的提交。</li>\n<li>解决冲突时。merge操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit就可以了。而<code>rebase</code>操作的话，会中断rebase,同时会提示去解决冲突。解决冲突后,将修改add后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</li>\n<li><code>git pull</code>和<code>git pull --rebase</code>区别：<code>git pull</code>做了两个操作分别是”获取”和”合并”。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。</li>\n</ul>\n<p><strong>总结</strong>：选择 merge 还是 rebase？</p>\n<ul>\n<li>merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容</li>\n<li>merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面</li>\n<li>rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面</li>\n<li>rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面</li>\n<li>merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定</li>\n<li>merge 和 rebase 还有很多强大的选项，可以使用 git help <command> 查看</li>\n</ul>\n<h2 id=\"7-Git-stash是什么？它的相关使用方式命令\"><a href=\"#7-Git-stash是什么？它的相关使用方式命令\" class=\"headerlink\" title=\"7. Git stash是什么？它的相关使用方式命令\"></a>7. Git stash是什么？它的相关使用方式命令</h2><ul>\n<li>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</li>\n<li>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</li>\n<li>git stash pop –index stash@{0}: 恢复编号为0的进度的工作区和暂存区。</li>\n<li>git stash apply stash@{1} 以将你指定版本号为stash@{1}的工作取出来</li>\n<li>git stash drop[<stash>] 删除某一个进度，默认删除最新进度</li>\n<li>git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</li>\n<li>git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 恢复工作进度</span></span><br><span class=\"line\">git stash pop [--index] [&lt;stash&gt;]</span><br><span class=\"line\">--index 参数：不仅恢复工作区，还恢复暂存区</span><br><span class=\"line\">&lt;stash&gt; 指定恢复某一个具体进度。如果没有这个参数，默认恢复最新进度</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这是git stash保存进度的完整命令形式</span></span><br><span class=\"line\">git stash [save message] [-k|--no-keep-index] [--patch]</span><br><span class=\"line\">-k和--no-keep-index指定保存进度后，是否重置暂存区</span><br><span class=\"line\">--patch 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git add -p命令类似</span><br><span class=\"line\"></span><br><span class=\"line\">使用save可以对进度添加备注</span><br><span class=\"line\"><span class=\"comment\"># git stash save &quot;这是保存的进度&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-Git只从暂存区删除，从工作空间删除的命令分别是什么\"><a href=\"#8-Git只从暂存区删除，从工作空间删除的命令分别是什么\" class=\"headerlink\" title=\"8. Git只从暂存区删除，从工作空间删除的命令分别是什么?\"></a>8. Git只从暂存区删除，从工作空间删除的命令分别是什么?</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">rm</span> --cached</span><br><span class=\"line\"></span><br><span class=\"line\">git <span class=\"built_in\">rm</span></span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9-Git标签的使用\"><a href=\"#9-Git标签的使用\" class=\"headerlink\" title=\"9. Git标签的使用\"></a>9. Git标签的使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出现有的标签</span></span><br><span class=\"line\">git tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打标签</span></span><br><span class=\"line\">git tag -a v1.01 -m <span class=\"string\">&quot;Relase version 1.01&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看相应标签的版本信息</span></span><br><span class=\"line\">git show v1.4</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-a 选项,创建一个含附注类型的标签</li>\n<li>-m 选项,指定了对应的标签说明</li>\n</ul>\n<h2 id=\"9-Git分支的使用\"><a href=\"#9-Git分支的使用\" class=\"headerlink\" title=\"9. Git分支的使用\"></a>9. Git分支的使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看本地分支</span></span><br><span class=\"line\">git branch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看远程分支</span></span><br><span class=\"line\">git branch -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建本地分支(注意新分支创建后不会自动切换为当前分支)</span></span><br><span class=\"line\">git branch [name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切换分支</span></span><br><span class=\"line\">git checkout [name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建新分支并立即切换到新分支</span></span><br><span class=\"line\">git checkout -b [name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制删除一个分支</span></span><br><span class=\"line\">git branch -D [name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并分支(将名称为[name]的分支与当前分支合并)</span></span><br><span class=\"line\">git merge [name]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看各个分支最后提交信息</span></span><br><span class=\"line\">git br -v</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看已经被合并到当前分支的分支</span></span><br><span class=\"line\">git br --merged</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看尚未被合并到当前分支的分支</span></span><br><span class=\"line\">git br --no-merged</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。\"><a href=\"#10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。\" class=\"headerlink\" title=\"10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。\"></a>10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。</h2><p>merge和rebase对于ours和theirs的定义是完全相反的。在merge时，ours指代的是当前分支，theirs代表需要被合并的分支。而在rebase过程中，ours指向了修改参考分支，theirs却是当前分支。因为rebase 隐含了一个<code>git checkout upstream</code>的过程，将<code>HEAD</code>从local分支变成了upstream分支。git会在rebase结束后撤销这个改变，但它已经不可避免地影响了冲突的状态，使rebase中ours和theirs的定义与merge 截然相反。因此，在使用ours与theirs时请格外小心。</p>\n<h2 id=\"11-Git远程操作相关\"><a href=\"#11-Git远程操作相关\" class=\"headerlink\" title=\"11. Git远程操作相关\"></a>11. Git远程操作相关</h2><h3 id=\"1-clone\"><a href=\"#1-clone\" class=\"headerlink\" title=\"(1). clone\"></a>(1). clone</h3><blockquote>\n<p>git clone &lt;版本库的网址&gt;<br>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 克隆jQuery的版本库</span></span><br><span class=\"line\"> git <span class=\"built_in\">clone</span> https://github.com/jquery/jquery.git</span><br><span class=\"line\"> </span><br><span class=\"line\"> git <span class=\"built_in\">clone</span> -o jQuery https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-remote\"><a href=\"#2-remote\" class=\"headerlink\" title=\"(2). remote\"></a>(2). remote</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 列出所有远程主机</span></span><br><span class=\"line\">git remote</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用-v选项，可以参看远程主机的网址</span></span><br><span class=\"line\">git remote -v</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 可以查看该主机的详细信息</span></span><br><span class=\"line\">git remote show &lt;主机名&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 添加远程主机</span></span><br><span class=\"line\">git remote add &lt;主机名&gt; &lt;网址&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除远程主机</span></span><br><span class=\"line\">git remote <span class=\"built_in\">rm</span> &lt;主机名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改远程主机名称</span></span><br><span class=\"line\">git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-fetch\"><a href=\"#3-fetch\" class=\"headerlink\" title=\"(3). fetch\"></a>(3). fetch</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取回所有分支(branch)的更新到本地</span></span><br><span class=\"line\">git fetch &lt;远程主机名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回某的特定分支的更新</span></span><br><span class=\"line\">git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 取回origin主机的master分支的更新</span></span><br><span class=\"line\">git fetch origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支</span></span><br><span class=\"line\">git merge origin/master</span><br><span class=\"line\">git rebase origin/master</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-pull\"><a href=\"#4-pull\" class=\"headerlink\" title=\"(4). pull\"></a>(4). pull</h3><blockquote>\n<p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 取回origin主机的next分支，与本地的master分支合并</span></span><br><span class=\"line\">git pull origin next:master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span></span><br><span class=\"line\">git pull origin next</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 上面的命令实质上等同于先做git fetch，再做git merge。</span></span><br><span class=\"line\">git fetch origin</span><br><span class=\"line\">git merge origin/next</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 合并需要采用rebase模式</span></span><br><span class=\"line\">git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-push\"><a href=\"#5-push\" class=\"headerlink\" title=\"(5). push\"></a>(5). push</h3><blockquote>\n<p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p>\n</blockquote>\n<p><strong>注意</strong>:分支推送顺序的写法是”&lt;来源地&gt;:&lt;目的地&gt;”，所以git pull是”&lt;远程分支&gt;:&lt;本地分支&gt;”，而git push是”&lt;本地分支&gt;:&lt;远程分支&gt;”。</p>\n<ul>\n<li>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</li>\n<li>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建</span></span><br><span class=\"line\">git push origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 省略了本地分支，以下等同，删除origin主机的master分支</span></span><br><span class=\"line\">git push origin :master</span><br><span class=\"line\">git push origin --delete master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略</span></span><br><span class=\"line\">git push origin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果当前分支只有一个追踪分支，那么主机名都可以省略。</span></span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push</span></span><br><span class=\"line\">git push -u origin master</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机</span></span><br><span class=\"line\">git push --all origin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制推送</span></span><br><span class=\"line\">git push --force origin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># git push不会推送标签(tag)，除非使用–tags选项</span></span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"12-Git-Flow使用简介\"><a href=\"#12-Git-Flow使用简介\" class=\"headerlink\" title=\"12. Git Flow使用简介\"></a>12. Git Flow使用简介</h2><p>就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范。三种广泛使用的工作流程：</p>\n<ul>\n<li>Git flow</li>\n<li>Github flow</li>\n<li>Gitlab flow</li>\n</ul>\n<p>三种工作流程，有一个共同点：都采用”功能驱动式开发”（Feature-driven development，简称FDD）。它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。最早诞生、并得到广泛采用的一种工作流程，就是<a href=\"http://nvie.com/posts/a-successful-git-branching-model/\">Git flow</a>。</p>\n<p>它最主要的特点有两个。首先，项目存在两个长期分支，分别是：主分支master、开发分支develop。其次，项目存在三种短期分支，分别是：功能分支（feature branch）、补丁分支（hotfix branch）、预发分支（release branch），一旦完成开发，它们就会被合并进develop或master，然后被删除。</p>\n<h3 id=\"1-Git-Flow流程图\"><a href=\"#1-Git-Flow流程图\" class=\"headerlink\" title=\"(1). Git Flow流程图\"></a>(1). Git Flow流程图</h3><p><img src=\"https://statics.sh1a.qingstor.com/2018/09/24/imagegit-flow.png\" alt=\"Git Flow流程图\"></p>\n<h3 id=\"2-Git-Flow常用的分支\"><a href=\"#2-Git-Flow常用的分支\" class=\"headerlink\" title=\"(2). Git Flow常用的分支\"></a>(2). Git Flow常用的分支</h3><ul>\n<li><code>Production</code>分支。也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。</li>\n<li><code>Develop</code>分支。这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支。</li>\n<li><code>Feature</code>分支。这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release。</li>\n<li><code>Release</code>分支。当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支。</li>\n<li><code>Hotfix</code>分支。当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release。</li>\n</ul>\n<h3 id=\"3-Git-Flow代码示例\"><a href=\"#3-Git-Flow代码示例\" class=\"headerlink\" title=\"(3). Git Flow代码示例\"></a>(3). Git Flow代码示例</h3><h4 id=\"a-创建develop分支\"><a href=\"#a-创建develop分支\" class=\"headerlink\" title=\"a. 创建develop分支\"></a>a. 创建develop分支</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch develop</span><br><span class=\"line\">git push -u origin develop</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"b-开始新Feature开发\"><a href=\"#b-开始新Feature开发\" class=\"headerlink\" title=\"b. 开始新Feature开发\"></a>b. 开始新Feature开发</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b some-feature develop</span><br><span class=\"line\"><span class=\"comment\"># Optionally, push branch to origin:</span></span><br><span class=\"line\">git push -u origin some-feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 做一些改动</span></span><br><span class=\"line\">git status</span><br><span class=\"line\">git add some-file</span><br><span class=\"line\">git commit</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"c-完成Feature\"><a href=\"#c-完成Feature\" class=\"headerlink\" title=\"c. 完成Feature\"></a>c. 完成Feature</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin develop</span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff some-feature</span><br><span class=\"line\">git push origin develop</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d some-feature</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you pushed branch to origin:</span></span><br><span class=\"line\">git push origin --delete some-feature</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"d-开始Relase\"><a href=\"#d-开始Relase\" class=\"headerlink\" title=\"d. 开始Relase\"></a>d. 开始Relase</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b release-0.1.0 develop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Optional: Bump version number, commit</span></span><br><span class=\"line\"><span class=\"comment\"># Prepare release, commit</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"e-完成Release\"><a href=\"#e-完成Release\" class=\"headerlink\" title=\"e. 完成Release\"></a>e. 完成Release</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff release-0.1.0</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff release-0.1.0</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d release-0.1.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># If you pushed branch to origin:</span></span><br><span class=\"line\">git push origin --delete release-0.1.0   </span><br><span class=\"line\"></span><br><span class=\"line\">git tag -a v0.1.0 master</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"f-开始Hotfix\"><a href=\"#f-开始Hotfix\" class=\"headerlink\" title=\"f. 开始Hotfix\"></a>f. 开始Hotfix</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b hotfix-0.1.1 master</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"g-完成Hotfix\"><a href=\"#g-完成Hotfix\" class=\"headerlink\" title=\"g. 完成Hotfix\"></a>g. 完成Hotfix</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git merge --no-ff hotfix-0.1.1</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\">git checkout develop</span><br><span class=\"line\">git merge --no-ff hotfix-0.1.1</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -d hotfix-0.1.1</span><br><span class=\"line\"></span><br><span class=\"line\">git tag -a v0.1.1 master</span><br><span class=\"line\">git push --tags</span><br></pre></td></tr></table></figure>\n\n"},{"title":"常用Bash命令整理之其他常用命令","date":"2018-10-13T10:15:00.000Z","author":"blinkfox","_content":"\n## 1. hostname - 查看主机名\n\n`hostname`命令用于查看系统的主机名，或是修改系统的主机名。\n\n`hostname`的常用命令如下：\n\n```bash\n# 显示系统的当前主机名\nhostname\n\n# 修改你系统的主机名\nhostname blinkfox-system\n\n# 使用 -F 选项，从指定的文件中读取主机名\nhostname -F /root/hostname.txt\n```\n\n## 2. uptime - 查看系统运行时间\n\n`uptime`命令用于打印系统的运行时间等信息。使用如下：\n\n```bash\nuptime\n```\n\n## 3. w、who - 列出登录的用户\n\n`w`命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：\n\n```bash\nw\n\n# 打印如下\n22:42  up 18 days, 1 hr, 2 users, load averages: 1.23 1.79 1.75\nUSER     TTY      FROM              LOGIN@  IDLE WHAT\nblinkfox console  -                日19   6days -\nblinkfox s000     -                五23       - w\n```\n\n`who`命令有与`w`命令类似的用途，但它的功能比`w`命令更强大一些。语法格式如下：\n\n```bash\nwho [OPTION]... [FILE | ARG1 ARG2]\n```\n\n`who`常用命令如下：\n\n```bash\n# 显示当前登录的所有用户信息\nwho\n\n# 显示系统的启动时间\nwho -b\n\n# 显示系统登录进程\nwho -l\n\n# 显示与当前标准输入关联的用户信息\nwho -m\n\n# 显示系统的运行级别\nwho -r\n\n# 显示所有登录用户的用户名和登录用户数\nwho -q\n```\n\n## 4. uname - 查看系统信息\n\n`uname`命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：\n\n```bash\nuname [OPTION]...\n```\n\n常用使用方式如下：\n\n```bash\n# 只打印内核的名称\nuname\n\n# 使用 -n 选项，只打印系统的主机名\nuname -n\n\n# 使用 -r 选项，打印内核版本信息\nuname -r\n\n# 使用 -m 选项，打印系统的硬件名称\nuname -m\n\n# 使用 -p 选项，打印系统的处理器类型信息\nuname -p\n\n# 使用 -i 选项，打印系统的硬件平台信息\nuname -i\n\n# 使用 -a 选项，打印上述所有示例中的信息\nuname -a\n```\n\n## 5. date - 显示和设置系统日期和时间\n\n`date`命令用于以多种格式显示日期和时间，或设置系统的日期和时间。`date`命令的语法如下所示：\n\n```bash\ndate [OPTION]... [+FORMAT]\ndate [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]\n```\n\n常用使用命令如下：\n\n```bash\n# 以默认格式显示系统的当前日期时间\ndate\n\n# 格式化当前日期\ndate +\"%Y-%m-%d\"\n\n# 格式化输出昨天的日期\ndate -d \"1 day ago\" +\"%Y-%m-%d\"\n\n# 2秒后格式化输出\ndate -d \"2 second\" +\"%Y-%m-%d %H:%M.%S\"\n\n# 普通格式化转出\ndate -d \"2009-12-12\" +\"%Y/%m/%d %H:%M.%S\"\n\n# apache格式转换\ndate -d \"Dec 5, 2009 12:00:37 AM\" +\"%Y-%m-%d %H:%M.%S\"\n\n# 日期加减操作\ndate +%Y%m%d #显示前天年月日\ndate -d \"+1 day\" +%Y%m%d #显示前一天的日期\ndate -d \"-1 day\" +%Y%m%d #显示后一天的日期\ndate -d \"-1 month\" +%Y%m%d #显示上一月的日期\ndate -d \"+1 month\" +%Y%m%d #显示下一月的日期\ndate -d \"-1 year\" +%Y%m%d #显示前一年的日期\ndate -d \"+1 year\" +%Y%m%d #显示下一年的日期\n\n# 设定时间\ndate -s # 设置当前时间，只有root权限才能设置，其他只能查看\ndate -s 20160816 # 设置成20160816，这样会把具体时间设置成空00:00:00\ndate -s 01:01:01 # 设置具体时间，不会对日期做更改\ndate -s \"01:01:01 2012-05-23\" # 这样可以设置全部时间 \ndate -s \"01:01:01 20120523\" # 这样可以设置全部时间\ndate -s \"2012-05-23 01:01:01\" # 这样可以设置全部时间 \ndate -s \"20120523 01:01:01\" # 这样可以设置全部时间\n```\n\n## 6. id - 显示用户属性\n\n`id`命令用于打印输出用户`uid`、`gid`、用户名和组名等用户身份信息。`id`命令的语法如下所示：\n\n```bash\nid [OPTION]... [USERNAME]\n```\n\n常见使用命令如下：\n\n```bash\n# 输出当前用户的uid、用户名、gid、组名及用户属于的群组信息\nid\n\n# 使用 -u 选项，输出用户的 uid\nid -u\n\n#-u 选项和 -n 选项结合使用，输出账户的用户名\nid -un\n\n# 使用 -g 选项，输出帐号当前起作用的gid\nid -g\n\n# -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名\nid -gn\n\n# 使用 -G 选项，输出帐号所属的所有群组id\nid -G root\n\n# -G 与 -n 选项结合使用，输出账号所属的所有群组的名称\nid -Gn root\n```","source":"_posts/Linux/常用Bash命令整理之其他常用命令.md","raw":"---\ntitle: 常用Bash命令整理之其他常用命令\ndate: 2018-10-13 18:15:00\nauthor: blinkfox\ncategories: 软件工具\ntags: Linux\n---\n\n## 1. hostname - 查看主机名\n\n`hostname`命令用于查看系统的主机名，或是修改系统的主机名。\n\n`hostname`的常用命令如下：\n\n```bash\n# 显示系统的当前主机名\nhostname\n\n# 修改你系统的主机名\nhostname blinkfox-system\n\n# 使用 -F 选项，从指定的文件中读取主机名\nhostname -F /root/hostname.txt\n```\n\n## 2. uptime - 查看系统运行时间\n\n`uptime`命令用于打印系统的运行时间等信息。使用如下：\n\n```bash\nuptime\n```\n\n## 3. w、who - 列出登录的用户\n\n`w`命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：\n\n```bash\nw\n\n# 打印如下\n22:42  up 18 days, 1 hr, 2 users, load averages: 1.23 1.79 1.75\nUSER     TTY      FROM              LOGIN@  IDLE WHAT\nblinkfox console  -                日19   6days -\nblinkfox s000     -                五23       - w\n```\n\n`who`命令有与`w`命令类似的用途，但它的功能比`w`命令更强大一些。语法格式如下：\n\n```bash\nwho [OPTION]... [FILE | ARG1 ARG2]\n```\n\n`who`常用命令如下：\n\n```bash\n# 显示当前登录的所有用户信息\nwho\n\n# 显示系统的启动时间\nwho -b\n\n# 显示系统登录进程\nwho -l\n\n# 显示与当前标准输入关联的用户信息\nwho -m\n\n# 显示系统的运行级别\nwho -r\n\n# 显示所有登录用户的用户名和登录用户数\nwho -q\n```\n\n## 4. uname - 查看系统信息\n\n`uname`命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：\n\n```bash\nuname [OPTION]...\n```\n\n常用使用方式如下：\n\n```bash\n# 只打印内核的名称\nuname\n\n# 使用 -n 选项，只打印系统的主机名\nuname -n\n\n# 使用 -r 选项，打印内核版本信息\nuname -r\n\n# 使用 -m 选项，打印系统的硬件名称\nuname -m\n\n# 使用 -p 选项，打印系统的处理器类型信息\nuname -p\n\n# 使用 -i 选项，打印系统的硬件平台信息\nuname -i\n\n# 使用 -a 选项，打印上述所有示例中的信息\nuname -a\n```\n\n## 5. date - 显示和设置系统日期和时间\n\n`date`命令用于以多种格式显示日期和时间，或设置系统的日期和时间。`date`命令的语法如下所示：\n\n```bash\ndate [OPTION]... [+FORMAT]\ndate [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]\n```\n\n常用使用命令如下：\n\n```bash\n# 以默认格式显示系统的当前日期时间\ndate\n\n# 格式化当前日期\ndate +\"%Y-%m-%d\"\n\n# 格式化输出昨天的日期\ndate -d \"1 day ago\" +\"%Y-%m-%d\"\n\n# 2秒后格式化输出\ndate -d \"2 second\" +\"%Y-%m-%d %H:%M.%S\"\n\n# 普通格式化转出\ndate -d \"2009-12-12\" +\"%Y/%m/%d %H:%M.%S\"\n\n# apache格式转换\ndate -d \"Dec 5, 2009 12:00:37 AM\" +\"%Y-%m-%d %H:%M.%S\"\n\n# 日期加减操作\ndate +%Y%m%d #显示前天年月日\ndate -d \"+1 day\" +%Y%m%d #显示前一天的日期\ndate -d \"-1 day\" +%Y%m%d #显示后一天的日期\ndate -d \"-1 month\" +%Y%m%d #显示上一月的日期\ndate -d \"+1 month\" +%Y%m%d #显示下一月的日期\ndate -d \"-1 year\" +%Y%m%d #显示前一年的日期\ndate -d \"+1 year\" +%Y%m%d #显示下一年的日期\n\n# 设定时间\ndate -s # 设置当前时间，只有root权限才能设置，其他只能查看\ndate -s 20160816 # 设置成20160816，这样会把具体时间设置成空00:00:00\ndate -s 01:01:01 # 设置具体时间，不会对日期做更改\ndate -s \"01:01:01 2012-05-23\" # 这样可以设置全部时间 \ndate -s \"01:01:01 20120523\" # 这样可以设置全部时间\ndate -s \"2012-05-23 01:01:01\" # 这样可以设置全部时间 \ndate -s \"20120523 01:01:01\" # 这样可以设置全部时间\n```\n\n## 6. id - 显示用户属性\n\n`id`命令用于打印输出用户`uid`、`gid`、用户名和组名等用户身份信息。`id`命令的语法如下所示：\n\n```bash\nid [OPTION]... [USERNAME]\n```\n\n常见使用命令如下：\n\n```bash\n# 输出当前用户的uid、用户名、gid、组名及用户属于的群组信息\nid\n\n# 使用 -u 选项，输出用户的 uid\nid -u\n\n#-u 选项和 -n 选项结合使用，输出账户的用户名\nid -un\n\n# 使用 -g 选项，输出帐号当前起作用的gid\nid -g\n\n# -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名\nid -gn\n\n# 使用 -G 选项，输出帐号所属的所有群组id\nid -G root\n\n# -G 与 -n 选项结合使用，输出账号所属的所有群组的名称\nid -Gn root\n```","slug":"Linux/常用Bash命令整理之其他常用命令","published":1,"updated":"2024-12-12T16:49:46.412Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27ved000dge9kdqe02nat","content":"<h2 id=\"1-hostname-查看主机名\"><a href=\"#1-hostname-查看主机名\" class=\"headerlink\" title=\"1. hostname - 查看主机名\"></a>1. hostname - 查看主机名</h2><p><code>hostname</code>命令用于查看系统的主机名，或是修改系统的主机名。</p>\n<p><code>hostname</code>的常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示系统的当前主机名</span></span><br><span class=\"line\">hostname</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改你系统的主机名</span></span><br><span class=\"line\">hostname blinkfox-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -F 选项，从指定的文件中读取主机名</span></span><br><span class=\"line\">hostname -F /root/hostname.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-uptime-查看系统运行时间\"><a href=\"#2-uptime-查看系统运行时间\" class=\"headerlink\" title=\"2. uptime - 查看系统运行时间\"></a>2. uptime - 查看系统运行时间</h2><p><code>uptime</code>命令用于打印系统的运行时间等信息。使用如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uptime</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-w、who-列出登录的用户\"><a href=\"#3-w、who-列出登录的用户\" class=\"headerlink\" title=\"3. w、who - 列出登录的用户\"></a>3. w、who - 列出登录的用户</h2><p><code>w</code>命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印如下</span></span><br><span class=\"line\">22:42  up 18 days, 1 hr, 2 <span class=\"built_in\">users</span>, load averages: 1.23 1.79 1.75</span><br><span class=\"line\">USER     TTY      FROM              LOGIN@  IDLE WHAT</span><br><span class=\"line\">blinkfox console  -                日19   6days -</span><br><span class=\"line\">blinkfox s000     -                五23       - w</span><br></pre></td></tr></table></figure>\n\n<p><code>who</code>命令有与<code>w</code>命令类似的用途，但它的功能比<code>w</code>命令更强大一些。语法格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">who</span> [OPTION]... [FILE | ARG1 ARG2]</span><br></pre></td></tr></table></figure>\n\n<p><code>who</code>常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前登录的所有用户信息</span></span><br><span class=\"line\"><span class=\"built_in\">who</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示系统的启动时间</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> -b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示系统登录进程</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示与当前标准输入关联的用户信息</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> -m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示系统的运行级别</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有登录用户的用户名和登录用户数</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> -q</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-uname-查看系统信息\"><a href=\"#4-uname-查看系统信息\" class=\"headerlink\" title=\"4. uname - 查看系统信息\"></a>4. uname - 查看系统信息</h2><p><code>uname</code>命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> [OPTION]...</span><br></pre></td></tr></table></figure>\n\n<p>常用使用方式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只打印内核的名称</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -n 选项，只打印系统的主机名</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -r 选项，打印内核版本信息</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -m 选项，打印系统的硬件名称</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -p 选项，打印系统的处理器类型信息</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -i 选项，打印系统的硬件平台信息</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -a 选项，打印上述所有示例中的信息</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-date-显示和设置系统日期和时间\"><a href=\"#5-date-显示和设置系统日期和时间\" class=\"headerlink\" title=\"5. date - 显示和设置系统日期和时间\"></a>5. date - 显示和设置系统日期和时间</h2><p><code>date</code>命令用于以多种格式显示日期和时间，或设置系统的日期和时间。<code>date</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">date</span> [OPTION]... [+FORMAT]</span><br><span class=\"line\"><span class=\"built_in\">date</span> [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br></pre></td></tr></table></figure>\n\n<p>常用使用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以默认格式显示系统的当前日期时间</span></span><br><span class=\"line\"><span class=\"built_in\">date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化当前日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> +<span class=\"string\">&quot;%Y-%m-%d&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化输出昨天的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;1 day ago&quot;</span> +<span class=\"string\">&quot;%Y-%m-%d&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2秒后格式化输出</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;2 second&quot;</span> +<span class=\"string\">&quot;%Y-%m-%d %H:%M.%S&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 普通格式化转出</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;2009-12-12&quot;</span> +<span class=\"string\">&quot;%Y/%m/%d %H:%M.%S&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># apache格式转换</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;Dec 5, 2009 12:00:37 AM&quot;</span> +<span class=\"string\">&quot;%Y-%m-%d %H:%M.%S&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日期加减操作</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> +%Y%m%d <span class=\"comment\">#显示前天年月日</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;+1 day&quot;</span> +%Y%m%d <span class=\"comment\">#显示前一天的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;-1 day&quot;</span> +%Y%m%d <span class=\"comment\">#显示后一天的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;-1 month&quot;</span> +%Y%m%d <span class=\"comment\">#显示上一月的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;+1 month&quot;</span> +%Y%m%d <span class=\"comment\">#显示下一月的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;-1 year&quot;</span> +%Y%m%d <span class=\"comment\">#显示前一年的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;+1 year&quot;</span> +%Y%m%d <span class=\"comment\">#显示下一年的日期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设定时间</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s <span class=\"comment\"># 设置当前时间，只有root权限才能设置，其他只能查看</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s 20160816 <span class=\"comment\"># 设置成20160816，这样会把具体时间设置成空00:00:00</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s 01:01:01 <span class=\"comment\"># 设置具体时间，不会对日期做更改</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s <span class=\"string\">&quot;01:01:01 2012-05-23&quot;</span> <span class=\"comment\"># 这样可以设置全部时间 </span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s <span class=\"string\">&quot;01:01:01 20120523&quot;</span> <span class=\"comment\"># 这样可以设置全部时间</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s <span class=\"string\">&quot;2012-05-23 01:01:01&quot;</span> <span class=\"comment\"># 这样可以设置全部时间 </span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s <span class=\"string\">&quot;20120523 01:01:01&quot;</span> <span class=\"comment\"># 这样可以设置全部时间</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-id-显示用户属性\"><a href=\"#6-id-显示用户属性\" class=\"headerlink\" title=\"6. id - 显示用户属性\"></a>6. id - 显示用户属性</h2><p><code>id</code>命令用于打印输出用户<code>uid</code>、<code>gid</code>、用户名和组名等用户身份信息。<code>id</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">id</span> [OPTION]... [USERNAME]</span><br></pre></td></tr></table></figure>\n\n<p>常见使用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出当前用户的uid、用户名、gid、组名及用户属于的群组信息</span></span><br><span class=\"line\"><span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -u 选项，输出用户的 uid</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -u</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-u 选项和 -n 选项结合使用，输出账户的用户名</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -un</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -g 选项，输出帐号当前起作用的gid</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -gn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -G 选项，输出帐号所属的所有群组id</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -G root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -G 与 -n 选项结合使用，输出账号所属的所有群组的名称</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -Gn root</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"1-hostname-查看主机名\"><a href=\"#1-hostname-查看主机名\" class=\"headerlink\" title=\"1. hostname - 查看主机名\"></a>1. hostname - 查看主机名</h2><p><code>hostname</code>命令用于查看系统的主机名，或是修改系统的主机名。</p>\n<p><code>hostname</code>的常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示系统的当前主机名</span></span><br><span class=\"line\">hostname</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 修改你系统的主机名</span></span><br><span class=\"line\">hostname blinkfox-system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -F 选项，从指定的文件中读取主机名</span></span><br><span class=\"line\">hostname -F /root/hostname.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-uptime-查看系统运行时间\"><a href=\"#2-uptime-查看系统运行时间\" class=\"headerlink\" title=\"2. uptime - 查看系统运行时间\"></a>2. uptime - 查看系统运行时间</h2><p><code>uptime</code>命令用于打印系统的运行时间等信息。使用如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uptime</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-w、who-列出登录的用户\"><a href=\"#3-w、who-列出登录的用户\" class=\"headerlink\" title=\"3. w、who - 列出登录的用户\"></a>3. w、who - 列出登录的用户</h2><p><code>w</code>命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印如下</span></span><br><span class=\"line\">22:42  up 18 days, 1 hr, 2 <span class=\"built_in\">users</span>, load averages: 1.23 1.79 1.75</span><br><span class=\"line\">USER     TTY      FROM              LOGIN@  IDLE WHAT</span><br><span class=\"line\">blinkfox console  -                日19   6days -</span><br><span class=\"line\">blinkfox s000     -                五23       - w</span><br></pre></td></tr></table></figure>\n\n<p><code>who</code>命令有与<code>w</code>命令类似的用途，但它的功能比<code>w</code>命令更强大一些。语法格式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">who</span> [OPTION]... [FILE | ARG1 ARG2]</span><br></pre></td></tr></table></figure>\n\n<p><code>who</code>常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 显示当前登录的所有用户信息</span></span><br><span class=\"line\"><span class=\"built_in\">who</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示系统的启动时间</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> -b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示系统登录进程</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示与当前标准输入关联的用户信息</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> -m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示系统的运行级别</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示所有登录用户的用户名和登录用户数</span></span><br><span class=\"line\"><span class=\"built_in\">who</span> -q</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-uname-查看系统信息\"><a href=\"#4-uname-查看系统信息\" class=\"headerlink\" title=\"4. uname - 查看系统信息\"></a>4. uname - 查看系统信息</h2><p><code>uname</code>命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">uname</span> [OPTION]...</span><br></pre></td></tr></table></figure>\n\n<p>常用使用方式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 只打印内核的名称</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -n 选项，只打印系统的主机名</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -r 选项，打印内核版本信息</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -r</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -m 选项，打印系统的硬件名称</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -m</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -p 选项，打印系统的处理器类型信息</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -p</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -i 选项，打印系统的硬件平台信息</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -i</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -a 选项，打印上述所有示例中的信息</span></span><br><span class=\"line\"><span class=\"built_in\">uname</span> -a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-date-显示和设置系统日期和时间\"><a href=\"#5-date-显示和设置系统日期和时间\" class=\"headerlink\" title=\"5. date - 显示和设置系统日期和时间\"></a>5. date - 显示和设置系统日期和时间</h2><p><code>date</code>命令用于以多种格式显示日期和时间，或设置系统的日期和时间。<code>date</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">date</span> [OPTION]... [+FORMAT]</span><br><span class=\"line\"><span class=\"built_in\">date</span> [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br></pre></td></tr></table></figure>\n\n<p>常用使用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以默认格式显示系统的当前日期时间</span></span><br><span class=\"line\"><span class=\"built_in\">date</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化当前日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> +<span class=\"string\">&quot;%Y-%m-%d&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 格式化输出昨天的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;1 day ago&quot;</span> +<span class=\"string\">&quot;%Y-%m-%d&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2秒后格式化输出</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;2 second&quot;</span> +<span class=\"string\">&quot;%Y-%m-%d %H:%M.%S&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 普通格式化转出</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;2009-12-12&quot;</span> +<span class=\"string\">&quot;%Y/%m/%d %H:%M.%S&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># apache格式转换</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;Dec 5, 2009 12:00:37 AM&quot;</span> +<span class=\"string\">&quot;%Y-%m-%d %H:%M.%S&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 日期加减操作</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> +%Y%m%d <span class=\"comment\">#显示前天年月日</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;+1 day&quot;</span> +%Y%m%d <span class=\"comment\">#显示前一天的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;-1 day&quot;</span> +%Y%m%d <span class=\"comment\">#显示后一天的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;-1 month&quot;</span> +%Y%m%d <span class=\"comment\">#显示上一月的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;+1 month&quot;</span> +%Y%m%d <span class=\"comment\">#显示下一月的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;-1 year&quot;</span> +%Y%m%d <span class=\"comment\">#显示前一年的日期</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -d <span class=\"string\">&quot;+1 year&quot;</span> +%Y%m%d <span class=\"comment\">#显示下一年的日期</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设定时间</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s <span class=\"comment\"># 设置当前时间，只有root权限才能设置，其他只能查看</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s 20160816 <span class=\"comment\"># 设置成20160816，这样会把具体时间设置成空00:00:00</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s 01:01:01 <span class=\"comment\"># 设置具体时间，不会对日期做更改</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s <span class=\"string\">&quot;01:01:01 2012-05-23&quot;</span> <span class=\"comment\"># 这样可以设置全部时间 </span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s <span class=\"string\">&quot;01:01:01 20120523&quot;</span> <span class=\"comment\"># 这样可以设置全部时间</span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s <span class=\"string\">&quot;2012-05-23 01:01:01&quot;</span> <span class=\"comment\"># 这样可以设置全部时间 </span></span><br><span class=\"line\"><span class=\"built_in\">date</span> -s <span class=\"string\">&quot;20120523 01:01:01&quot;</span> <span class=\"comment\"># 这样可以设置全部时间</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-id-显示用户属性\"><a href=\"#6-id-显示用户属性\" class=\"headerlink\" title=\"6. id - 显示用户属性\"></a>6. id - 显示用户属性</h2><p><code>id</code>命令用于打印输出用户<code>uid</code>、<code>gid</code>、用户名和组名等用户身份信息。<code>id</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">id</span> [OPTION]... [USERNAME]</span><br></pre></td></tr></table></figure>\n\n<p>常见使用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输出当前用户的uid、用户名、gid、组名及用户属于的群组信息</span></span><br><span class=\"line\"><span class=\"built_in\">id</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -u 选项，输出用户的 uid</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -u</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#-u 选项和 -n 选项结合使用，输出账户的用户名</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -un</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -g 选项，输出帐号当前起作用的gid</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -g</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -gn</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -G 选项，输出帐号所属的所有群组id</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -G root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -G 与 -n 选项结合使用，输出账号所属的所有群组的名称</span></span><br><span class=\"line\"><span class=\"built_in\">id</span> -Gn root</span><br></pre></td></tr></table></figure>"},{"title":"常用Bash命令整理之操作文件和目录","date":"2018-10-10T15:10:00.000Z","author":"blinkfox","_content":"\n## 1. touch - 创建文件\n\n`touch`命令就可用于创建、变更和修改文件的时间戳。它是 Linux 操作系统的标准程序。`touch`命令又如下选项：\n\n```bash\n-a: 只改变访问时间 \n-c: 不创建任何文件\n-m: 只改变修改时间\n-r: 使用指定文件的时间替代当前时间\n-t: 使用 [[CC]YY]MMDDhhmm[.ss] 替代当前时间\n```\n\ntouch 命令的常见用法如下：\n\n```bash\n# 创建一个名为 effyl 的新空文件\ntouch effyl\n\n# 同时创建名称分别为 effyl myeffyl lueffyl 的三个文件\ntouch effyl myeffyl lueffyl\n\n# 使用 -a 选项，可以改变或更新文件的最新访问时间，如果文件 effyl 不存在，则新创建一个\ntouch -a effyl\n\n# 使用 -c 选项，可以避免创建一个新文件，并用当前时间更新文件的时间戳\ntouch -c effyl\n\n# 使用 -m 选项，可以只改变文件的修改时间，而访问时间不变\ntouch -m effyl\n\n# 使用 -c 和 -t 选项，来明确设置文件的时间\ntouch -c -t YYMMDDHHMM filename\n\n# 如果想使用文件 myeffyl 的时间戳更新文件 effyl 的时间戳，可以使用 -r 选项\ntouch -r myeffyl effyl\n```\n\n## 2.mkdir - 创建目录\n\n`mkdir`命令用于创建一个新目录。最基本的`mkdir`命令的使用方法如下所示：\n\n```bash\n# 在当前目录下创建一个给定的目录名\nmkdir <dirname>\n\n# 在 backup 中的相对路径创建一个名为 old 的目录\nmkdir backup/old\n\n# 在 backup 中的绝对路径中创建一个名为 old 的目录\nmkdir /home/blinkfox/backup/old\n\n# 使用 -p 选项，会自动创建所有还不存在的父目录\nmkdir -p backup/old\n\n# 使用 -m 选项，可以设置将要创建目录的权限\n# 如：创建一个任何人都有读写访问权限的目录\nmkdir -p -m 777 backup/old\n```\n\n## 3.cp - 复制文件或目录\n\n`cp`命令用于将文件从一个地方复制到另一个地方。原来的文件保持不变，新文件可能保持原名或用一个不同的名字。\n\n使用 cp 命令复制文件和目录的语法有以下几种：\n\n```bash\n# 复制源文件到目标文件\ncp [OPTION] SOURCE DEST\n\n# 复制一个或多个源文件到一个目录\ncp [OPTION] SOURCE... DIRECTORY\n\n# 同上\ncp [OPTION] -t DIRECTORY SOURCE... \n```\n\n常用使用示例如下：\n\n```bash\n# 在当前目录下，创建一个文件 file.txt 的副本，取名为 newfile.txt\ncp file.txt newfile.txt\n\n# 复制当前目录下的 file.txt 文件到 /tmp 目录下\ncp file.txt /tmp\n\n# 复制当前目录下的所有文件到 /tmp 目录下\ncp * /tmp\n\n# 使用 -p 选项，可以使复制一个文件到新文件时，保留源文件的所有者、权限等信息\ncp -p filename /path/to/new/location/myfile\n\n# 使用 -R 或 -r 选项，恶意递归地复制一个目录\n# 即将一个目录及其下的所有文件和子目录都复制到另一个目录\ncp -R * /home/blinkfox/backup\n```\n\n## 4.ln - 链接文件或目录\n\n`ln`命令用于创建软链接或硬链接。使用 -s 选项，可以创建一个软链接：\n\n```bash\n# 在目录 lib 下创建一个软链接 library.so，链接到 /home/blinkfox/src/library.so\nln -s /home/blinkfox/src/library.so /home/blinkfox/lib\n\n# 创建目录的软链接\nln -s /home/blinkfox/src source\n```\n\n## 5. mv - 移动文件或目录\n\n`mv`命令用于将文件和目录从一个位置移到另外一个位置。除了移动文件，`mv`命令还可用于修改文件或目录的名字。\n\nmv 命令的基本语法如下所示：\n\n```bash\nmv SOURCE... DIRECTORY\n```\n\n常用命令如下：\n\n```bash\n# 将当前目录下的文件 source.txt 移到目录 /tmp 下\nmv source.txt /tmp\n\n# 将目录 dir1、dir2 移到目录 dir_dist 下\nmv dir1 dir2 dir_dist\n\n# 将当前目录下的 old.txt 文件更名为 new.txt\nmv old.txt new.txt\n\n# 使用 -i 选项，在重写覆盖目标文件或目录之前给出提示信息\nmv -i old.txt new.txt\n\n# 将当前目录下的所有文件移动到目录 /tmp 下\nmv * /tmp/\n\n# 使用 -i 选项，从 dir1 中移动那些在目标目录中不存在的文件到目标目录\nmv -u dir1/* dir2/\n```\n\n## 6.rm - 删除文件或目录\n\n`rm`命令用于删除指定的文件和目录。其语法如下所示：\n\n```bash\nrm [OPTIONS]... FILE...\n```\n\n`rm`的常用命令如下：\n\n```bash\n# 删除当前目录下的文件 file1.txt、file2.txt、file3.txt\nrm file1.txt file2.txt file3.txt\n\n# 删除当前目录下的所有文件\nrm *\n\n# 删除你当前帐号主目录下的 temp 目录中的所有文件\nrm ~/temp/*\n\n# 使用 -i 选项，可以在删除每个文件或目录前提示用户确认\nrm -i *\n\n# 删除当前目录下所有以\".doc\"结尾的文件\nrm *.doc\n\n# 删除当前目录下所有文件名中包含\"movie\"字符串的文件\nrm *movie*\n\n# 删除当前目录下所有以\"a\"开头的文件\nrm a*\n\n# 删除当前目录下整个文件名（包括扩展名）只有 3 个字符的所有文件\nrm ???\n\n# 删除当前目录下文件扩展名有两个字符的所有文件\nrm *.??\n\n# 删除当前目录下文件名中含有字母 a 或 b 或 c 的所有文件\nrm *[abc]*\n\n# 删除当前目录下文件名中包含 0~9 的所有文件\nrm *[0-9]*\n\n# 删除当前目录下文件扩展名是字母 c 或 h 的所有文件\nrm *.[ch]\n\n# 删除 /tmp 目录下的所有文件及其子目录\nrm -rf /tmp/*\n```\n\n> -f 删除前不提示用户确认，并忽略不存在的文件\n\n> -r 递归地删除目录及其下的内容","source":"_posts/Linux/常用Bash命令整理之操作文件和目录.md","raw":"---\ntitle: 常用Bash命令整理之操作文件和目录\ndate: 2018-10-10 23:10:00\nauthor: blinkfox\ncategories: 软件工具\ntags:\n  - Linux\n---\n\n## 1. touch - 创建文件\n\n`touch`命令就可用于创建、变更和修改文件的时间戳。它是 Linux 操作系统的标准程序。`touch`命令又如下选项：\n\n```bash\n-a: 只改变访问时间 \n-c: 不创建任何文件\n-m: 只改变修改时间\n-r: 使用指定文件的时间替代当前时间\n-t: 使用 [[CC]YY]MMDDhhmm[.ss] 替代当前时间\n```\n\ntouch 命令的常见用法如下：\n\n```bash\n# 创建一个名为 effyl 的新空文件\ntouch effyl\n\n# 同时创建名称分别为 effyl myeffyl lueffyl 的三个文件\ntouch effyl myeffyl lueffyl\n\n# 使用 -a 选项，可以改变或更新文件的最新访问时间，如果文件 effyl 不存在，则新创建一个\ntouch -a effyl\n\n# 使用 -c 选项，可以避免创建一个新文件，并用当前时间更新文件的时间戳\ntouch -c effyl\n\n# 使用 -m 选项，可以只改变文件的修改时间，而访问时间不变\ntouch -m effyl\n\n# 使用 -c 和 -t 选项，来明确设置文件的时间\ntouch -c -t YYMMDDHHMM filename\n\n# 如果想使用文件 myeffyl 的时间戳更新文件 effyl 的时间戳，可以使用 -r 选项\ntouch -r myeffyl effyl\n```\n\n## 2.mkdir - 创建目录\n\n`mkdir`命令用于创建一个新目录。最基本的`mkdir`命令的使用方法如下所示：\n\n```bash\n# 在当前目录下创建一个给定的目录名\nmkdir <dirname>\n\n# 在 backup 中的相对路径创建一个名为 old 的目录\nmkdir backup/old\n\n# 在 backup 中的绝对路径中创建一个名为 old 的目录\nmkdir /home/blinkfox/backup/old\n\n# 使用 -p 选项，会自动创建所有还不存在的父目录\nmkdir -p backup/old\n\n# 使用 -m 选项，可以设置将要创建目录的权限\n# 如：创建一个任何人都有读写访问权限的目录\nmkdir -p -m 777 backup/old\n```\n\n## 3.cp - 复制文件或目录\n\n`cp`命令用于将文件从一个地方复制到另一个地方。原来的文件保持不变，新文件可能保持原名或用一个不同的名字。\n\n使用 cp 命令复制文件和目录的语法有以下几种：\n\n```bash\n# 复制源文件到目标文件\ncp [OPTION] SOURCE DEST\n\n# 复制一个或多个源文件到一个目录\ncp [OPTION] SOURCE... DIRECTORY\n\n# 同上\ncp [OPTION] -t DIRECTORY SOURCE... \n```\n\n常用使用示例如下：\n\n```bash\n# 在当前目录下，创建一个文件 file.txt 的副本，取名为 newfile.txt\ncp file.txt newfile.txt\n\n# 复制当前目录下的 file.txt 文件到 /tmp 目录下\ncp file.txt /tmp\n\n# 复制当前目录下的所有文件到 /tmp 目录下\ncp * /tmp\n\n# 使用 -p 选项，可以使复制一个文件到新文件时，保留源文件的所有者、权限等信息\ncp -p filename /path/to/new/location/myfile\n\n# 使用 -R 或 -r 选项，恶意递归地复制一个目录\n# 即将一个目录及其下的所有文件和子目录都复制到另一个目录\ncp -R * /home/blinkfox/backup\n```\n\n## 4.ln - 链接文件或目录\n\n`ln`命令用于创建软链接或硬链接。使用 -s 选项，可以创建一个软链接：\n\n```bash\n# 在目录 lib 下创建一个软链接 library.so，链接到 /home/blinkfox/src/library.so\nln -s /home/blinkfox/src/library.so /home/blinkfox/lib\n\n# 创建目录的软链接\nln -s /home/blinkfox/src source\n```\n\n## 5. mv - 移动文件或目录\n\n`mv`命令用于将文件和目录从一个位置移到另外一个位置。除了移动文件，`mv`命令还可用于修改文件或目录的名字。\n\nmv 命令的基本语法如下所示：\n\n```bash\nmv SOURCE... DIRECTORY\n```\n\n常用命令如下：\n\n```bash\n# 将当前目录下的文件 source.txt 移到目录 /tmp 下\nmv source.txt /tmp\n\n# 将目录 dir1、dir2 移到目录 dir_dist 下\nmv dir1 dir2 dir_dist\n\n# 将当前目录下的 old.txt 文件更名为 new.txt\nmv old.txt new.txt\n\n# 使用 -i 选项，在重写覆盖目标文件或目录之前给出提示信息\nmv -i old.txt new.txt\n\n# 将当前目录下的所有文件移动到目录 /tmp 下\nmv * /tmp/\n\n# 使用 -i 选项，从 dir1 中移动那些在目标目录中不存在的文件到目标目录\nmv -u dir1/* dir2/\n```\n\n## 6.rm - 删除文件或目录\n\n`rm`命令用于删除指定的文件和目录。其语法如下所示：\n\n```bash\nrm [OPTIONS]... FILE...\n```\n\n`rm`的常用命令如下：\n\n```bash\n# 删除当前目录下的文件 file1.txt、file2.txt、file3.txt\nrm file1.txt file2.txt file3.txt\n\n# 删除当前目录下的所有文件\nrm *\n\n# 删除你当前帐号主目录下的 temp 目录中的所有文件\nrm ~/temp/*\n\n# 使用 -i 选项，可以在删除每个文件或目录前提示用户确认\nrm -i *\n\n# 删除当前目录下所有以\".doc\"结尾的文件\nrm *.doc\n\n# 删除当前目录下所有文件名中包含\"movie\"字符串的文件\nrm *movie*\n\n# 删除当前目录下所有以\"a\"开头的文件\nrm a*\n\n# 删除当前目录下整个文件名（包括扩展名）只有 3 个字符的所有文件\nrm ???\n\n# 删除当前目录下文件扩展名有两个字符的所有文件\nrm *.??\n\n# 删除当前目录下文件名中含有字母 a 或 b 或 c 的所有文件\nrm *[abc]*\n\n# 删除当前目录下文件名中包含 0~9 的所有文件\nrm *[0-9]*\n\n# 删除当前目录下文件扩展名是字母 c 或 h 的所有文件\nrm *.[ch]\n\n# 删除 /tmp 目录下的所有文件及其子目录\nrm -rf /tmp/*\n```\n\n> -f 删除前不提示用户确认，并忽略不存在的文件\n\n> -r 递归地删除目录及其下的内容","slug":"Linux/常用Bash命令整理之操作文件和目录","published":1,"updated":"2024-12-12T16:49:46.412Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27vee000hge9kgcvmcufq","content":"<h2 id=\"1-touch-创建文件\"><a href=\"#1-touch-创建文件\" class=\"headerlink\" title=\"1. touch - 创建文件\"></a>1. touch - 创建文件</h2><p><code>touch</code>命令就可用于创建、变更和修改文件的时间戳。它是 Linux 操作系统的标准程序。<code>touch</code>命令又如下选项：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a: 只改变访问时间 </span><br><span class=\"line\">-c: 不创建任何文件</span><br><span class=\"line\">-m: 只改变修改时间</span><br><span class=\"line\">-r: 使用指定文件的时间替代当前时间</span><br><span class=\"line\">-t: 使用 [[CC]YY]MMDDhhmm[.ss] 替代当前时间</span><br></pre></td></tr></table></figure>\n\n<p>touch 命令的常见用法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个名为 effyl 的新空文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> effyl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时创建名称分别为 effyl myeffyl lueffyl 的三个文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> effyl myeffyl lueffyl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -a 选项，可以改变或更新文件的最新访问时间，如果文件 effyl 不存在，则新创建一个</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> -a effyl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -c 选项，可以避免创建一个新文件，并用当前时间更新文件的时间戳</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> -c effyl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -m 选项，可以只改变文件的修改时间，而访问时间不变</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> -m effyl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -c 和 -t 选项，来明确设置文件的时间</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> -c -t YYMMDDHHMM filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果想使用文件 myeffyl 的时间戳更新文件 effyl 的时间戳，可以使用 -r 选项</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> -r myeffyl effyl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-mkdir-创建目录\"><a href=\"#2-mkdir-创建目录\" class=\"headerlink\" title=\"2.mkdir - 创建目录\"></a>2.mkdir - 创建目录</h2><p><code>mkdir</code>命令用于创建一个新目录。最基本的<code>mkdir</code>命令的使用方法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录下创建一个给定的目录名</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> &lt;<span class=\"built_in\">dirname</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 backup 中的相对路径创建一个名为 old 的目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> backup/old</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 backup 中的绝对路径中创建一个名为 old 的目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /home/blinkfox/backup/old</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -p 选项，会自动创建所有还不存在的父目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p backup/old</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -m 选项，可以设置将要创建目录的权限</span></span><br><span class=\"line\"><span class=\"comment\"># 如：创建一个任何人都有读写访问权限的目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p -m 777 backup/old</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-cp-复制文件或目录\"><a href=\"#3-cp-复制文件或目录\" class=\"headerlink\" title=\"3.cp - 复制文件或目录\"></a>3.cp - 复制文件或目录</h2><p><code>cp</code>命令用于将文件从一个地方复制到另一个地方。原来的文件保持不变，新文件可能保持原名或用一个不同的名字。</p>\n<p>使用 cp 命令复制文件和目录的语法有以下几种：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 复制源文件到目标文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> [OPTION] SOURCE DEST</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制一个或多个源文件到一个目录</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> [OPTION] SOURCE... DIRECTORY</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同上</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> [OPTION] -t DIRECTORY SOURCE... </span><br></pre></td></tr></table></figure>\n\n<p>常用使用示例如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录下，创建一个文件 file.txt 的副本，取名为 newfile.txt</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> file.txt newfile.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制当前目录下的 file.txt 文件到 /tmp 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> file.txt /tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制当前目录下的所有文件到 /tmp 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> * /tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -p 选项，可以使复制一个文件到新文件时，保留源文件的所有者、权限等信息</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -p filename /path/to/new/location/myfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -R 或 -r 选项，恶意递归地复制一个目录</span></span><br><span class=\"line\"><span class=\"comment\"># 即将一个目录及其下的所有文件和子目录都复制到另一个目录</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -R * /home/blinkfox/backup</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-ln-链接文件或目录\"><a href=\"#4-ln-链接文件或目录\" class=\"headerlink\" title=\"4.ln - 链接文件或目录\"></a>4.ln - 链接文件或目录</h2><p><code>ln</code>命令用于创建软链接或硬链接。使用 -s 选项，可以创建一个软链接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在目录 lib 下创建一个软链接 library.so，链接到 /home/blinkfox/src/library.so</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /home/blinkfox/src/library.so /home/blinkfox/lib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建目录的软链接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /home/blinkfox/src <span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-mv-移动文件或目录\"><a href=\"#5-mv-移动文件或目录\" class=\"headerlink\" title=\"5. mv - 移动文件或目录\"></a>5. mv - 移动文件或目录</h2><p><code>mv</code>命令用于将文件和目录从一个位置移到另外一个位置。除了移动文件，<code>mv</code>命令还可用于修改文件或目录的名字。</p>\n<p>mv 命令的基本语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> SOURCE... DIRECTORY</span><br></pre></td></tr></table></figure>\n\n<p>常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将当前目录下的文件 source.txt 移到目录 /tmp 下</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> source.txt /tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将目录 dir1、dir2 移到目录 dir_dist 下</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> dir1 dir2 dir_dist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的 old.txt 文件更名为 new.txt</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> old.txt new.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -i 选项，在重写覆盖目标文件或目录之前给出提示信息</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> -i old.txt new.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的所有文件移动到目录 /tmp 下</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> * /tmp/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -i 选项，从 dir1 中移动那些在目标目录中不存在的文件到目标目录</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> -u dir1/* dir2/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-rm-删除文件或目录\"><a href=\"#6-rm-删除文件或目录\" class=\"headerlink\" title=\"6.rm - 删除文件或目录\"></a>6.rm - 删除文件或目录</h2><p><code>rm</code>命令用于删除指定的文件和目录。其语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> [OPTIONS]... FILE...</span><br></pre></td></tr></table></figure>\n\n<p><code>rm</code>的常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除当前目录下的文件 file1.txt、file2.txt、file3.txt</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> file1.txt file2.txt file3.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除你当前帐号主目录下的 temp 目录中的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> ~/temp/*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -i 选项，可以在删除每个文件或目录前提示用户确认</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -i *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下所有以&quot;.doc&quot;结尾的文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *.doc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下所有文件名中包含&quot;movie&quot;字符串的文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *movie*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下所有以&quot;a&quot;开头的文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> a*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下整个文件名（包括扩展名）只有 3 个字符的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> ???</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下文件扩展名有两个字符的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *.??</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下文件名中含有字母 a 或 b 或 c 的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *[abc]*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下文件名中包含 0~9 的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *[0-9]*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下文件扩展名是字母 c 或 h 的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *.[ch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除 /tmp 目录下的所有文件及其子目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /tmp/*</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-f 删除前不提示用户确认，并忽略不存在的文件</p>\n</blockquote>\n<blockquote>\n<p>-r 递归地删除目录及其下的内容</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"1-touch-创建文件\"><a href=\"#1-touch-创建文件\" class=\"headerlink\" title=\"1. touch - 创建文件\"></a>1. touch - 创建文件</h2><p><code>touch</code>命令就可用于创建、变更和修改文件的时间戳。它是 Linux 操作系统的标准程序。<code>touch</code>命令又如下选项：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-a: 只改变访问时间 </span><br><span class=\"line\">-c: 不创建任何文件</span><br><span class=\"line\">-m: 只改变修改时间</span><br><span class=\"line\">-r: 使用指定文件的时间替代当前时间</span><br><span class=\"line\">-t: 使用 [[CC]YY]MMDDhhmm[.ss] 替代当前时间</span><br></pre></td></tr></table></figure>\n\n<p>touch 命令的常见用法如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个名为 effyl 的新空文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> effyl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时创建名称分别为 effyl myeffyl lueffyl 的三个文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> effyl myeffyl lueffyl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -a 选项，可以改变或更新文件的最新访问时间，如果文件 effyl 不存在，则新创建一个</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> -a effyl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -c 选项，可以避免创建一个新文件，并用当前时间更新文件的时间戳</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> -c effyl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -m 选项，可以只改变文件的修改时间，而访问时间不变</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> -m effyl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -c 和 -t 选项，来明确设置文件的时间</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> -c -t YYMMDDHHMM filename</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果想使用文件 myeffyl 的时间戳更新文件 effyl 的时间戳，可以使用 -r 选项</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> -r myeffyl effyl</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-mkdir-创建目录\"><a href=\"#2-mkdir-创建目录\" class=\"headerlink\" title=\"2.mkdir - 创建目录\"></a>2.mkdir - 创建目录</h2><p><code>mkdir</code>命令用于创建一个新目录。最基本的<code>mkdir</code>命令的使用方法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录下创建一个给定的目录名</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> &lt;<span class=\"built_in\">dirname</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 backup 中的相对路径创建一个名为 old 的目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> backup/old</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 backup 中的绝对路径中创建一个名为 old 的目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> /home/blinkfox/backup/old</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -p 选项，会自动创建所有还不存在的父目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p backup/old</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -m 选项，可以设置将要创建目录的权限</span></span><br><span class=\"line\"><span class=\"comment\"># 如：创建一个任何人都有读写访问权限的目录</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p -m 777 backup/old</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-cp-复制文件或目录\"><a href=\"#3-cp-复制文件或目录\" class=\"headerlink\" title=\"3.cp - 复制文件或目录\"></a>3.cp - 复制文件或目录</h2><p><code>cp</code>命令用于将文件从一个地方复制到另一个地方。原来的文件保持不变，新文件可能保持原名或用一个不同的名字。</p>\n<p>使用 cp 命令复制文件和目录的语法有以下几种：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 复制源文件到目标文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> [OPTION] SOURCE DEST</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制一个或多个源文件到一个目录</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> [OPTION] SOURCE... DIRECTORY</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同上</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> [OPTION] -t DIRECTORY SOURCE... </span><br></pre></td></tr></table></figure>\n\n<p>常用使用示例如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在当前目录下，创建一个文件 file.txt 的副本，取名为 newfile.txt</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> file.txt newfile.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制当前目录下的 file.txt 文件到 /tmp 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> file.txt /tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 复制当前目录下的所有文件到 /tmp 目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> * /tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -p 选项，可以使复制一个文件到新文件时，保留源文件的所有者、权限等信息</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -p filename /path/to/new/location/myfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -R 或 -r 选项，恶意递归地复制一个目录</span></span><br><span class=\"line\"><span class=\"comment\"># 即将一个目录及其下的所有文件和子目录都复制到另一个目录</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> -R * /home/blinkfox/backup</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-ln-链接文件或目录\"><a href=\"#4-ln-链接文件或目录\" class=\"headerlink\" title=\"4.ln - 链接文件或目录\"></a>4.ln - 链接文件或目录</h2><p><code>ln</code>命令用于创建软链接或硬链接。使用 -s 选项，可以创建一个软链接：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在目录 lib 下创建一个软链接 library.so，链接到 /home/blinkfox/src/library.so</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /home/blinkfox/src/library.so /home/blinkfox/lib</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建目录的软链接</span></span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /home/blinkfox/src <span class=\"built_in\">source</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-mv-移动文件或目录\"><a href=\"#5-mv-移动文件或目录\" class=\"headerlink\" title=\"5. mv - 移动文件或目录\"></a>5. mv - 移动文件或目录</h2><p><code>mv</code>命令用于将文件和目录从一个位置移到另外一个位置。除了移动文件，<code>mv</code>命令还可用于修改文件或目录的名字。</p>\n<p>mv 命令的基本语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> SOURCE... DIRECTORY</span><br></pre></td></tr></table></figure>\n\n<p>常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将当前目录下的文件 source.txt 移到目录 /tmp 下</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> source.txt /tmp</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将目录 dir1、dir2 移到目录 dir_dist 下</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> dir1 dir2 dir_dist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的 old.txt 文件更名为 new.txt</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> old.txt new.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -i 选项，在重写覆盖目标文件或目录之前给出提示信息</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> -i old.txt new.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的所有文件移动到目录 /tmp 下</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> * /tmp/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -i 选项，从 dir1 中移动那些在目标目录中不存在的文件到目标目录</span></span><br><span class=\"line\"><span class=\"built_in\">mv</span> -u dir1/* dir2/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-rm-删除文件或目录\"><a href=\"#6-rm-删除文件或目录\" class=\"headerlink\" title=\"6.rm - 删除文件或目录\"></a>6.rm - 删除文件或目录</h2><p><code>rm</code>命令用于删除指定的文件和目录。其语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> [OPTIONS]... FILE...</span><br></pre></td></tr></table></figure>\n\n<p><code>rm</code>的常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 删除当前目录下的文件 file1.txt、file2.txt、file3.txt</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> file1.txt file2.txt file3.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除你当前帐号主目录下的 temp 目录中的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> ~/temp/*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -i 选项，可以在删除每个文件或目录前提示用户确认</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -i *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下所有以&quot;.doc&quot;结尾的文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *.doc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下所有文件名中包含&quot;movie&quot;字符串的文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *movie*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下所有以&quot;a&quot;开头的文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> a*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下整个文件名（包括扩展名）只有 3 个字符的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> ???</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下文件扩展名有两个字符的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *.??</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下文件名中含有字母 a 或 b 或 c 的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *[abc]*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下文件名中包含 0~9 的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *[0-9]*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除当前目录下文件扩展名是字母 c 或 h 的所有文件</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> *.[ch]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除 /tmp 目录下的所有文件及其子目录</span></span><br><span class=\"line\"><span class=\"built_in\">rm</span> -rf /tmp/*</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>-f 删除前不提示用户确认，并忽略不存在的文件</p>\n</blockquote>\n<blockquote>\n<p>-r 递归地删除目录及其下的内容</p>\n</blockquote>\n"},{"title":"常用Bash命令整理之文本处理","date":"2018-10-11T14:05:00.000Z","author":"blinkfox","img":"https://statics.sh1a.qingstor.com/2018/10/11/bash.jpg","_content":"\n## 1. sort - 文本排序\n\n`sort`命令用于将文本文件的行排序。默认情况下，`sort`命令是按照字符串的字母顺序排序。\n\nsort 的常用命令如下：\n\n```bash\n# 将文本内容按字母顺序排序\nsort example.txt\n\n# 使用 -u 选项，移除所有重复行后排序\nsort -u example.txt\n\n# 使用 -n 选项，将令数字按数值的大小排序\nsort -n example.txt\n\n# 使用 -r 选项，以倒序方式排序\nsort -n -r example.txt\n\n# 同时将 file1、file2 的内容排序\nsort file1 file2\n```\n\n## 2.uniq - 文本去重\n\n`uniq`命令用于移除或发现文件中重复的条目。\n\n```bash\n# 它将移除文件中重复的行并显示单一行\nuniq example.txt\n\n# 可以统计重复行出现的次数\nuniq -c example.txt\n\n# 使用 -d 选项，只显示文件中有重复的行并只显示一次\nuniq -d example.txt\n\n# 使用 -D 选项，显示文件中所有重复的行\nuniq -D example.txt\n\n# 使用 -u 选项，只显示文件中不重复的行\nuniq -u example.txt\n\n# 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复\nuniq -w 3 example.txt\n\n# 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复\nuniq -s 3 example.txt\n\n# 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复\nuniq -f 1 example.txt\n```\n\n## 3.tr - 替换或删除字符\n\n`tr`命令主要用于删除文件中控制字符或进行字符转换。使用`tr`时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。`tr`刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。\n\n`tr`命令的语法如下所示：\n\n```bash\ntr [OPTION]... SET1 [SET2]\n```\n\n常用命令示例：\n\n```bash\n# 若要将大括号转换为小括号\ntr '{}' '()' < textfile > newfile\n\n# 若要将大括号转换成方括号\ntr '{}' '\\[]' < textfile > newfile\n\n# 若要将小写字符转换成大写，请输入：\ntr 'a-z' 'A-Z' < textfile > newfile\n\n# 若要创建一个文件中的单词列表\ntr -cs '[:lower:][:upper:]' '[\\n*]' < textfile > newfile\n\n# 若要从某个文件中删除所有空字符\ntr -d '\\0' < textfile > newfile\n\n# 若要用单独的换行替换每一序列的一个或多个换行，请输入：\ntr -s '\\n' < textfile > newfile\n\n# 要以单个“#”字符替换 <space> 字符类中的每个字符序列\ntr -s '[:space:]' '[#*]'\n```\n\n## 4.grep - 查找字符串\n\n`grep`命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下，`grep`命令只显示匹配的行。\n\n`grep`命令的语法如下所示：\n\n```bash\ngrep [OPTION]... PATTERN [FILE]...\ngrep [OPTION]... [-e PATTERN | -f FILE] [FILE]...\n```\n\n```bash\n# `grep`命令查找文件/etc/passwd 中帐号 blinkfox 的信息\ngrep blinkfox /etc/passwd\n\n# 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写\ngrep -i blinkfox /etc/passwd\n\n# 使用 -r 选项，可以递归搜索指定目录下的所有文件\ngrep -r blinkfox /etc/\n\n# 使用 -w 选项，只匹配包含指定单词的行\ngrep -w blinkfox /etc/\n\n# 使用 -c 选项，报告文件或文本中模式被匹配的次数\ngrep -c blinkfox /etc/passwd\n\n# 使用 -n 选项，显示每一个匹配的行的行号\ngrep -n blinkfox /etc/passwd\n\n# 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行\ngrep -v blinkfox /etc/passwd\n\n# 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出\ngrep --color blinkfox /etc/passwd\n```\n\n## 5.diff - 比较两个文件\n\n`diff`命令用于比较两个文件，并找出它们之间的不同。`diff`命令的语法如下所示：\n\n```bash\ndiff [OPTION]... from-file to-file\n```\n\n常用使用方式如下：\n\n```bash\n# 比较两个文件\ndiff nsswitch.conf nsswitch.conf.org\n\n# 使用 -w 选项，比较时忽略空格\ndiff -w nsswitch.conf nsswitch.conf.org\n\n# 使用 -y 选项，以并排的格式输出两个文件的比较结果\ndiff -y nsswitch.conf nsswitch.conf.org\n\n使用 -c 选项，以上下对比的格式输出两个文件的比较结果\ndiff -c nsswitch.conf nsswitch.conf.org\n```","source":"_posts/Linux/常用Bash命令整理之文本处理.md","raw":"---\ntitle: 常用Bash命令整理之文本处理\ndate: 2018-10-11 22:05:00\nauthor: blinkfox\nimg: https://statics.sh1a.qingstor.com/2018/10/11/bash.jpg\ncategories: 软件工具\ntags:\n  - Linux\n---\n\n## 1. sort - 文本排序\n\n`sort`命令用于将文本文件的行排序。默认情况下，`sort`命令是按照字符串的字母顺序排序。\n\nsort 的常用命令如下：\n\n```bash\n# 将文本内容按字母顺序排序\nsort example.txt\n\n# 使用 -u 选项，移除所有重复行后排序\nsort -u example.txt\n\n# 使用 -n 选项，将令数字按数值的大小排序\nsort -n example.txt\n\n# 使用 -r 选项，以倒序方式排序\nsort -n -r example.txt\n\n# 同时将 file1、file2 的内容排序\nsort file1 file2\n```\n\n## 2.uniq - 文本去重\n\n`uniq`命令用于移除或发现文件中重复的条目。\n\n```bash\n# 它将移除文件中重复的行并显示单一行\nuniq example.txt\n\n# 可以统计重复行出现的次数\nuniq -c example.txt\n\n# 使用 -d 选项，只显示文件中有重复的行并只显示一次\nuniq -d example.txt\n\n# 使用 -D 选项，显示文件中所有重复的行\nuniq -D example.txt\n\n# 使用 -u 选项，只显示文件中不重复的行\nuniq -u example.txt\n\n# 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复\nuniq -w 3 example.txt\n\n# 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复\nuniq -s 3 example.txt\n\n# 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复\nuniq -f 1 example.txt\n```\n\n## 3.tr - 替换或删除字符\n\n`tr`命令主要用于删除文件中控制字符或进行字符转换。使用`tr`时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。`tr`刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。\n\n`tr`命令的语法如下所示：\n\n```bash\ntr [OPTION]... SET1 [SET2]\n```\n\n常用命令示例：\n\n```bash\n# 若要将大括号转换为小括号\ntr '{}' '()' < textfile > newfile\n\n# 若要将大括号转换成方括号\ntr '{}' '\\[]' < textfile > newfile\n\n# 若要将小写字符转换成大写，请输入：\ntr 'a-z' 'A-Z' < textfile > newfile\n\n# 若要创建一个文件中的单词列表\ntr -cs '[:lower:][:upper:]' '[\\n*]' < textfile > newfile\n\n# 若要从某个文件中删除所有空字符\ntr -d '\\0' < textfile > newfile\n\n# 若要用单独的换行替换每一序列的一个或多个换行，请输入：\ntr -s '\\n' < textfile > newfile\n\n# 要以单个“#”字符替换 <space> 字符类中的每个字符序列\ntr -s '[:space:]' '[#*]'\n```\n\n## 4.grep - 查找字符串\n\n`grep`命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下，`grep`命令只显示匹配的行。\n\n`grep`命令的语法如下所示：\n\n```bash\ngrep [OPTION]... PATTERN [FILE]...\ngrep [OPTION]... [-e PATTERN | -f FILE] [FILE]...\n```\n\n```bash\n# `grep`命令查找文件/etc/passwd 中帐号 blinkfox 的信息\ngrep blinkfox /etc/passwd\n\n# 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写\ngrep -i blinkfox /etc/passwd\n\n# 使用 -r 选项，可以递归搜索指定目录下的所有文件\ngrep -r blinkfox /etc/\n\n# 使用 -w 选项，只匹配包含指定单词的行\ngrep -w blinkfox /etc/\n\n# 使用 -c 选项，报告文件或文本中模式被匹配的次数\ngrep -c blinkfox /etc/passwd\n\n# 使用 -n 选项，显示每一个匹配的行的行号\ngrep -n blinkfox /etc/passwd\n\n# 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行\ngrep -v blinkfox /etc/passwd\n\n# 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出\ngrep --color blinkfox /etc/passwd\n```\n\n## 5.diff - 比较两个文件\n\n`diff`命令用于比较两个文件，并找出它们之间的不同。`diff`命令的语法如下所示：\n\n```bash\ndiff [OPTION]... from-file to-file\n```\n\n常用使用方式如下：\n\n```bash\n# 比较两个文件\ndiff nsswitch.conf nsswitch.conf.org\n\n# 使用 -w 选项，比较时忽略空格\ndiff -w nsswitch.conf nsswitch.conf.org\n\n# 使用 -y 选项，以并排的格式输出两个文件的比较结果\ndiff -y nsswitch.conf nsswitch.conf.org\n\n使用 -c 选项，以上下对比的格式输出两个文件的比较结果\ndiff -c nsswitch.conf nsswitch.conf.org\n```","slug":"Linux/常用Bash命令整理之文本处理","published":1,"updated":"2024-12-12T16:49:46.412Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27vef000ige9kcxa3bzjf","content":"<h2 id=\"1-sort-文本排序\"><a href=\"#1-sort-文本排序\" class=\"headerlink\" title=\"1. sort - 文本排序\"></a>1. sort - 文本排序</h2><p><code>sort</code>命令用于将文本文件的行排序。默认情况下，<code>sort</code>命令是按照字符串的字母顺序排序。</p>\n<p>sort 的常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文本内容按字母顺序排序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -u 选项，移除所有重复行后排序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> -u example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -n 选项，将令数字按数值的大小排序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> -n example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -r 选项，以倒序方式排序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> -n -r example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时将 file1、file2 的内容排序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> file1 file2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-uniq-文本去重\"><a href=\"#2-uniq-文本去重\" class=\"headerlink\" title=\"2.uniq - 文本去重\"></a>2.uniq - 文本去重</h2><p><code>uniq</code>命令用于移除或发现文件中重复的条目。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 它将移除文件中重复的行并显示单一行</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以统计重复行出现的次数</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -c example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -d 选项，只显示文件中有重复的行并只显示一次</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -d example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -D 选项，显示文件中所有重复的行</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -D example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -u 选项，只显示文件中不重复的行</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -u example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -w 3 example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -s 3 example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -f 1 example.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-tr-替换或删除字符\"><a href=\"#3-tr-替换或删除字符\" class=\"headerlink\" title=\"3.tr - 替换或删除字符\"></a>3.tr - 替换或删除字符</h2><p><code>tr</code>命令主要用于删除文件中控制字符或进行字符转换。使用<code>tr</code>时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。<code>tr</code>刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。</p>\n<p><code>tr</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tr</span> [OPTION]... SET1 [SET2]</span><br></pre></td></tr></table></figure>\n\n<p>常用命令示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 若要将大括号转换为小括号</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> <span class=\"string\">&#x27;()&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若要将大括号转换成方括号</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> <span class=\"string\">&#x27;\\[]&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若要将小写字符转换成大写，请输入：</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> <span class=\"string\">&#x27;a-z&#x27;</span> <span class=\"string\">&#x27;A-Z&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若要创建一个文件中的单词列表</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> -cs <span class=\"string\">&#x27;[:lower:][:upper:]&#x27;</span> <span class=\"string\">&#x27;[\\n*]&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若要从某个文件中删除所有空字符</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;\\0&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若要用单独的换行替换每一序列的一个或多个换行，请输入：</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> -s <span class=\"string\">&#x27;\\n&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要以单个“#”字符替换 &lt;space&gt; 字符类中的每个字符序列</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> -s <span class=\"string\">&#x27;[:space:]&#x27;</span> <span class=\"string\">&#x27;[#*]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-grep-查找字符串\"><a href=\"#4-grep-查找字符串\" class=\"headerlink\" title=\"4.grep - 查找字符串\"></a>4.grep - 查找字符串</h2><p><code>grep</code>命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下，<code>grep</code>命令只显示匹配的行。</p>\n<p><code>grep</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [OPTION]... PATTERN [FILE]...</span><br><span class=\"line\">grep [OPTION]... [-e PATTERN | -f FILE] [FILE]...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># `grep`命令查找文件/etc/passwd 中帐号 blinkfox 的信息</span></span><br><span class=\"line\">grep blinkfox /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写</span></span><br><span class=\"line\">grep -i blinkfox /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -r 选项，可以递归搜索指定目录下的所有文件</span></span><br><span class=\"line\">grep -r blinkfox /etc/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -w 选项，只匹配包含指定单词的行</span></span><br><span class=\"line\">grep -w blinkfox /etc/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -c 选项，报告文件或文本中模式被匹配的次数</span></span><br><span class=\"line\">grep -c blinkfox /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -n 选项，显示每一个匹配的行的行号</span></span><br><span class=\"line\">grep -n blinkfox /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行</span></span><br><span class=\"line\">grep -v blinkfox /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出</span></span><br><span class=\"line\">grep --color blinkfox /etc/passwd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-diff-比较两个文件\"><a href=\"#5-diff-比较两个文件\" class=\"headerlink\" title=\"5.diff - 比较两个文件\"></a>5.diff - 比较两个文件</h2><p><code>diff</code>命令用于比较两个文件，并找出它们之间的不同。<code>diff</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff [OPTION]... from-file to-file</span><br></pre></td></tr></table></figure>\n\n<p>常用使用方式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比较两个文件</span></span><br><span class=\"line\">diff nsswitch.conf nsswitch.conf.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -w 选项，比较时忽略空格</span></span><br><span class=\"line\">diff -w nsswitch.conf nsswitch.conf.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -y 选项，以并排的格式输出两个文件的比较结果</span></span><br><span class=\"line\">diff -y nsswitch.conf nsswitch.conf.org</span><br><span class=\"line\"></span><br><span class=\"line\">使用 -c 选项，以上下对比的格式输出两个文件的比较结果</span><br><span class=\"line\">diff -c nsswitch.conf nsswitch.conf.org</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"1-sort-文本排序\"><a href=\"#1-sort-文本排序\" class=\"headerlink\" title=\"1. sort - 文本排序\"></a>1. sort - 文本排序</h2><p><code>sort</code>命令用于将文本文件的行排序。默认情况下，<code>sort</code>命令是按照字符串的字母顺序排序。</p>\n<p>sort 的常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 将文本内容按字母顺序排序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -u 选项，移除所有重复行后排序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> -u example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -n 选项，将令数字按数值的大小排序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> -n example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -r 选项，以倒序方式排序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> -n -r example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 同时将 file1、file2 的内容排序</span></span><br><span class=\"line\"><span class=\"built_in\">sort</span> file1 file2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-uniq-文本去重\"><a href=\"#2-uniq-文本去重\" class=\"headerlink\" title=\"2.uniq - 文本去重\"></a>2.uniq - 文本去重</h2><p><code>uniq</code>命令用于移除或发现文件中重复的条目。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 它将移除文件中重复的行并显示单一行</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以统计重复行出现的次数</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -c example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -d 选项，只显示文件中有重复的行并只显示一次</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -d example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -D 选项，显示文件中所有重复的行</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -D example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -u 选项，只显示文件中不重复的行</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -u example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -w 3 example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -s 3 example.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复</span></span><br><span class=\"line\"><span class=\"built_in\">uniq</span> -f 1 example.txt</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-tr-替换或删除字符\"><a href=\"#3-tr-替换或删除字符\" class=\"headerlink\" title=\"3.tr - 替换或删除字符\"></a>3.tr - 替换或删除字符</h2><p><code>tr</code>命令主要用于删除文件中控制字符或进行字符转换。使用<code>tr</code>时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。<code>tr</code>刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。</p>\n<p><code>tr</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tr</span> [OPTION]... SET1 [SET2]</span><br></pre></td></tr></table></figure>\n\n<p>常用命令示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 若要将大括号转换为小括号</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> <span class=\"string\">&#x27;()&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若要将大括号转换成方括号</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> <span class=\"string\">&#x27;&#123;&#125;&#x27;</span> <span class=\"string\">&#x27;\\[]&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若要将小写字符转换成大写，请输入：</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> <span class=\"string\">&#x27;a-z&#x27;</span> <span class=\"string\">&#x27;A-Z&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若要创建一个文件中的单词列表</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> -cs <span class=\"string\">&#x27;[:lower:][:upper:]&#x27;</span> <span class=\"string\">&#x27;[\\n*]&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若要从某个文件中删除所有空字符</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> -d <span class=\"string\">&#x27;\\0&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 若要用单独的换行替换每一序列的一个或多个换行，请输入：</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> -s <span class=\"string\">&#x27;\\n&#x27;</span> &lt; textfile &gt; newfile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 要以单个“#”字符替换 &lt;space&gt; 字符类中的每个字符序列</span></span><br><span class=\"line\"><span class=\"built_in\">tr</span> -s <span class=\"string\">&#x27;[:space:]&#x27;</span> <span class=\"string\">&#x27;[#*]&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-grep-查找字符串\"><a href=\"#4-grep-查找字符串\" class=\"headerlink\" title=\"4.grep - 查找字符串\"></a>4.grep - 查找字符串</h2><p><code>grep</code>命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下，<code>grep</code>命令只显示匹配的行。</p>\n<p><code>grep</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep [OPTION]... PATTERN [FILE]...</span><br><span class=\"line\">grep [OPTION]... [-e PATTERN | -f FILE] [FILE]...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># `grep`命令查找文件/etc/passwd 中帐号 blinkfox 的信息</span></span><br><span class=\"line\">grep blinkfox /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写</span></span><br><span class=\"line\">grep -i blinkfox /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -r 选项，可以递归搜索指定目录下的所有文件</span></span><br><span class=\"line\">grep -r blinkfox /etc/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -w 选项，只匹配包含指定单词的行</span></span><br><span class=\"line\">grep -w blinkfox /etc/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -c 选项，报告文件或文本中模式被匹配的次数</span></span><br><span class=\"line\">grep -c blinkfox /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -n 选项，显示每一个匹配的行的行号</span></span><br><span class=\"line\">grep -n blinkfox /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行</span></span><br><span class=\"line\">grep -v blinkfox /etc/passwd</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出</span></span><br><span class=\"line\">grep --color blinkfox /etc/passwd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-diff-比较两个文件\"><a href=\"#5-diff-比较两个文件\" class=\"headerlink\" title=\"5.diff - 比较两个文件\"></a>5.diff - 比较两个文件</h2><p><code>diff</code>命令用于比较两个文件，并找出它们之间的不同。<code>diff</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff [OPTION]... from-file to-file</span><br></pre></td></tr></table></figure>\n\n<p>常用使用方式如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 比较两个文件</span></span><br><span class=\"line\">diff nsswitch.conf nsswitch.conf.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -w 选项，比较时忽略空格</span></span><br><span class=\"line\">diff -w nsswitch.conf nsswitch.conf.org</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用 -y 选项，以并排的格式输出两个文件的比较结果</span></span><br><span class=\"line\">diff -y nsswitch.conf nsswitch.conf.org</span><br><span class=\"line\"></span><br><span class=\"line\">使用 -c 选项，以上下对比的格式输出两个文件的比较结果</span><br><span class=\"line\">diff -c nsswitch.conf nsswitch.conf.org</span><br></pre></td></tr></table></figure>"},{"title":"常用Bash命令整理之查看文件和目录","date":"2018-10-09T14:45:00.000Z","author":"blinkfox","img":"https://statics.sh1a.qingstor.com/2018/10/09/linux.jpg","_content":"\n## 1. ls - 列出文件名和目录\n\n`ls`命令是`Linux`中最常用的命令之一，其作用就是列出文件名和目录。在命令行提示符下，直接输入`ls`命令，不带任何选项，将列出当前目录下所有文件和目录，但不会显示详细的信息，比如，文件类型、大小、修改日期和时间、权限等。\n\n以下便是`ls`命令及其选项的作用说明：\n\n```bash\n# 仅列出当前目录下所有文件和目录\nls\n\n# 每行显示一条记录，每条记录包括文件类型、大小、修改日期和时间、权限等\nls -l\n\n# 将文件大小显示符合人类阅读习惯的格式\nls -lh\n\n# 将使用不同的特殊字符归类不同的文件类型\nls -F\n\n# 以长列表格式列出某个目录的信息\nls -ld /var/log\n\n# 将递归地列出子目录的内容\nls -R /etc/sysconfig/\n\n# 以长列表格式按文件或目录的修改时间倒序地列出文件和目录\nls -ltr\n\n# 以长列表格式按文件大小顺序列出文件和目录\nls -ls\n\n# 列出包括隐藏文件或目录在内的所有文件和目录，包括“.”（当前目录）和“..”（父目录）\nls -a\n\n# 列出包括隐藏文件或目录在内的所有文件和目录，不包括“.”（当前目录）和“..”（父目录）\nls -A\n\n输出的内容类似于-l选项，指示显示uid和gid，替代显示所有者和用户组\nls -n\n```\n\n## 2. cat - 连接显示文件内容\n\n`cat` 命令也是Linux系统中最常用的命令之一。`cat`命令让我们可以看看文件的内容、连接文件、创建一个或多个文件和重定向输出到终端或文件。\n\n`cat`命令的语法如下所示：\n\n```bash\ncat [OPTION] [FILE]...\n```\n\n`cat`常用命令如下：\n\n```bash\n# 使用 cat 命令查看文件 /etc/group 的内容\ncat /etc/group\n\n# 显示多个文件的内容\ncat /etc/redhat-release /etc/issue\n\n# -n 选项，可以显示文件内容的行号\ncat -n /etc/fstab\n\n# -b 选项和 -n 选项类似，但只标识非空白行的行号\ncat -b /etc/fstab\n\n# -e 选项，将在每一行的结尾显示“$”字符\ncat -e /etc/fstab\n```\n\n> 当你只输入 cat 命令，而没有任何参数时，它只是接收标准输入的内容并在标准输出中显示。所以你在输入一行内容并回车后，会在接下来的一行显示相同的内容。你也可以重定向标准输出到一个新文件。\n\n## 3.less、more - 分屏显示文件\n\n`more`命令在你使用小的xterm窗口时，或是想不使用文本编辑器而只是简单地阅读一个文件时是很有用的。more命令是一个用于一次翻阅一整屏文件的过滤器。\n\n```bash\n# 查看一个文件，自动清空屏幕并显示文件开头部分\nmore /etc/inittab\n\n# 指定一次显示num行\nmore -num /etc/inittab\n```\n\n与`more`命令相比，我个人更喜欢`less`命令来查看文件。`less`命令与`more`命令类似，但`less`命令向前和向后翻页都支持，而且`less`命令不需要在查看前加载整个文件，即`less`命令查看文件更快速。\n\n`less`常用命令参数如下：\n\n```bash\n-b  <缓冲区大小> 设置缓冲区的大小\n-e  当文件显示结束后，自动离开\n-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件\n-g  只标志最后搜索的关键词\n-i  忽略搜索时的大小写\n-m  显示类似more命令的百分比\n-N  显示每行的行号\n-o  <文件名> 将less 输出的内容在指定文件中保存起来\n-Q  不使用警告音\n-s  显示连续空行为一行\n-S  行过长时间将超出部分舍弃\n-x  <数字> 将“tab”键显示为规定的数字空格\n/字符串：向下搜索“字符串”的功能\n?字符串：向上搜索“字符串”的功能\nn： 重复前一个搜索（与 / 或 ? 有关）\nN： 反向重复前一个搜索（与 / 或 ? 有关）\nb  向后翻一页\nd  向后翻半页\nh  显示帮助界面\nQ  退出less 命令\nu  向前滚动半页\ny  向前滚动一行\n空格键 滚动一行\n回车键 滚动一页\n[pagedown]： 向下翻动一页\n[pageup]：   向上翻动一页\n```\n\n## 4.head - 显示文件头部\n\n`head`命令用于打印指定输入的开头部分内容。默认情况下，打印每个指定输入的前10行内容。\n\n使用`-n`选项可以指定打印文件的前N行：\n\n```bash\n# 指定打印文件的前5行\nhead -n 5 /etc/inittab\n（或）head -5 /etc/inittab\n\n# 打印文件的前N个字节的数据\nhead -c 10 /etc/inittab\n```\n\n## 5.tail - 显示文件尾部\n\n`tail`命令和`head`命令相反，它打印指定输入的结尾部分的内容。默认情况下，它打印指定输入的最后10行内容。\n\n使用`-n`选项可以指定打印文件的最后N行：\n\n```bash\n# 指定打印文件的后10行\ntail -n 10 /etc/inittab\ntail -10 /etc/inittab\n\n# 即时打印文件中新写入的行\ntail -f /var/log/messages\n\n# --retry选项表示持续尝试打开某个文件，当你想打开一个稍后才会创建或即使不可用的文件\ntail -f /tmp/debug.log --retry\n```\n\n## 6.file - 查看文件类型\n\n`file`命令用于接收一个文件作为参数并执行某些测试，已确定正确的文件类型。\n\n```bash\n# 查看文件类型\nfile /etc/inittab\n\n# 可以MIME类型的格式显示文件类型的信息\nfile -i  /etc/inittab\n\n# 使用-N 选项，输出的队列可以以在文件名之后无空白填充的形式显示\nfile -N *\n```\n\n## 7.wc - 查看文件统计信息\n\n`wc`命令用于查看文件的行数、单词数和字符数等信息。语法类似如下所示：\n\n```bash\nwc filename\nX Y Z /etc/inittab\n```\n\n其中X表示行数，Y表示单词数，Z表示字节数，filename表示文件名。\n\n```bash\n# -l选项，可以只统计文件的行数信息\nwc -l /etc/inittab\n\n# -w选项，可以只统计文件的单词数信息\nwc -w /etc/inittab\n\n# -c选项，可以只统计文件的字节数信息\nwc -c /etc/inittab\n\n# -L选项，可以只统计文件中最长的行的长度\nwc -L /etc/inittab\n```\n\n## 8.find - 查找文件或目录\n\n`find`命令用于根据你指定的参数搜索和定位文件和目录的列表。`find`命令可以在多种情况下使用，比如你可以通过权限、用户、用户组、文件类型、日期、大小和其他可能的条件来查找文件。\n\n`find`命令常用使用和说明如下：\n\n```bash\n# 查找指定目录下的某个文件\nfind /etc/ -name inittab\n\n# 在当前目录下查找名称为 inittab 的文件\nfind . -name inittab\n\n# 在当前目录下，文件不区分大小写是example的所有文件\nfind . -iname example\n\n# 找出当前目录下所有以 sh 结尾的文件\nfind . -type f -name \"*.sh\"\n\n# 找出当前目录下，文件权限是 777 的所有文件\nfind . -type f -perm 777\n\n# 找出当前目录下，文件权限不是 777 的所有文件\nfind . -type f ! -perm 777\n\n# 找出当前目录下所有只读文件\nfind . -type f ! -perm /a+w\n\n# 找出你帐号主目录下的所有可执行文件\nfind ~ -type f -perm /a+w\n\n# 找出 /tmp 目录下的.log文件并将其删除：\nfind /tmp/ -type f -name \"*.log\" -exec rm -f {} \\;\n\n# 找出当前目录下的所有空文件\nfind . -type f -empty\n\n# 找出当前目录下的所有空目录\nfind . -type d -empty\n\n# 找出 /tmp 目录下的所有隐藏文件\nfind /tmp/ -type f -name \".*\"\n\n# 找出 /tmp 目录下，所有者是 root 的文件和目录\nfind /tmp/ -user root\n\n# 找出 /tmp 目录下，用户组是 developer 的文件和目录\nfind /tmp/ -group root\n\n# 找出你账号的主目录下，3 天前修改的文件\nfind ~ -type f -mtime 3\n\n# 找出你账号的主目录下，30 天以前修改的所有文件\nfind ~ -type f -mtime +30\n\n# 找出你账号的主目录下，3 天以内修改的所有文件\nfind ~ -type f -mtime -3\n\n# 找出你账号的主目录下，30 天以前，60 天以内修改的所有文件\nfind ~ -type f -mtime +30 -mtime -60\n\n# 找出 /etc 目录下，一小时以内变更过的文件\nfind /etc -type f -cmin -60\n\n# 找出 /etc 目录下，一小时以内访问过的文件\nfind /etc -type f -amin -60\n\n# 找出你账号主目录下，大小是50MB的所有文件\nfind ~ -type f -size 50MB\n\n# 找出你账号主目录下，大于50MB小于100MB的所有文件\nfind ~ -type f -size +50MB -size -100MB\n\n# 找出你账号主目录下，大于100MB的文件并将其删除\nfind ~ -type f -size +100MB -exec rm -rf {} \\;\n```","source":"_posts/Linux/常用Bash命令整理之查看文件和目录.md","raw":"---\ntitle: 常用Bash命令整理之查看文件和目录\ndate: 2018-10-09 22:45:00\nauthor: blinkfox\nimg: https://statics.sh1a.qingstor.com/2018/10/09/linux.jpg\ncategories: 软件工具\ntags:\n  - Linux\n---\n\n## 1. ls - 列出文件名和目录\n\n`ls`命令是`Linux`中最常用的命令之一，其作用就是列出文件名和目录。在命令行提示符下，直接输入`ls`命令，不带任何选项，将列出当前目录下所有文件和目录，但不会显示详细的信息，比如，文件类型、大小、修改日期和时间、权限等。\n\n以下便是`ls`命令及其选项的作用说明：\n\n```bash\n# 仅列出当前目录下所有文件和目录\nls\n\n# 每行显示一条记录，每条记录包括文件类型、大小、修改日期和时间、权限等\nls -l\n\n# 将文件大小显示符合人类阅读习惯的格式\nls -lh\n\n# 将使用不同的特殊字符归类不同的文件类型\nls -F\n\n# 以长列表格式列出某个目录的信息\nls -ld /var/log\n\n# 将递归地列出子目录的内容\nls -R /etc/sysconfig/\n\n# 以长列表格式按文件或目录的修改时间倒序地列出文件和目录\nls -ltr\n\n# 以长列表格式按文件大小顺序列出文件和目录\nls -ls\n\n# 列出包括隐藏文件或目录在内的所有文件和目录，包括“.”（当前目录）和“..”（父目录）\nls -a\n\n# 列出包括隐藏文件或目录在内的所有文件和目录，不包括“.”（当前目录）和“..”（父目录）\nls -A\n\n输出的内容类似于-l选项，指示显示uid和gid，替代显示所有者和用户组\nls -n\n```\n\n## 2. cat - 连接显示文件内容\n\n`cat` 命令也是Linux系统中最常用的命令之一。`cat`命令让我们可以看看文件的内容、连接文件、创建一个或多个文件和重定向输出到终端或文件。\n\n`cat`命令的语法如下所示：\n\n```bash\ncat [OPTION] [FILE]...\n```\n\n`cat`常用命令如下：\n\n```bash\n# 使用 cat 命令查看文件 /etc/group 的内容\ncat /etc/group\n\n# 显示多个文件的内容\ncat /etc/redhat-release /etc/issue\n\n# -n 选项，可以显示文件内容的行号\ncat -n /etc/fstab\n\n# -b 选项和 -n 选项类似，但只标识非空白行的行号\ncat -b /etc/fstab\n\n# -e 选项，将在每一行的结尾显示“$”字符\ncat -e /etc/fstab\n```\n\n> 当你只输入 cat 命令，而没有任何参数时，它只是接收标准输入的内容并在标准输出中显示。所以你在输入一行内容并回车后，会在接下来的一行显示相同的内容。你也可以重定向标准输出到一个新文件。\n\n## 3.less、more - 分屏显示文件\n\n`more`命令在你使用小的xterm窗口时，或是想不使用文本编辑器而只是简单地阅读一个文件时是很有用的。more命令是一个用于一次翻阅一整屏文件的过滤器。\n\n```bash\n# 查看一个文件，自动清空屏幕并显示文件开头部分\nmore /etc/inittab\n\n# 指定一次显示num行\nmore -num /etc/inittab\n```\n\n与`more`命令相比，我个人更喜欢`less`命令来查看文件。`less`命令与`more`命令类似，但`less`命令向前和向后翻页都支持，而且`less`命令不需要在查看前加载整个文件，即`less`命令查看文件更快速。\n\n`less`常用命令参数如下：\n\n```bash\n-b  <缓冲区大小> 设置缓冲区的大小\n-e  当文件显示结束后，自动离开\n-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件\n-g  只标志最后搜索的关键词\n-i  忽略搜索时的大小写\n-m  显示类似more命令的百分比\n-N  显示每行的行号\n-o  <文件名> 将less 输出的内容在指定文件中保存起来\n-Q  不使用警告音\n-s  显示连续空行为一行\n-S  行过长时间将超出部分舍弃\n-x  <数字> 将“tab”键显示为规定的数字空格\n/字符串：向下搜索“字符串”的功能\n?字符串：向上搜索“字符串”的功能\nn： 重复前一个搜索（与 / 或 ? 有关）\nN： 反向重复前一个搜索（与 / 或 ? 有关）\nb  向后翻一页\nd  向后翻半页\nh  显示帮助界面\nQ  退出less 命令\nu  向前滚动半页\ny  向前滚动一行\n空格键 滚动一行\n回车键 滚动一页\n[pagedown]： 向下翻动一页\n[pageup]：   向上翻动一页\n```\n\n## 4.head - 显示文件头部\n\n`head`命令用于打印指定输入的开头部分内容。默认情况下，打印每个指定输入的前10行内容。\n\n使用`-n`选项可以指定打印文件的前N行：\n\n```bash\n# 指定打印文件的前5行\nhead -n 5 /etc/inittab\n（或）head -5 /etc/inittab\n\n# 打印文件的前N个字节的数据\nhead -c 10 /etc/inittab\n```\n\n## 5.tail - 显示文件尾部\n\n`tail`命令和`head`命令相反，它打印指定输入的结尾部分的内容。默认情况下，它打印指定输入的最后10行内容。\n\n使用`-n`选项可以指定打印文件的最后N行：\n\n```bash\n# 指定打印文件的后10行\ntail -n 10 /etc/inittab\ntail -10 /etc/inittab\n\n# 即时打印文件中新写入的行\ntail -f /var/log/messages\n\n# --retry选项表示持续尝试打开某个文件，当你想打开一个稍后才会创建或即使不可用的文件\ntail -f /tmp/debug.log --retry\n```\n\n## 6.file - 查看文件类型\n\n`file`命令用于接收一个文件作为参数并执行某些测试，已确定正确的文件类型。\n\n```bash\n# 查看文件类型\nfile /etc/inittab\n\n# 可以MIME类型的格式显示文件类型的信息\nfile -i  /etc/inittab\n\n# 使用-N 选项，输出的队列可以以在文件名之后无空白填充的形式显示\nfile -N *\n```\n\n## 7.wc - 查看文件统计信息\n\n`wc`命令用于查看文件的行数、单词数和字符数等信息。语法类似如下所示：\n\n```bash\nwc filename\nX Y Z /etc/inittab\n```\n\n其中X表示行数，Y表示单词数，Z表示字节数，filename表示文件名。\n\n```bash\n# -l选项，可以只统计文件的行数信息\nwc -l /etc/inittab\n\n# -w选项，可以只统计文件的单词数信息\nwc -w /etc/inittab\n\n# -c选项，可以只统计文件的字节数信息\nwc -c /etc/inittab\n\n# -L选项，可以只统计文件中最长的行的长度\nwc -L /etc/inittab\n```\n\n## 8.find - 查找文件或目录\n\n`find`命令用于根据你指定的参数搜索和定位文件和目录的列表。`find`命令可以在多种情况下使用，比如你可以通过权限、用户、用户组、文件类型、日期、大小和其他可能的条件来查找文件。\n\n`find`命令常用使用和说明如下：\n\n```bash\n# 查找指定目录下的某个文件\nfind /etc/ -name inittab\n\n# 在当前目录下查找名称为 inittab 的文件\nfind . -name inittab\n\n# 在当前目录下，文件不区分大小写是example的所有文件\nfind . -iname example\n\n# 找出当前目录下所有以 sh 结尾的文件\nfind . -type f -name \"*.sh\"\n\n# 找出当前目录下，文件权限是 777 的所有文件\nfind . -type f -perm 777\n\n# 找出当前目录下，文件权限不是 777 的所有文件\nfind . -type f ! -perm 777\n\n# 找出当前目录下所有只读文件\nfind . -type f ! -perm /a+w\n\n# 找出你帐号主目录下的所有可执行文件\nfind ~ -type f -perm /a+w\n\n# 找出 /tmp 目录下的.log文件并将其删除：\nfind /tmp/ -type f -name \"*.log\" -exec rm -f {} \\;\n\n# 找出当前目录下的所有空文件\nfind . -type f -empty\n\n# 找出当前目录下的所有空目录\nfind . -type d -empty\n\n# 找出 /tmp 目录下的所有隐藏文件\nfind /tmp/ -type f -name \".*\"\n\n# 找出 /tmp 目录下，所有者是 root 的文件和目录\nfind /tmp/ -user root\n\n# 找出 /tmp 目录下，用户组是 developer 的文件和目录\nfind /tmp/ -group root\n\n# 找出你账号的主目录下，3 天前修改的文件\nfind ~ -type f -mtime 3\n\n# 找出你账号的主目录下，30 天以前修改的所有文件\nfind ~ -type f -mtime +30\n\n# 找出你账号的主目录下，3 天以内修改的所有文件\nfind ~ -type f -mtime -3\n\n# 找出你账号的主目录下，30 天以前，60 天以内修改的所有文件\nfind ~ -type f -mtime +30 -mtime -60\n\n# 找出 /etc 目录下，一小时以内变更过的文件\nfind /etc -type f -cmin -60\n\n# 找出 /etc 目录下，一小时以内访问过的文件\nfind /etc -type f -amin -60\n\n# 找出你账号主目录下，大小是50MB的所有文件\nfind ~ -type f -size 50MB\n\n# 找出你账号主目录下，大于50MB小于100MB的所有文件\nfind ~ -type f -size +50MB -size -100MB\n\n# 找出你账号主目录下，大于100MB的文件并将其删除\nfind ~ -type f -size +100MB -exec rm -rf {} \\;\n```","slug":"Linux/常用Bash命令整理之查看文件和目录","published":1,"updated":"2024-12-12T16:49:46.412Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27vef000mge9kfa0kekgp","content":"<h2 id=\"1-ls-列出文件名和目录\"><a href=\"#1-ls-列出文件名和目录\" class=\"headerlink\" title=\"1. ls - 列出文件名和目录\"></a>1. ls - 列出文件名和目录</h2><p><code>ls</code>命令是<code>Linux</code>中最常用的命令之一，其作用就是列出文件名和目录。在命令行提示符下，直接输入<code>ls</code>命令，不带任何选项，将列出当前目录下所有文件和目录，但不会显示详细的信息，比如，文件类型、大小、修改日期和时间、权限等。</p>\n<p>以下便是<code>ls</code>命令及其选项的作用说明：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 仅列出当前目录下所有文件和目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每行显示一条记录，每条记录包括文件类型、大小、修改日期和时间、权限等</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将文件大小显示符合人类阅读习惯的格式</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -lh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将使用不同的特殊字符归类不同的文件类型</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -F</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以长列表格式列出某个目录的信息</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -ld /var/log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将递归地列出子目录的内容</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -R /etc/sysconfig/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以长列表格式按文件或目录的修改时间倒序地列出文件和目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -ltr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以长列表格式按文件大小顺序列出文件和目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -<span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出包括隐藏文件或目录在内的所有文件和目录，包括“.”（当前目录）和“..”（父目录）</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出包括隐藏文件或目录在内的所有文件和目录，不包括“.”（当前目录）和“..”（父目录）</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -A</span><br><span class=\"line\"></span><br><span class=\"line\">输出的内容类似于-l选项，指示显示uid和gid，替代显示所有者和用户组</span><br><span class=\"line\"><span class=\"built_in\">ls</span> -n</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-cat-连接显示文件内容\"><a href=\"#2-cat-连接显示文件内容\" class=\"headerlink\" title=\"2. cat - 连接显示文件内容\"></a>2. cat - 连接显示文件内容</h2><p><code>cat</code> 命令也是Linux系统中最常用的命令之一。<code>cat</code>命令让我们可以看看文件的内容、连接文件、创建一个或多个文件和重定向输出到终端或文件。</p>\n<p><code>cat</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> [OPTION] [FILE]...</span><br></pre></td></tr></table></figure>\n\n<p><code>cat</code>常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 cat 命令查看文件 /etc/group 的内容</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示多个文件的内容</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/redhat-release /etc/issue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -n 选项，可以显示文件内容的行号</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> -n /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -b 选项和 -n 选项类似，但只标识非空白行的行号</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> -b /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -e 选项，将在每一行的结尾显示“$”字符</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> -e /etc/fstab</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当你只输入 cat 命令，而没有任何参数时，它只是接收标准输入的内容并在标准输出中显示。所以你在输入一行内容并回车后，会在接下来的一行显示相同的内容。你也可以重定向标准输出到一个新文件。</p>\n</blockquote>\n<h2 id=\"3-less、more-分屏显示文件\"><a href=\"#3-less、more-分屏显示文件\" class=\"headerlink\" title=\"3.less、more - 分屏显示文件\"></a>3.less、more - 分屏显示文件</h2><p><code>more</code>命令在你使用小的xterm窗口时，或是想不使用文本编辑器而只是简单地阅读一个文件时是很有用的。more命令是一个用于一次翻阅一整屏文件的过滤器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看一个文件，自动清空屏幕并显示文件开头部分</span></span><br><span class=\"line\">more /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定一次显示num行</span></span><br><span class=\"line\">more -num /etc/inittab</span><br></pre></td></tr></table></figure>\n\n<p>与<code>more</code>命令相比，我个人更喜欢<code>less</code>命令来查看文件。<code>less</code>命令与<code>more</code>命令类似，但<code>less</code>命令向前和向后翻页都支持，而且<code>less</code>命令不需要在查看前加载整个文件，即<code>less</code>命令查看文件更快速。</p>\n<p><code>less</code>常用命令参数如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-b  &lt;缓冲区大小&gt; 设置缓冲区的大小</span><br><span class=\"line\">-e  当文件显示结束后，自动离开</span><br><span class=\"line\">-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件</span><br><span class=\"line\">-g  只标志最后搜索的关键词</span><br><span class=\"line\">-i  忽略搜索时的大小写</span><br><span class=\"line\">-m  显示类似more命令的百分比</span><br><span class=\"line\">-N  显示每行的行号</span><br><span class=\"line\">-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</span><br><span class=\"line\">-Q  不使用警告音</span><br><span class=\"line\">-s  显示连续空行为一行</span><br><span class=\"line\">-S  行过长时间将超出部分舍弃</span><br><span class=\"line\">-x  &lt;数字&gt; 将“tab”键显示为规定的数字空格</span><br><span class=\"line\">/字符串：向下搜索“字符串”的功能</span><br><span class=\"line\">?字符串：向上搜索“字符串”的功能</span><br><span class=\"line\">n： 重复前一个搜索（与 / 或 ? 有关）</span><br><span class=\"line\">N： 反向重复前一个搜索（与 / 或 ? 有关）</span><br><span class=\"line\">b  向后翻一页</span><br><span class=\"line\">d  向后翻半页</span><br><span class=\"line\">h  显示帮助界面</span><br><span class=\"line\">Q  退出less 命令</span><br><span class=\"line\">u  向前滚动半页</span><br><span class=\"line\">y  向前滚动一行</span><br><span class=\"line\">空格键 滚动一行</span><br><span class=\"line\">回车键 滚动一页</span><br><span class=\"line\">[pagedown]： 向下翻动一页</span><br><span class=\"line\">[pageup]：   向上翻动一页</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-head-显示文件头部\"><a href=\"#4-head-显示文件头部\" class=\"headerlink\" title=\"4.head - 显示文件头部\"></a>4.head - 显示文件头部</h2><p><code>head</code>命令用于打印指定输入的开头部分内容。默认情况下，打印每个指定输入的前10行内容。</p>\n<p>使用<code>-n</code>选项可以指定打印文件的前N行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定打印文件的前5行</span></span><br><span class=\"line\"><span class=\"built_in\">head</span> -n 5 /etc/inittab</span><br><span class=\"line\">（或）<span class=\"built_in\">head</span> -5 /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印文件的前N个字节的数据</span></span><br><span class=\"line\"><span class=\"built_in\">head</span> -c 10 /etc/inittab</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-tail-显示文件尾部\"><a href=\"#5-tail-显示文件尾部\" class=\"headerlink\" title=\"5.tail - 显示文件尾部\"></a>5.tail - 显示文件尾部</h2><p><code>tail</code>命令和<code>head</code>命令相反，它打印指定输入的结尾部分的内容。默认情况下，它打印指定输入的最后10行内容。</p>\n<p>使用<code>-n</code>选项可以指定打印文件的最后N行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定打印文件的后10行</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -n 10 /etc/inittab</span><br><span class=\"line\"><span class=\"built_in\">tail</span> -10 /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 即时打印文件中新写入的行</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -f /var/log/messages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --retry选项表示持续尝试打开某个文件，当你想打开一个稍后才会创建或即使不可用的文件</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -f /tmp/debug.log --retry</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-file-查看文件类型\"><a href=\"#6-file-查看文件类型\" class=\"headerlink\" title=\"6.file - 查看文件类型\"></a>6.file - 查看文件类型</h2><p><code>file</code>命令用于接收一个文件作为参数并执行某些测试，已确定正确的文件类型。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看文件类型</span></span><br><span class=\"line\">file /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以MIME类型的格式显示文件类型的信息</span></span><br><span class=\"line\">file -i  /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用-N 选项，输出的队列可以以在文件名之后无空白填充的形式显示</span></span><br><span class=\"line\">file -N *</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-wc-查看文件统计信息\"><a href=\"#7-wc-查看文件统计信息\" class=\"headerlink\" title=\"7.wc - 查看文件统计信息\"></a>7.wc - 查看文件统计信息</h2><p><code>wc</code>命令用于查看文件的行数、单词数和字符数等信息。语法类似如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">wc</span> filename</span><br><span class=\"line\">X Y Z /etc/inittab</span><br></pre></td></tr></table></figure>\n\n<p>其中X表示行数，Y表示单词数，Z表示字节数，filename表示文件名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -l选项，可以只统计文件的行数信息</span></span><br><span class=\"line\"><span class=\"built_in\">wc</span> -l /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -w选项，可以只统计文件的单词数信息</span></span><br><span class=\"line\"><span class=\"built_in\">wc</span> -w /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -c选项，可以只统计文件的字节数信息</span></span><br><span class=\"line\"><span class=\"built_in\">wc</span> -c /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -L选项，可以只统计文件中最长的行的长度</span></span><br><span class=\"line\"><span class=\"built_in\">wc</span> -L /etc/inittab</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-find-查找文件或目录\"><a href=\"#8-find-查找文件或目录\" class=\"headerlink\" title=\"8.find - 查找文件或目录\"></a>8.find - 查找文件或目录</h2><p><code>find</code>命令用于根据你指定的参数搜索和定位文件和目录的列表。<code>find</code>命令可以在多种情况下使用，比如你可以通过权限、用户、用户组、文件类型、日期、大小和其他可能的条件来查找文件。</p>\n<p><code>find</code>命令常用使用和说明如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找指定目录下的某个文件</span></span><br><span class=\"line\">find /etc/ -name inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在当前目录下查找名称为 inittab 的文件</span></span><br><span class=\"line\">find . -name inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在当前目录下，文件不区分大小写是example的所有文件</span></span><br><span class=\"line\">find . -iname example</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下所有以 sh 结尾的文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*.sh&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下，文件权限是 777 的所有文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -perm 777</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下，文件权限不是 777 的所有文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f ! -perm 777</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下所有只读文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f ! -perm /a+w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你帐号主目录下的所有可执行文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -perm /a+w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /tmp 目录下的.log文件并将其删除：</span></span><br><span class=\"line\">find /tmp/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*.log&quot;</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">rm</span> -f &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下的所有空文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -empty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下的所有空目录</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> d -empty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /tmp 目录下的所有隐藏文件</span></span><br><span class=\"line\">find /tmp/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;.*&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /tmp 目录下，所有者是 root 的文件和目录</span></span><br><span class=\"line\">find /tmp/ -user root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /tmp 目录下，用户组是 developer 的文件和目录</span></span><br><span class=\"line\">find /tmp/ -group root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号的主目录下，3 天前修改的文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -mtime 3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号的主目录下，30 天以前修改的所有文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -mtime +30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号的主目录下，3 天以内修改的所有文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -mtime -3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号的主目录下，30 天以前，60 天以内修改的所有文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -mtime +30 -mtime -60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /etc 目录下，一小时以内变更过的文件</span></span><br><span class=\"line\">find /etc -<span class=\"built_in\">type</span> f -cmin -60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /etc 目录下，一小时以内访问过的文件</span></span><br><span class=\"line\">find /etc -<span class=\"built_in\">type</span> f -amin -60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号主目录下，大小是50MB的所有文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -size 50MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号主目录下，大于50MB小于100MB的所有文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -size +50MB -size -100MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号主目录下，大于100MB的文件并将其删除</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -size +100MB -<span class=\"built_in\">exec</span> <span class=\"built_in\">rm</span> -rf &#123;&#125; \\;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"1-ls-列出文件名和目录\"><a href=\"#1-ls-列出文件名和目录\" class=\"headerlink\" title=\"1. ls - 列出文件名和目录\"></a>1. ls - 列出文件名和目录</h2><p><code>ls</code>命令是<code>Linux</code>中最常用的命令之一，其作用就是列出文件名和目录。在命令行提示符下，直接输入<code>ls</code>命令，不带任何选项，将列出当前目录下所有文件和目录，但不会显示详细的信息，比如，文件类型、大小、修改日期和时间、权限等。</p>\n<p>以下便是<code>ls</code>命令及其选项的作用说明：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 仅列出当前目录下所有文件和目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每行显示一条记录，每条记录包括文件类型、大小、修改日期和时间、权限等</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将文件大小显示符合人类阅读习惯的格式</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -lh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将使用不同的特殊字符归类不同的文件类型</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -F</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以长列表格式列出某个目录的信息</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -ld /var/log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将递归地列出子目录的内容</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -R /etc/sysconfig/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以长列表格式按文件或目录的修改时间倒序地列出文件和目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -ltr</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以长列表格式按文件大小顺序列出文件和目录</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -<span class=\"built_in\">ls</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出包括隐藏文件或目录在内的所有文件和目录，包括“.”（当前目录）和“..”（父目录）</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列出包括隐藏文件或目录在内的所有文件和目录，不包括“.”（当前目录）和“..”（父目录）</span></span><br><span class=\"line\"><span class=\"built_in\">ls</span> -A</span><br><span class=\"line\"></span><br><span class=\"line\">输出的内容类似于-l选项，指示显示uid和gid，替代显示所有者和用户组</span><br><span class=\"line\"><span class=\"built_in\">ls</span> -n</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-cat-连接显示文件内容\"><a href=\"#2-cat-连接显示文件内容\" class=\"headerlink\" title=\"2. cat - 连接显示文件内容\"></a>2. cat - 连接显示文件内容</h2><p><code>cat</code> 命令也是Linux系统中最常用的命令之一。<code>cat</code>命令让我们可以看看文件的内容、连接文件、创建一个或多个文件和重定向输出到终端或文件。</p>\n<p><code>cat</code>命令的语法如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> [OPTION] [FILE]...</span><br></pre></td></tr></table></figure>\n\n<p><code>cat</code>常用命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 cat 命令查看文件 /etc/group 的内容</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/group</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 显示多个文件的内容</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> /etc/redhat-release /etc/issue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -n 选项，可以显示文件内容的行号</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> -n /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -b 选项和 -n 选项类似，但只标识非空白行的行号</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> -b /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -e 选项，将在每一行的结尾显示“$”字符</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> -e /etc/fstab</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>当你只输入 cat 命令，而没有任何参数时，它只是接收标准输入的内容并在标准输出中显示。所以你在输入一行内容并回车后，会在接下来的一行显示相同的内容。你也可以重定向标准输出到一个新文件。</p>\n</blockquote>\n<h2 id=\"3-less、more-分屏显示文件\"><a href=\"#3-less、more-分屏显示文件\" class=\"headerlink\" title=\"3.less、more - 分屏显示文件\"></a>3.less、more - 分屏显示文件</h2><p><code>more</code>命令在你使用小的xterm窗口时，或是想不使用文本编辑器而只是简单地阅读一个文件时是很有用的。more命令是一个用于一次翻阅一整屏文件的过滤器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看一个文件，自动清空屏幕并显示文件开头部分</span></span><br><span class=\"line\">more /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 指定一次显示num行</span></span><br><span class=\"line\">more -num /etc/inittab</span><br></pre></td></tr></table></figure>\n\n<p>与<code>more</code>命令相比，我个人更喜欢<code>less</code>命令来查看文件。<code>less</code>命令与<code>more</code>命令类似，但<code>less</code>命令向前和向后翻页都支持，而且<code>less</code>命令不需要在查看前加载整个文件，即<code>less</code>命令查看文件更快速。</p>\n<p><code>less</code>常用命令参数如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-b  &lt;缓冲区大小&gt; 设置缓冲区的大小</span><br><span class=\"line\">-e  当文件显示结束后，自动离开</span><br><span class=\"line\">-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件</span><br><span class=\"line\">-g  只标志最后搜索的关键词</span><br><span class=\"line\">-i  忽略搜索时的大小写</span><br><span class=\"line\">-m  显示类似more命令的百分比</span><br><span class=\"line\">-N  显示每行的行号</span><br><span class=\"line\">-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</span><br><span class=\"line\">-Q  不使用警告音</span><br><span class=\"line\">-s  显示连续空行为一行</span><br><span class=\"line\">-S  行过长时间将超出部分舍弃</span><br><span class=\"line\">-x  &lt;数字&gt; 将“tab”键显示为规定的数字空格</span><br><span class=\"line\">/字符串：向下搜索“字符串”的功能</span><br><span class=\"line\">?字符串：向上搜索“字符串”的功能</span><br><span class=\"line\">n： 重复前一个搜索（与 / 或 ? 有关）</span><br><span class=\"line\">N： 反向重复前一个搜索（与 / 或 ? 有关）</span><br><span class=\"line\">b  向后翻一页</span><br><span class=\"line\">d  向后翻半页</span><br><span class=\"line\">h  显示帮助界面</span><br><span class=\"line\">Q  退出less 命令</span><br><span class=\"line\">u  向前滚动半页</span><br><span class=\"line\">y  向前滚动一行</span><br><span class=\"line\">空格键 滚动一行</span><br><span class=\"line\">回车键 滚动一页</span><br><span class=\"line\">[pagedown]： 向下翻动一页</span><br><span class=\"line\">[pageup]：   向上翻动一页</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-head-显示文件头部\"><a href=\"#4-head-显示文件头部\" class=\"headerlink\" title=\"4.head - 显示文件头部\"></a>4.head - 显示文件头部</h2><p><code>head</code>命令用于打印指定输入的开头部分内容。默认情况下，打印每个指定输入的前10行内容。</p>\n<p>使用<code>-n</code>选项可以指定打印文件的前N行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定打印文件的前5行</span></span><br><span class=\"line\"><span class=\"built_in\">head</span> -n 5 /etc/inittab</span><br><span class=\"line\">（或）<span class=\"built_in\">head</span> -5 /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 打印文件的前N个字节的数据</span></span><br><span class=\"line\"><span class=\"built_in\">head</span> -c 10 /etc/inittab</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-tail-显示文件尾部\"><a href=\"#5-tail-显示文件尾部\" class=\"headerlink\" title=\"5.tail - 显示文件尾部\"></a>5.tail - 显示文件尾部</h2><p><code>tail</code>命令和<code>head</code>命令相反，它打印指定输入的结尾部分的内容。默认情况下，它打印指定输入的最后10行内容。</p>\n<p>使用<code>-n</code>选项可以指定打印文件的最后N行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 指定打印文件的后10行</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -n 10 /etc/inittab</span><br><span class=\"line\"><span class=\"built_in\">tail</span> -10 /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 即时打印文件中新写入的行</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -f /var/log/messages</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># --retry选项表示持续尝试打开某个文件，当你想打开一个稍后才会创建或即使不可用的文件</span></span><br><span class=\"line\"><span class=\"built_in\">tail</span> -f /tmp/debug.log --retry</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-file-查看文件类型\"><a href=\"#6-file-查看文件类型\" class=\"headerlink\" title=\"6.file - 查看文件类型\"></a>6.file - 查看文件类型</h2><p><code>file</code>命令用于接收一个文件作为参数并执行某些测试，已确定正确的文件类型。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看文件类型</span></span><br><span class=\"line\">file /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 可以MIME类型的格式显示文件类型的信息</span></span><br><span class=\"line\">file -i  /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用-N 选项，输出的队列可以以在文件名之后无空白填充的形式显示</span></span><br><span class=\"line\">file -N *</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-wc-查看文件统计信息\"><a href=\"#7-wc-查看文件统计信息\" class=\"headerlink\" title=\"7.wc - 查看文件统计信息\"></a>7.wc - 查看文件统计信息</h2><p><code>wc</code>命令用于查看文件的行数、单词数和字符数等信息。语法类似如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">wc</span> filename</span><br><span class=\"line\">X Y Z /etc/inittab</span><br></pre></td></tr></table></figure>\n\n<p>其中X表示行数，Y表示单词数，Z表示字节数，filename表示文件名。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -l选项，可以只统计文件的行数信息</span></span><br><span class=\"line\"><span class=\"built_in\">wc</span> -l /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -w选项，可以只统计文件的单词数信息</span></span><br><span class=\"line\"><span class=\"built_in\">wc</span> -w /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -c选项，可以只统计文件的字节数信息</span></span><br><span class=\"line\"><span class=\"built_in\">wc</span> -c /etc/inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -L选项，可以只统计文件中最长的行的长度</span></span><br><span class=\"line\"><span class=\"built_in\">wc</span> -L /etc/inittab</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8-find-查找文件或目录\"><a href=\"#8-find-查找文件或目录\" class=\"headerlink\" title=\"8.find - 查找文件或目录\"></a>8.find - 查找文件或目录</h2><p><code>find</code>命令用于根据你指定的参数搜索和定位文件和目录的列表。<code>find</code>命令可以在多种情况下使用，比如你可以通过权限、用户、用户组、文件类型、日期、大小和其他可能的条件来查找文件。</p>\n<p><code>find</code>命令常用使用和说明如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查找指定目录下的某个文件</span></span><br><span class=\"line\">find /etc/ -name inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在当前目录下查找名称为 inittab 的文件</span></span><br><span class=\"line\">find . -name inittab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在当前目录下，文件不区分大小写是example的所有文件</span></span><br><span class=\"line\">find . -iname example</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下所有以 sh 结尾的文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*.sh&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下，文件权限是 777 的所有文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -perm 777</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下，文件权限不是 777 的所有文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f ! -perm 777</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下所有只读文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f ! -perm /a+w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你帐号主目录下的所有可执行文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -perm /a+w</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /tmp 目录下的.log文件并将其删除：</span></span><br><span class=\"line\">find /tmp/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;*.log&quot;</span> -<span class=\"built_in\">exec</span> <span class=\"built_in\">rm</span> -f &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下的所有空文件</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> f -empty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出当前目录下的所有空目录</span></span><br><span class=\"line\">find . -<span class=\"built_in\">type</span> d -empty</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /tmp 目录下的所有隐藏文件</span></span><br><span class=\"line\">find /tmp/ -<span class=\"built_in\">type</span> f -name <span class=\"string\">&quot;.*&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /tmp 目录下，所有者是 root 的文件和目录</span></span><br><span class=\"line\">find /tmp/ -user root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /tmp 目录下，用户组是 developer 的文件和目录</span></span><br><span class=\"line\">find /tmp/ -group root</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号的主目录下，3 天前修改的文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -mtime 3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号的主目录下，30 天以前修改的所有文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -mtime +30</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号的主目录下，3 天以内修改的所有文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -mtime -3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号的主目录下，30 天以前，60 天以内修改的所有文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -mtime +30 -mtime -60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /etc 目录下，一小时以内变更过的文件</span></span><br><span class=\"line\">find /etc -<span class=\"built_in\">type</span> f -cmin -60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出 /etc 目录下，一小时以内访问过的文件</span></span><br><span class=\"line\">find /etc -<span class=\"built_in\">type</span> f -amin -60</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号主目录下，大小是50MB的所有文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -size 50MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号主目录下，大于50MB小于100MB的所有文件</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -size +50MB -size -100MB</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 找出你账号主目录下，大于100MB的文件并将其删除</span></span><br><span class=\"line\">find ~ -<span class=\"built_in\">type</span> f -size +100MB -<span class=\"built_in\">exec</span> <span class=\"built_in\">rm</span> -rf &#123;&#125; \\;</span><br></pre></td></tr></table></figure>"},{"title":"Vue 文档风格的 Typora 主题","date":"2018-11-18T16:30:00.000Z","author":"blinkfox","img":"https://statics.sh1a.qingstor.com/2018/11/19/vue.jpg","cover":true,"_content":"\n> [typora-vue-theme](https://github.com/blinkfox/typora-vue-theme) 是 Typora Markdown 文档编辑器中一款类似[Vue](https://vuejs.org/)文档风格的主题。\n\n## 简介\n\n[Typora](https://www.typora.io/)是一款支持实时预览的 Markdown 编辑器和阅读器，支持`Windows`、`macOS`、`Linux`三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**[typora-vue-theme](https://github.com/blinkfox/typora-vue-theme)就是参考了[Vue](https://vuejs.org/)文档风格而开发的一个 Typora 自定义主题**。\n\n## 安装主题\n\n1. 下载本主题中的`vue.css`、`vue-dark.css`文件和包含字体的`vue`文件夹；\n2. 打开 Typora，点击“**偏好设置**” => “**打开主题文件夹**”按钮，将弹出 Typora 的主题文件夹；\n3. 将下载好的`vue.css`和`vue-dark.css`文件和包含字体的`vue`文件夹放到 Typora 的主题文件夹中；\n4. 关闭并重新打开 Typora，从菜单栏中选择 “**主题**” => “**Vue**” 或者 “**Vue Dark**” 即可。\n\n## 效果图\n\n![vue主题效果图1](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-1.png)\n\n![vue主题效果图2](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-2.png)\n\n![vue主题效果图3](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-3.png)\n\n### Vue Dark\n\n![vue主题效果图4](https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png)\n\n![vue主题效果图5](https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png)\n\n> **感谢**: 本主题中的`vue-dark.css`来自[typora-vue-dark-theme](https://github.com/MamoruDS/typora-vue-dark-theme).\n","source":"_posts/Markdown/Vue 文档风格的 Typora 主题.md","raw":"---\ntitle: Vue 文档风格的 Typora 主题\ndate: 2018-11-19 00:30:00\nauthor: blinkfox\nimg: https://statics.sh1a.qingstor.com/2018/11/19/vue.jpg\ncover: true\ncategories: 软件工具\ntags:\n  - Typora\n  - Markdown\n  - Vue\n---\n\n> [typora-vue-theme](https://github.com/blinkfox/typora-vue-theme) 是 Typora Markdown 文档编辑器中一款类似[Vue](https://vuejs.org/)文档风格的主题。\n\n## 简介\n\n[Typora](https://www.typora.io/)是一款支持实时预览的 Markdown 编辑器和阅读器，支持`Windows`、`macOS`、`Linux`三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**[typora-vue-theme](https://github.com/blinkfox/typora-vue-theme)就是参考了[Vue](https://vuejs.org/)文档风格而开发的一个 Typora 自定义主题**。\n\n## 安装主题\n\n1. 下载本主题中的`vue.css`、`vue-dark.css`文件和包含字体的`vue`文件夹；\n2. 打开 Typora，点击“**偏好设置**” => “**打开主题文件夹**”按钮，将弹出 Typora 的主题文件夹；\n3. 将下载好的`vue.css`和`vue-dark.css`文件和包含字体的`vue`文件夹放到 Typora 的主题文件夹中；\n4. 关闭并重新打开 Typora，从菜单栏中选择 “**主题**” => “**Vue**” 或者 “**Vue Dark**” 即可。\n\n## 效果图\n\n![vue主题效果图1](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-1.png)\n\n![vue主题效果图2](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-2.png)\n\n![vue主题效果图3](https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-3.png)\n\n### Vue Dark\n\n![vue主题效果图4](https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png)\n\n![vue主题效果图5](https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png)\n\n> **感谢**: 本主题中的`vue-dark.css`来自[typora-vue-dark-theme](https://github.com/MamoruDS/typora-vue-dark-theme).\n","slug":"Markdown/Vue 文档风格的 Typora 主题","published":1,"updated":"2024-12-12T16:49:46.412Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27veg000nge9kf8xj4fwk","content":"<blockquote>\n<p><a href=\"https://github.com/blinkfox/typora-vue-theme\">typora-vue-theme</a> 是 Typora Markdown 文档编辑器中一款类似<a href=\"https://vuejs.org/\">Vue</a>文档风格的主题。</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://www.typora.io/\">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**<a href=\"https://github.com/blinkfox/typora-vue-theme\">typora-vue-theme</a>就是参考了<a href=\"https://vuejs.org/\">Vue</a>文档风格而开发的一个 Typora 自定义主题**。</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><ol>\n<li>下载本主题中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li>\n<li>打开 Typora，点击“<strong>偏好设置</strong>” &#x3D;&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li>\n<li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li>\n<li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” &#x3D;&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li>\n</ol>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-1.png\" alt=\"vue主题效果图1\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-2.png\" alt=\"vue主题效果图2\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-3.png\" alt=\"vue主题效果图3\"></p>\n<h3 id=\"Vue-Dark\"><a href=\"#Vue-Dark\" class=\"headerlink\" title=\"Vue Dark\"></a>Vue Dark</h3><p><img src=\"https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png\" alt=\"vue主题效果图4\"></p>\n<p><img src=\"https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png\" alt=\"vue主题效果图5\"></p>\n<blockquote>\n<p><strong>感谢</strong>: 本主题中的<code>vue-dark.css</code>来自<a href=\"https://github.com/MamoruDS/typora-vue-dark-theme\">typora-vue-dark-theme</a>.</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p><a href=\"https://github.com/blinkfox/typora-vue-theme\">typora-vue-theme</a> 是 Typora Markdown 文档编辑器中一款类似<a href=\"https://vuejs.org/\">Vue</a>文档风格的主题。</p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://www.typora.io/\">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。**<a href=\"https://github.com/blinkfox/typora-vue-theme\">typora-vue-theme</a>就是参考了<a href=\"https://vuejs.org/\">Vue</a>文档风格而开发的一个 Typora 自定义主题**。</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><ol>\n<li>下载本主题中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li>\n<li>打开 Typora，点击“<strong>偏好设置</strong>” &#x3D;&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li>\n<li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li>\n<li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” &#x3D;&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li>\n</ol>\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-1.png\" alt=\"vue主题效果图1\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-2.png\" alt=\"vue主题效果图2\"></p>\n<p><img src=\"https://statics.sh1a.qingstor.com/2018/11/19/typora-vue-theme-screen-3.png\" alt=\"vue主题效果图3\"></p>\n<h3 id=\"Vue-Dark\"><a href=\"#Vue-Dark\" class=\"headerlink\" title=\"Vue Dark\"></a>Vue Dark</h3><p><img src=\"https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png\" alt=\"vue主题效果图4\"></p>\n<p><img src=\"https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png\" alt=\"vue主题效果图5\"></p>\n<blockquote>\n<p><strong>感谢</strong>: 本主题中的<code>vue-dark.css</code>来自<a href=\"https://github.com/MamoruDS/typora-vue-dark-theme\">typora-vue-dark-theme</a>.</p>\n</blockquote>\n"},{"title":"GitLab CI/CD 介绍和使用","date":"2018-11-22T15:30:00.000Z","author":"blinkfox","img":"https://statics.sh1a.qingstor.com/2018/11/22/gitlab-ci-machine.png","_content":"\n## 一、持续集成介绍\n\n> 持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。—— Martin Fowler\n\n### 1 概念\n\n- **持续集成**(`Continuous Integration`)：**频繁地(一天多次)将代码集成到主干。**让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。“持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”\n- **持续交付**(`Continuous Delivery`)：**频繁地将软件的新版本，交付给质量团队或者用户，以供评审。**如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。\n- **持续部署**(`continuous Deployment`)：**代码通过评审以后，自动部署到生产环境。**是持续部署是持续交付的下一步，持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。\n\n### 2 持续集成的好处\n\n- **自动化构建且状态对每个人可见**。可以使用`Maven`、`Gradle`等来实现自动化构建，可以在构建过程中实现自动化测试（前提是有写单元测试用例）。集成服务器在持续集成过程中发现问题可以及时发送警告给相关的干系人。\n- **解放了重复性劳动。**自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。\n- **更快地发现和修复问题。**持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。\n- **更快的交付成果。**更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。\n- **减少手工的错误。**在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。\n- **减少了等待时间。**缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。\n- **更高的产品质量。**集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。\n\n### 3 常用持续集成工具\n\n- [Jenkins](https://jenkins.io/)\n- [GitLab CI](https://docs.gitlab.com/ee/ci/README.html)\n- [TeamCity](https://www.jetbrains.com/teamcity/)\n- [Travis CI](https://www.travis-ci.org/)\n- [Bamboo](https://www.atlassian.com/software/bamboo)\n- [CircleCI](https://circleci.com/)\n- ...\n\n## 二、Gitlab 持续集成\n\n![GitLab CI/CD](https://statics.sh1a.qingstor.com/2018/11/22/pipelines.png)\n\n### 1 概念介绍\n\n#### (1) GitLab\n\n[GitLab](https://about.gitlab.com/) 是一个利用`Ruby on Rails`开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与[GitHub](https://github.com/)类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。\n\n#### (2) GitLab CI/CD\n\n[GitLab CI/CD](https://docs.gitlab.com/ee/ci/README.html) 是`GitLab Continuous Integration`（Gitlab持续集成）的简称。GitLab 自`GitLab 8.0`开始提供了持续集成的功能，且对所有项目默认开启。只要在项目仓库的根目录添加`.gitlab-ci.yml`文件，并且配置了Runner（运行器），那么每一次`push`或者合并请求（`Merge Request`）都会触发[CI Pipeline](https://docs.gitlab.com/ce/ci/pipelines.html)。\n\n#### (3) GitLab Runner\n\n[GitLab Runner](https://docs.gitlab.com/runner/) `GitLab Runner`是一个开源项目，可以运行在 GNU / Linux，macOS 和 Windows 操作系统上。每次`push`的时候 GitLab CI 会根据`.gitlab-ci.yml`配置文件运行你流水线（`Pipeline`）中各个阶段的任务（`Job`），并将结果发送回 GitLab。GitLab Runner 是基于 Gitlab CI 的 API 进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和 Gitlab 安装在同一台机器上，且考虑到 GitLab Runner 的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。\n\nGitlab Runner 分为三种：\n\n- 共享Runner(`Shared runners`)\n- 专享Runner(`Specific runners`)\n- 分组Runner(`Group Runners`)\n\n#### (4) Pipelines\n\n[Pipelines](https://docs.gitlab.com/ce/ci/pipelines.html) 中文称为流水线，是分阶段执行的构建任务。如：安装依赖、运行测试、打包、部署开发服务器、部署生产服务器等流程。每一次`push`或者`Merge Request`都会触发生成一条新的Pipeline。\n\n下面是流水线示例图：\n\n![Pipeline Status](https://docs.gitlab.com/ce/ci/img/pipelines_index.png)\n\n#### (5) Stages\n\n[Stages](https://docs.gitlab.com/ce/ci/yaml/README.html#stages) 表示构建阶段，可以理解为上面所说“安装依赖”、“运行测试”等环节的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：\n\n- 所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始（当然可以在`.gitlab-ci.yml`文件中配置上一阶段失败时下一阶段也执行）\n- 只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功\n- 如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败\n\n下面是一个流水线内的阶段任务示例图：\n\n![Job Status](https://docs.gitlab.com/ce/ci/img/pipelines.png)\n\n#### (6) Jobs\n\n[Jobs](https://docs.gitlab.com/ce/ci/pipelines.html#jobs) 表示构建的作业（或称之为任务），表示某个 Stage 里面执行的具体任务。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：\n\n- 相同 Stage 中的 Jobs 无执行顺序要求，会并行执行\n- 相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功\n- 如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 也失败（可以在`.gitlab-ci.yml`文件中配置允许某 Job 可以失败，也算该 Stage 成功）\n\n#### (7) .gitlab-ci.yml\n\nGitLab 中默认开启了 Gitlab CI/CD 的支持，且使用[YAML](http://yaml.org/)文件[.gitlab-ci.yml](https://docs.gitlab.com/ee/ci/yaml/README.html#examples)来管理项目构建配置。该文件需要存放于项目仓库的根目录（默认路径，可在 GitLab 中修改），它定义该项目的 CI/CD 如何配置。所以，我们只需要在`.gitlab-ci.yml`配置文件中定义流水线的各个阶段，以及各个阶段中的若干作业（任务）即可。\n\n下面是`.gitlab-ci.yml`文件的一个简单的`Hello World`示例：\n\n```yaml\n# 定义 test 和 package 两个 Stages\nstages:\n  - test\n  - package\n\n# 定义 package 阶段的一个 job\npackage-job:\n  stage: package\n  script:\n    - echo \"Hello, package-job\"\n    - echo \"I am in package stage\"\n\n# 定义 test 阶段的一个 job\ntest-job:\n  stage: test\n  script:\n    - echo \"Hello, test-job\"\n    - echo \"I am in test stage\"\n```\n\n以上配置中，用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的`script`关键字是每个 job 中必须要包含的，它表示每个 job 要执行的命令。\n\n> **注**：猜猜上面例子的运行结果？\n\n#### (8) Badges\n\n[Badges](https://docs.gitlab.com/ce/ci/pipelines.html#badges) 即：**徽章**，当 Pipelines 执行过程中或者执行完成时会生成徽章，你可以将这些徽章加入到你的`README.md`文件中，便于从仓库主页看到最新的构建状态。\n\n徽章的链接形如下：\n\n```bash\nhttp://example.gitlab.com/namespace/project/badges/branch/build.svg \n```\n\n我们用 GitLab 项目的徽章作为例子，效果如下：\n\n![Gitlab build badges](https://gitlab.com/gitlab-org/gitlab-ce/badges/master/build.svg) ![Gitlab coverage badges](https://gitlab.com/gitlab-org/gitlab-ce/badges/master/coverage.svg?job=coverage)\n\n### 2 安装 GitLab Runner\n\n[这里](https://docs.gitlab.com/runner/install/index.html)有 GitLab Runner安装相关的资源和文档可供大家参考。以下仅以咱们公司常用的`Centos`为例来做安装说明。\n\n#### (1) 在线安装\n\n```bash\n# 添加官方的repo.\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash\n\n# yum 安装Gtilab Runner.\nsudo yum install gitlab-runner\n```\n\n#### (2) 离线安装\n\n```bash\n# 安装Git\nsudo yum –y install git\n\n# rpm离线安装事先下载好的 Gitlab Runner rpm包.\nrpm -ivh gitlab-runner-10.5.0-1.x86_64.rpm\n```\n\n> **注**：Gitlab Runner 依赖了`Git`，所以，离线安装 Gitlab Runner 之前得首先安装Git，离线安装包可以从[这里](https://packages.gitlab.com/runner/gitlab-runner)下载。\n\n### 3 注册 Gitlab Runner\n\n安装了 GitLab Runner 之后,就可以为 GitLab 中的仓库[注册一个 Runner](https://docs.gitlab.com/runner/register/index.html)，注册的交互式命令如下：\n\n```bash\nsudo gitlab-runner register\n```\n\n命令的交互式的过程如下：\n\n```bash\n# 输入注册命令\nsudo gitlab-runner register\n\n# 输入公司的 GitLab 网站地址\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )\nhttp://gitlab.xxxx.com/\n\n# 你项目仓库的token，token可以在 Settings -> CI/CD -> Runners settings 中找到.\nPlease enter the gitlab-ci token for this runner\nxxx\n\n# 输入描述这个 runner 的名称\nPlease enter the gitlab-ci description for this runner\n[hostame] my-runner\n\n# 输入 runner 的标签\nPlease enter the gitlab-ci tags for this runner (comma separated):\nmy-tag,another-tag\n\n# 输入 runner 的执行器.\nPlease enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:\nshell\n```\n\n以上流程注册成功之后，就可以在你的项目仓库中 `Settings` -> `CI/CD` -> `Runners settings` 看到这个 Runner 了。\n\n### 4 Gitlab Runner 常用命令汇总\n\n下面的表格中列出了一些常用的[Gitlab Runner命令](https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-list)，以供参考：\n\n| 命令                     | 描述                                                         |\n| ------------------------ | :----------------------------------------------------------- |\n| gitlab-runner run        | 运行一个runner服务                                           |\n| gitlab-runner register   | 注册一个新的runner                                           |\n| gitlab-runner start      | 启动服务                                                     |\n| gitlab-runner stop       | 关闭服务                                                     |\n| gitlab-runner restart    | 重启服务                                                     |\n| gitlab-runner status     | 查看各个runner的状态                                         |\n| gitlab-runner unregister | 注销掉某个runner                                             |\n| gitlab-runner list       | 显示所有运行着的runner                                       |\n| gitlab-runner verify     | 检查已注册的运行程序是否可以连接到GitLab，但它不验证GitLab Runner服务是否正在使用运行程序。 |\n\n## 三、一个Web项目 CI/CD 简单示例\n\n接下来，用一个实际项目来演示 GitLab CI/CD 的配置和使用，其中主要包括：编译测试、项目打包、部署服务、Sonar手动检查、Sonar定时检查五个阶段。\n\n下面用一个传统的 Java web 项目(这里称之为`cidemo`)和`Tomcat`来作为示例，并用来展示常用配置的使用。当我每次`push`代码或者`Merge Request`时，都会生成一条流水线，且会自动执行我们上面所说的一些阶段，而Sonar手动检查我们设置为手动操作，且再额外配置Sonar定时检查的任务。\n\n> **注**：我 Gitlab Runner 是安装在`Centos`环境中，并使用的`shell`执行器。\n\n```yaml\n# 定义stages\nstages:\n  - test\n  - install\n  - run\n  - sonar\n\n# 定义安装包的存放位置和Tomcat服务器的地址的变量，便于后续部署使用.\nvariables:\n  CIDEMO_PACKAGE_DIR: '/home/gitlab-runner/packages/cidemo/'\n  SERVER_HOME_DIR: '/home/gitlab-runner/tomcat/cidemo-tomcat/'\n\n###################### 构建编译和单元测试的job. #######################\n\n编译测试任务:\n  stage: test\n  only:\n    - branches\n  script:\n    - mvn clean test\n\n###################### Maven安装得到war包的job. #######################\n\n打包任务:\n  stage: install\n  only:\n    - develop\n  script:\n    - mvn install\n    - echo '准备将最新的war包复制、保存到某个目录里面供后续使用.'\n    - rm -rf $CIDEMO_PACKAGE_DIR/*.war\n    - cp target/*.war $CIDEMO_PACKAGE_DIR/cidemo.war\n\n####################### 部署运行war包的job. #######################\n\n部署运行任务:\n  stage: run\n  only:\n    - develop\n  script:\n    - echo '准备部署和运行war包！(为了方便部署到了Tomcat中运行)'\n    - cd $SERVER_HOME_DIR\n    - sh bin/shutdown.sh\n    - rm -rf webapps/cidemo.war\n    - cp $CIDEMO_PACKAGE_DIR/cidemo.war $SERVER_HOME_DIR/webapps/cidemo.war\n    - nohup sh ./bin/startup.sh > logs/cidemo_nohup.log 2>&1 &\n\n###################### Sonar手动构建的job. #######################\n\nSonar手动检查:\n  stage: sonar\n  when: manual\n  only:\n    - develop\n  script:\n    - echo '准备对项目代码做sonar的质量检查！'\n    - mvn compile && mvn sonar:sonar -Dsonar.host.url=http://172.16.34.102:9000 -Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34\n\n###################### Sonar每晚定时构建的job. #######################\n\nSonar定时检查:\n  stage: sonar\n  only:\n    - schedules\n  script:\n    - echo '开始定时对项目代码做sonar的质量检查！'\n    - mvn compile && mvn sonar:sonar -Dsonar.host.url=http://172.16.34.102:9000 -Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34\n```\n\n## 四、Gitlab CI/CD yaml 常用配置介绍\n\n开始构建之前`.gitlab-ci.yml`文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含script部分，`.gitlab-ci.yml`允许指定无限量 jobs。每个 jobs 必须有一个唯一的名字，且名字不能是下面列出的保留字段：\n\n- `image`\n- `services`\n- `stages`\n- `types`\n- `before_script`\n- `after_script`\n- `variables`\n- `cache`\n\njob由一列参数来定义 jobs 的行为：\n\n| Keyword       | Required | Description                                                  |\n| ------------- | -------- | ------------------------------------------------------------ |\n| script        | yes      | Runner执行的命令或脚本                                       |\n| extends       | no       | 定义此作业将继承的配置条目                                   |\n| image         | no       | 所使用的docker镜像，查阅[使用docker镜像](https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml) |\n| services      | no       | 所使用的docker服务，查阅[使用docker镜像](https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml) |\n| stage         | no       | 定义job stage（默认：`test`）                                |\n| type          | no       | `stage`的别名（已弃用）                                      |\n| variables     | no       | 定义job级别的变量                                            |\n| only          | no       | 定义一列git分支，并为其创建job                               |\n| except        | no       | 定义一列git分支，不创建job                                   |\n| tags          | no       | 定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags） |\n| allow_failure | no       | 允许job失败。失败的job不影响commit状态                       |\n| when          | no       | 定义何时开始job。可以是`on_success`，`on_failure`，`always`或者`manual` |\n| dependencies  | no       | 定义job依赖关系，这样他们就可以互相传递artifacts             |\n| cache         | no       | 定义应在后续运行之间缓存的文件列表                           |\n| before_script | no       | 重写一组在作业前执行的命令                                   |\n| after_script  | no       | 重写一组在作业后执行的命令                                   |\n| environment   | no       | 定义此作业完成部署的环境名称                                 |\n| coverage      | no       | 定义给定作业的代码覆盖率设置                                 |\n| etry          | no       | 定义在发生故障时可以自动重试作业的时间和次数                 |\n| parallel      | no       | 定义应并行运行的作业实例数                                   |\n\n### extends\n\n> 是在 GitLab 11.3 中引入的。\n\n`extends`定义了一个使用`extends`的作业将继承的条目名称。它是使用[YAML锚点](https://docs.gitlab.com/ee/ci/yaml/README.html#anchors)的替代方案，并且更加灵活和可读：\n\n```yaml\n.tests:\n  script: rake test\n  stage: test\n  only:\n    refs:\n      - branches\n\nrspec:\n  extends: .tests\n  script: rake rspec\n  only:\n    variables:\n      - $RSPEC\n```\n\n在上面的示例中，`rspec`作业继承自`.tests`模板作业。 GitLab 将根据键执行反向深度合并。 GitLab将：\n\n- 将`rspec`内容以递归方式合并到`.tests`中。\n- 不合并键的值。\n\n这实际生成的是以下`rspec`作业：\n\n```yaml\nrspec:\n  script: rake rspec\n  stage: test\n  only:\n    refs:\n      - branches\n    variables:\n      - $RSPEC\n```\n\n> **注**: `rake test`已被`rake rspec`脚本覆盖。\n\n### image 和 services\n\n这两个关键字允许使用一个自定义的 Docker 镜像和一系列的服务，并且可以用于整个 job 周期。详细配置文档请查看[a separate document](https://docs.gitlab.com/ee/ci/docker/README.html)。\n\n### before_script 和 after_script\n\n`before_script`用来定义所有 job 之前运行的命令，`after_script`用来定义所有 job 之后运行的命令。它们可以是一个数组或者是多行字符串。\n\n### stages\n\nstages 用来定义可以被 job 调用的 stages。stages 的规范允许有灵活的多级 pipelines。\n\nstages中的元素顺序决定了对应job的执行顺序：\n\n1. 相同 stage 的 job 可以平行执行。\n2. 下一个 stage 的 job 会在前一个 stage 的 job 成功后开始执行。\n\n接下仔细看看这个例子，它包含了3个 stage：\n\n```yaml\nstages:\n - build\n - test\n - deploy\n```\n\n1. 首先，所有 build 的 jobs 都是并行执行的。\n2. 所有 build 的 jobs 执行成功后，test 的 jobs 才会开始并行执行。\n3. 所有 test 的 jobs 执行成功，deploy 的 jobs 才会开始并行执行。\n4. 所有的 deploy 的 jobs 执行成功，`commit`才会标记为`success`。\n5. 任何一个前置的 jobs 失败了，`commit`会标记为`failed`并且下一个 stages 的 jobs 都不会执行。\n\n这有两个特殊的例子值得一提：\n\n1. 如果`.gitlab-ci.yml`中没有定义stages，那么 job's stages 会默认定义为`build`，`test`和`deploy`。\n2. 如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。\n\n### only 和 except\n\n`only`和`except`是两个参数用分支策略来限制 jobs 构建：\n\n- `only`定义哪些分支和标签的git项目将会被job执行。\n- `except`定义哪些分支和标签的git项目将不会被job执行。\n\n下面是refs策略的使用规则：\n\n- only 和 except 可同时使用。如果`only`和`except`在一个 job 配置中同时存在，则以 only 为准，跳过 except(从下面示例中得出)。\n- only 和 except 可以使用正则表达式。\n- only 和 except 允许使用特殊的关键字：`branches`，`tags`和`triggers`。\n- only 和 except 允许使用指定仓库地址但不是forks的仓库(查看示例3)。\n  \n在下面这个例子中，job 将只会运行以`issue-`开始的refs(分支)，然而`except`中设置将被跳过。\n\n```yaml\njob:\n  # use regexp\n  only:\n    - /^issue-.*$/\n  # use special keyword\n  except:\n    - branches\n```\n\n在下面这个例子中，job 将只会执行有`tags`的refs，或者通过`API`触发器明确地请求构建。\n\n```yaml\njob:\n  # use special keywords\n  only:\n    - tags\n    - triggers\n```\n\n下面这个例子将会为所有的分支执行job，但 master 分支除外。\n\n```yaml\njob:\n  only:\n    - branches@gitlab-org/gitlab-ce\n  except:\n    - master@gitlab-org/gitlab-ce\n```\n\n### variables\n\nGItLab CI 允许在`.gitlab-ci.yml`文件中添加变量，并在 job 环境中起作用。因为这些配置是存储在 git 仓库中，所以**最好是存储项目的非敏感配置**，例如：\n\n```yaml\nvariables:\n  DATABASE_URL:\"postgres://postgres@postgres/my_database\"\n```\n\n这些变量可以被后续的命令和脚本使用。\n\n除了用户自定义的变量外，Runner 也可以定义它自己的变量。`CI_COMMIT_REG_NAME`就是一个很好的例子，它的值表示用于构建项目的分支或tag名称。除了在`.gitlab-ci.yml`中设置变量外，还有可以通过 GitLab 的界面上设置私有变量。\n\n这里有更多关于[variables](https://docs.gitlab.com/ce/ci/variables/README.html)的介绍。\n\n### cache\n\n#### cache: paths\n\n使用`paths`指令选择要缓存的文件或目录。也可以使用通配符。\n\n如果 cache 定义在 jobs 的作用域之外，那么它就是全局缓存，所有 jobs 都可以使用该缓存。\n\n缓存`binaries`和`.config`中的所有文件：\n\n```yaml\nrspec:\n  script: test\n  cache:\n    paths:\n    - binaries/\n    - .config\n```\n\n缓存`git`中没有被跟踪的文件：\n\n```yaml\nrspec:\n  script: test\n  cache:\n    untracked: true\n```\n\n缓存`binaries`下没有被`git`跟踪的文件：\n\n```yaml\nrspec:\n  script: test\n  cache:\n    untracked: true\n    paths:\n    - binaries/\n```\n\njob 中优先级高于全局的。下面这个`rspec` job中将只会缓存`binaries/`下的文件：\n\n```yaml\ncache:\n  paths:\n  - my/files\n\nrspec:\n  script: test\n  cache:\n    key: rspec\n    paths:\n    - binaries/\n```\n\n注意，缓存是在 jobs 之前进行共享的。如果你不同的 jobs 缓存不同的文件路径，必须设置不同的`cache:key`，否则缓存内容将被重写。缓存只是尽力而为之，所以别期望缓存会一直存在。\n\n#### cache: key\n\n`key`指令允许我们定义缓存的作用域(亲和性)，可以是所有 jobs 的单个缓存，也可以是每个 job，也可以是每个分支或者是任何你认为合适的地方。它也可以让你很好的调整缓存，允许你设置不同 jobs 的缓存，甚至是不同分支的缓存。\n\n`cache:key`可以使用任何的[预定义变量](https://docs.gitlab.com/ce/ci/variables/README.html)。\n\n默认key是默认设置的这个项目缓存，因此默认情况下，从GitLab 9.0开始，每个 pipelines 和 jobs 中可以共享一切。\n\n配置示例\n\n缓存每个job：\n\n```yaml\ncache:\n  key: \"$CI_JOB_NAME\"\n  untracked: true\n```\n\n缓存每个分支：\n\n```yaml\ncache:\n  key: \"$CI_COMMIT_REF_NAME\"\n  untracked: true\n```\n\n缓存每个 job 且每个分支：\n\n```yaml\ncache:\n  key: \"$CI_JOB_NAME/$CI_COMMIT_REF_NAME\"\n  untracked: true\n```\n\n缓存每个分支且每个stage：\n\n```yaml\ncache:\n  key: \"$CI_JOB_STAGE/$CI_COMMIT_REF_NAME\"\n  untracked: true\n```\n\n如果使用的Windows Batch(windows批处理)来跑脚本需要用%替代$：\n\n```yaml\ncache:\n  key: \"%CI_JOB_STAGE%/%CI_COMMIT_REF_NAME%\"\n  untracked: true\n```\n\n### allow_failure\n\n`allow_failure`可以用于当你想设置一个 job 失败的之后并不影响后续的CI组件的时候。失败的 jobs 不会影响到`commit`状态。\n\n当开启了允许 job 失败，所有的 intents 和 purposes 里的 pipeline 都是成功/绿色，但是也会有一个\"`CI build passed with warnings`\"信息显示在`Merge Request`或`commit`或`job page`。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。\n\n下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个 stage，因为这里有设置了`allow_failure: true`。\n\n```yaml\njob1:\n  stage: test\n  script:\n    - execute_script_that_will_fail\n  allow_failure: true\n\njob2:\n  stage: test\n  script:\n    - execute_script_that_will_succeed\n\njob3:\n  stage: deploy\n  script:\n    - deploy_to_staging\n```\n\n### when\n\n`when`用于实现在发生故障或尽管失败时运行的作业。when可以设置以下值：\n\n- `on_success` - 只有前面 stages 的所有工作成功时才执行。这是默认值。\n- `on_failure` - 当前面 stages 中任意一个jobs失败后执行。\n- `always` - 无论前面 stages 中 jobs 状态如何都执行。\n- `manual` - 手动执行(GitLab8.10增加)。更多请查看手动操作。\n\n### artifacts\n\n`artifacts`用于指定成功后应附加到 job 的文件和目录的列表。只能使用项目工作间内的文件或目录路径。在job成功完成后artifacts将会发送到GitLab中，同时也会在 GitLab UI 中提供下载。如果想要在不通的 job 之间传递`artifacts`，请查阅[依赖关系](https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies)。以下是一些例子：\n\n发送`binaries`和`.config`中的所有文件：\n\n```yaml\nartifacts:\n  paths:\n  - binaries/\n  - .config\n```\n\n发送所有没有被Git跟踪的文件：\n\n```yaml\nartifacts:\n  untracked: true\n```\n\n发送没有被Git跟踪和`binaries`中的所有文件：\n\n```yaml\nartifacts:\n  untracked: true\n  paths:\n  - binaries/\n```\n\n## 五、其他相关内容\n\n### 1 API触发器 Triggers\n\nTriggers 可用于强制使用API调用重建特定分支，`tag`或`commits`。API的使用示例可以在`Settings` -> `CI/CD` -> `Pipeline triggers`中找到。\n\n在`triggers`文档中[查看更多](https://docs.gitlab.com/ce/ci/triggers/README.html)。\n\n### 2 配置定时任务\n\nGitLab CI 中可以在 GitLab `Settings` -> `CI/CD` -> `Schedules`中配置定时任务，点击`New Schedule`按钮，可以配置你流水线的定时执行任务，包括：描述信息、定时的Cron表达式、目标分支、变量等信息。\n\n然后在需要定时执行的作业的`only`分支写上`schedules`即可。\n\n### 3 校验 .gitlab-ci.yml\n\nGitLab CI 的每个实例都有一个名为`Lint`的嵌入式调试工具。 你可以在 GitLab 实例的`-/ci/lint`下找到该链接。\n\n### 4 配置邮件发送\n\n如果希望在每次构建完成后（或者在仅构建失败的情况下），想邮件发送给相关开发人员，则可以在 GitLab `Settings` -> `Integrations` 中找到`Pipelines emails`，点击进去就可以配置邮件发送相关的内容了。\n\n### 5 GitLab Pages\n\n[GitLab Pages](https://gitlab.com/pages/)是用于托管静态文件的服务。而`pages`是一个特殊的job，用于将静态的内容上传到GitLab，可用于为您的网站提供服务。它有特殊的语法，因此必须满足以下两个要求：\n\n- 任何静态内容必须放在`public/`目录下\n- artifacts必须定义在`public/`目录下\n\n下面的这个例子是将所有文件从项目根目录移动到`public/`目录。`.public`工作流是`cp`，并且它不会循环复制`public/`本身。\n\n```yaml\npages:\n  stage: deploy\n  script:\n  - mkdir .public\n  - cp -r * .public\n  - mv .public public\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\n```\n\n更多内容请查看[GitLab Pages用户文档](https://docs.gitlab.com/ce/user/project/pages/index.html)。\n\n### 6 跳过 jobs\n\n如果你的`commit`信息中包含`[ci skip]`或者`[skip ci]`，不论大小写，那么这个`commit`将会创建但是 jobs 也会跳过。\n\n---\n\n## 参考文档\n\n- [官方文档地址](https://docs.gitlab.com/ce/ci/yaml/README.html)\n- [segmentfault yaml配置中文翻译](https://segmentfault.com/a/1190000010442764#articleHeader24)","source":"_posts/devops/GitLab CI 介绍和使用.md","raw":"---\ntitle: GitLab CI/CD 介绍和使用\ndate: 2018-11-22 23:30:00\nauthor: blinkfox\nimg: https://statics.sh1a.qingstor.com/2018/11/22/gitlab-ci-machine.png\ncategories: 软件工具\ntags:\n  - GitLab CI\n  - DevOps\n  - Jenkins\n---\n\n## 一、持续集成介绍\n\n> 持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。—— Martin Fowler\n\n### 1 概念\n\n- **持续集成**(`Continuous Integration`)：**频繁地(一天多次)将代码集成到主干。**让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。“持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”\n- **持续交付**(`Continuous Delivery`)：**频繁地将软件的新版本，交付给质量团队或者用户，以供评审。**如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。\n- **持续部署**(`continuous Deployment`)：**代码通过评审以后，自动部署到生产环境。**是持续部署是持续交付的下一步，持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。\n\n### 2 持续集成的好处\n\n- **自动化构建且状态对每个人可见**。可以使用`Maven`、`Gradle`等来实现自动化构建，可以在构建过程中实现自动化测试（前提是有写单元测试用例）。集成服务器在持续集成过程中发现问题可以及时发送警告给相关的干系人。\n- **解放了重复性劳动。**自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。\n- **更快地发现和修复问题。**持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。\n- **更快的交付成果。**更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。\n- **减少手工的错误。**在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。\n- **减少了等待时间。**缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。\n- **更高的产品质量。**集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。\n\n### 3 常用持续集成工具\n\n- [Jenkins](https://jenkins.io/)\n- [GitLab CI](https://docs.gitlab.com/ee/ci/README.html)\n- [TeamCity](https://www.jetbrains.com/teamcity/)\n- [Travis CI](https://www.travis-ci.org/)\n- [Bamboo](https://www.atlassian.com/software/bamboo)\n- [CircleCI](https://circleci.com/)\n- ...\n\n## 二、Gitlab 持续集成\n\n![GitLab CI/CD](https://statics.sh1a.qingstor.com/2018/11/22/pipelines.png)\n\n### 1 概念介绍\n\n#### (1) GitLab\n\n[GitLab](https://about.gitlab.com/) 是一个利用`Ruby on Rails`开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与[GitHub](https://github.com/)类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。\n\n#### (2) GitLab CI/CD\n\n[GitLab CI/CD](https://docs.gitlab.com/ee/ci/README.html) 是`GitLab Continuous Integration`（Gitlab持续集成）的简称。GitLab 自`GitLab 8.0`开始提供了持续集成的功能，且对所有项目默认开启。只要在项目仓库的根目录添加`.gitlab-ci.yml`文件，并且配置了Runner（运行器），那么每一次`push`或者合并请求（`Merge Request`）都会触发[CI Pipeline](https://docs.gitlab.com/ce/ci/pipelines.html)。\n\n#### (3) GitLab Runner\n\n[GitLab Runner](https://docs.gitlab.com/runner/) `GitLab Runner`是一个开源项目，可以运行在 GNU / Linux，macOS 和 Windows 操作系统上。每次`push`的时候 GitLab CI 会根据`.gitlab-ci.yml`配置文件运行你流水线（`Pipeline`）中各个阶段的任务（`Job`），并将结果发送回 GitLab。GitLab Runner 是基于 Gitlab CI 的 API 进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和 Gitlab 安装在同一台机器上，且考虑到 GitLab Runner 的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。\n\nGitlab Runner 分为三种：\n\n- 共享Runner(`Shared runners`)\n- 专享Runner(`Specific runners`)\n- 分组Runner(`Group Runners`)\n\n#### (4) Pipelines\n\n[Pipelines](https://docs.gitlab.com/ce/ci/pipelines.html) 中文称为流水线，是分阶段执行的构建任务。如：安装依赖、运行测试、打包、部署开发服务器、部署生产服务器等流程。每一次`push`或者`Merge Request`都会触发生成一条新的Pipeline。\n\n下面是流水线示例图：\n\n![Pipeline Status](https://docs.gitlab.com/ce/ci/img/pipelines_index.png)\n\n#### (5) Stages\n\n[Stages](https://docs.gitlab.com/ce/ci/yaml/README.html#stages) 表示构建阶段，可以理解为上面所说“安装依赖”、“运行测试”等环节的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：\n\n- 所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始（当然可以在`.gitlab-ci.yml`文件中配置上一阶段失败时下一阶段也执行）\n- 只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功\n- 如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败\n\n下面是一个流水线内的阶段任务示例图：\n\n![Job Status](https://docs.gitlab.com/ce/ci/img/pipelines.png)\n\n#### (6) Jobs\n\n[Jobs](https://docs.gitlab.com/ce/ci/pipelines.html#jobs) 表示构建的作业（或称之为任务），表示某个 Stage 里面执行的具体任务。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：\n\n- 相同 Stage 中的 Jobs 无执行顺序要求，会并行执行\n- 相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功\n- 如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 也失败（可以在`.gitlab-ci.yml`文件中配置允许某 Job 可以失败，也算该 Stage 成功）\n\n#### (7) .gitlab-ci.yml\n\nGitLab 中默认开启了 Gitlab CI/CD 的支持，且使用[YAML](http://yaml.org/)文件[.gitlab-ci.yml](https://docs.gitlab.com/ee/ci/yaml/README.html#examples)来管理项目构建配置。该文件需要存放于项目仓库的根目录（默认路径，可在 GitLab 中修改），它定义该项目的 CI/CD 如何配置。所以，我们只需要在`.gitlab-ci.yml`配置文件中定义流水线的各个阶段，以及各个阶段中的若干作业（任务）即可。\n\n下面是`.gitlab-ci.yml`文件的一个简单的`Hello World`示例：\n\n```yaml\n# 定义 test 和 package 两个 Stages\nstages:\n  - test\n  - package\n\n# 定义 package 阶段的一个 job\npackage-job:\n  stage: package\n  script:\n    - echo \"Hello, package-job\"\n    - echo \"I am in package stage\"\n\n# 定义 test 阶段的一个 job\ntest-job:\n  stage: test\n  script:\n    - echo \"Hello, test-job\"\n    - echo \"I am in test stage\"\n```\n\n以上配置中，用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的`script`关键字是每个 job 中必须要包含的，它表示每个 job 要执行的命令。\n\n> **注**：猜猜上面例子的运行结果？\n\n#### (8) Badges\n\n[Badges](https://docs.gitlab.com/ce/ci/pipelines.html#badges) 即：**徽章**，当 Pipelines 执行过程中或者执行完成时会生成徽章，你可以将这些徽章加入到你的`README.md`文件中，便于从仓库主页看到最新的构建状态。\n\n徽章的链接形如下：\n\n```bash\nhttp://example.gitlab.com/namespace/project/badges/branch/build.svg \n```\n\n我们用 GitLab 项目的徽章作为例子，效果如下：\n\n![Gitlab build badges](https://gitlab.com/gitlab-org/gitlab-ce/badges/master/build.svg) ![Gitlab coverage badges](https://gitlab.com/gitlab-org/gitlab-ce/badges/master/coverage.svg?job=coverage)\n\n### 2 安装 GitLab Runner\n\n[这里](https://docs.gitlab.com/runner/install/index.html)有 GitLab Runner安装相关的资源和文档可供大家参考。以下仅以咱们公司常用的`Centos`为例来做安装说明。\n\n#### (1) 在线安装\n\n```bash\n# 添加官方的repo.\ncurl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | sudo bash\n\n# yum 安装Gtilab Runner.\nsudo yum install gitlab-runner\n```\n\n#### (2) 离线安装\n\n```bash\n# 安装Git\nsudo yum –y install git\n\n# rpm离线安装事先下载好的 Gitlab Runner rpm包.\nrpm -ivh gitlab-runner-10.5.0-1.x86_64.rpm\n```\n\n> **注**：Gitlab Runner 依赖了`Git`，所以，离线安装 Gitlab Runner 之前得首先安装Git，离线安装包可以从[这里](https://packages.gitlab.com/runner/gitlab-runner)下载。\n\n### 3 注册 Gitlab Runner\n\n安装了 GitLab Runner 之后,就可以为 GitLab 中的仓库[注册一个 Runner](https://docs.gitlab.com/runner/register/index.html)，注册的交互式命令如下：\n\n```bash\nsudo gitlab-runner register\n```\n\n命令的交互式的过程如下：\n\n```bash\n# 输入注册命令\nsudo gitlab-runner register\n\n# 输入公司的 GitLab 网站地址\nPlease enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )\nhttp://gitlab.xxxx.com/\n\n# 你项目仓库的token，token可以在 Settings -> CI/CD -> Runners settings 中找到.\nPlease enter the gitlab-ci token for this runner\nxxx\n\n# 输入描述这个 runner 的名称\nPlease enter the gitlab-ci description for this runner\n[hostame] my-runner\n\n# 输入 runner 的标签\nPlease enter the gitlab-ci tags for this runner (comma separated):\nmy-tag,another-tag\n\n# 输入 runner 的执行器.\nPlease enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:\nshell\n```\n\n以上流程注册成功之后，就可以在你的项目仓库中 `Settings` -> `CI/CD` -> `Runners settings` 看到这个 Runner 了。\n\n### 4 Gitlab Runner 常用命令汇总\n\n下面的表格中列出了一些常用的[Gitlab Runner命令](https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-list)，以供参考：\n\n| 命令                     | 描述                                                         |\n| ------------------------ | :----------------------------------------------------------- |\n| gitlab-runner run        | 运行一个runner服务                                           |\n| gitlab-runner register   | 注册一个新的runner                                           |\n| gitlab-runner start      | 启动服务                                                     |\n| gitlab-runner stop       | 关闭服务                                                     |\n| gitlab-runner restart    | 重启服务                                                     |\n| gitlab-runner status     | 查看各个runner的状态                                         |\n| gitlab-runner unregister | 注销掉某个runner                                             |\n| gitlab-runner list       | 显示所有运行着的runner                                       |\n| gitlab-runner verify     | 检查已注册的运行程序是否可以连接到GitLab，但它不验证GitLab Runner服务是否正在使用运行程序。 |\n\n## 三、一个Web项目 CI/CD 简单示例\n\n接下来，用一个实际项目来演示 GitLab CI/CD 的配置和使用，其中主要包括：编译测试、项目打包、部署服务、Sonar手动检查、Sonar定时检查五个阶段。\n\n下面用一个传统的 Java web 项目(这里称之为`cidemo`)和`Tomcat`来作为示例，并用来展示常用配置的使用。当我每次`push`代码或者`Merge Request`时，都会生成一条流水线，且会自动执行我们上面所说的一些阶段，而Sonar手动检查我们设置为手动操作，且再额外配置Sonar定时检查的任务。\n\n> **注**：我 Gitlab Runner 是安装在`Centos`环境中，并使用的`shell`执行器。\n\n```yaml\n# 定义stages\nstages:\n  - test\n  - install\n  - run\n  - sonar\n\n# 定义安装包的存放位置和Tomcat服务器的地址的变量，便于后续部署使用.\nvariables:\n  CIDEMO_PACKAGE_DIR: '/home/gitlab-runner/packages/cidemo/'\n  SERVER_HOME_DIR: '/home/gitlab-runner/tomcat/cidemo-tomcat/'\n\n###################### 构建编译和单元测试的job. #######################\n\n编译测试任务:\n  stage: test\n  only:\n    - branches\n  script:\n    - mvn clean test\n\n###################### Maven安装得到war包的job. #######################\n\n打包任务:\n  stage: install\n  only:\n    - develop\n  script:\n    - mvn install\n    - echo '准备将最新的war包复制、保存到某个目录里面供后续使用.'\n    - rm -rf $CIDEMO_PACKAGE_DIR/*.war\n    - cp target/*.war $CIDEMO_PACKAGE_DIR/cidemo.war\n\n####################### 部署运行war包的job. #######################\n\n部署运行任务:\n  stage: run\n  only:\n    - develop\n  script:\n    - echo '准备部署和运行war包！(为了方便部署到了Tomcat中运行)'\n    - cd $SERVER_HOME_DIR\n    - sh bin/shutdown.sh\n    - rm -rf webapps/cidemo.war\n    - cp $CIDEMO_PACKAGE_DIR/cidemo.war $SERVER_HOME_DIR/webapps/cidemo.war\n    - nohup sh ./bin/startup.sh > logs/cidemo_nohup.log 2>&1 &\n\n###################### Sonar手动构建的job. #######################\n\nSonar手动检查:\n  stage: sonar\n  when: manual\n  only:\n    - develop\n  script:\n    - echo '准备对项目代码做sonar的质量检查！'\n    - mvn compile && mvn sonar:sonar -Dsonar.host.url=http://172.16.34.102:9000 -Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34\n\n###################### Sonar每晚定时构建的job. #######################\n\nSonar定时检查:\n  stage: sonar\n  only:\n    - schedules\n  script:\n    - echo '开始定时对项目代码做sonar的质量检查！'\n    - mvn compile && mvn sonar:sonar -Dsonar.host.url=http://172.16.34.102:9000 -Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34\n```\n\n## 四、Gitlab CI/CD yaml 常用配置介绍\n\n开始构建之前`.gitlab-ci.yml`文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含script部分，`.gitlab-ci.yml`允许指定无限量 jobs。每个 jobs 必须有一个唯一的名字，且名字不能是下面列出的保留字段：\n\n- `image`\n- `services`\n- `stages`\n- `types`\n- `before_script`\n- `after_script`\n- `variables`\n- `cache`\n\njob由一列参数来定义 jobs 的行为：\n\n| Keyword       | Required | Description                                                  |\n| ------------- | -------- | ------------------------------------------------------------ |\n| script        | yes      | Runner执行的命令或脚本                                       |\n| extends       | no       | 定义此作业将继承的配置条目                                   |\n| image         | no       | 所使用的docker镜像，查阅[使用docker镜像](https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml) |\n| services      | no       | 所使用的docker服务，查阅[使用docker镜像](https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml) |\n| stage         | no       | 定义job stage（默认：`test`）                                |\n| type          | no       | `stage`的别名（已弃用）                                      |\n| variables     | no       | 定义job级别的变量                                            |\n| only          | no       | 定义一列git分支，并为其创建job                               |\n| except        | no       | 定义一列git分支，不创建job                                   |\n| tags          | no       | 定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags） |\n| allow_failure | no       | 允许job失败。失败的job不影响commit状态                       |\n| when          | no       | 定义何时开始job。可以是`on_success`，`on_failure`，`always`或者`manual` |\n| dependencies  | no       | 定义job依赖关系，这样他们就可以互相传递artifacts             |\n| cache         | no       | 定义应在后续运行之间缓存的文件列表                           |\n| before_script | no       | 重写一组在作业前执行的命令                                   |\n| after_script  | no       | 重写一组在作业后执行的命令                                   |\n| environment   | no       | 定义此作业完成部署的环境名称                                 |\n| coverage      | no       | 定义给定作业的代码覆盖率设置                                 |\n| etry          | no       | 定义在发生故障时可以自动重试作业的时间和次数                 |\n| parallel      | no       | 定义应并行运行的作业实例数                                   |\n\n### extends\n\n> 是在 GitLab 11.3 中引入的。\n\n`extends`定义了一个使用`extends`的作业将继承的条目名称。它是使用[YAML锚点](https://docs.gitlab.com/ee/ci/yaml/README.html#anchors)的替代方案，并且更加灵活和可读：\n\n```yaml\n.tests:\n  script: rake test\n  stage: test\n  only:\n    refs:\n      - branches\n\nrspec:\n  extends: .tests\n  script: rake rspec\n  only:\n    variables:\n      - $RSPEC\n```\n\n在上面的示例中，`rspec`作业继承自`.tests`模板作业。 GitLab 将根据键执行反向深度合并。 GitLab将：\n\n- 将`rspec`内容以递归方式合并到`.tests`中。\n- 不合并键的值。\n\n这实际生成的是以下`rspec`作业：\n\n```yaml\nrspec:\n  script: rake rspec\n  stage: test\n  only:\n    refs:\n      - branches\n    variables:\n      - $RSPEC\n```\n\n> **注**: `rake test`已被`rake rspec`脚本覆盖。\n\n### image 和 services\n\n这两个关键字允许使用一个自定义的 Docker 镜像和一系列的服务，并且可以用于整个 job 周期。详细配置文档请查看[a separate document](https://docs.gitlab.com/ee/ci/docker/README.html)。\n\n### before_script 和 after_script\n\n`before_script`用来定义所有 job 之前运行的命令，`after_script`用来定义所有 job 之后运行的命令。它们可以是一个数组或者是多行字符串。\n\n### stages\n\nstages 用来定义可以被 job 调用的 stages。stages 的规范允许有灵活的多级 pipelines。\n\nstages中的元素顺序决定了对应job的执行顺序：\n\n1. 相同 stage 的 job 可以平行执行。\n2. 下一个 stage 的 job 会在前一个 stage 的 job 成功后开始执行。\n\n接下仔细看看这个例子，它包含了3个 stage：\n\n```yaml\nstages:\n - build\n - test\n - deploy\n```\n\n1. 首先，所有 build 的 jobs 都是并行执行的。\n2. 所有 build 的 jobs 执行成功后，test 的 jobs 才会开始并行执行。\n3. 所有 test 的 jobs 执行成功，deploy 的 jobs 才会开始并行执行。\n4. 所有的 deploy 的 jobs 执行成功，`commit`才会标记为`success`。\n5. 任何一个前置的 jobs 失败了，`commit`会标记为`failed`并且下一个 stages 的 jobs 都不会执行。\n\n这有两个特殊的例子值得一提：\n\n1. 如果`.gitlab-ci.yml`中没有定义stages，那么 job's stages 会默认定义为`build`，`test`和`deploy`。\n2. 如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。\n\n### only 和 except\n\n`only`和`except`是两个参数用分支策略来限制 jobs 构建：\n\n- `only`定义哪些分支和标签的git项目将会被job执行。\n- `except`定义哪些分支和标签的git项目将不会被job执行。\n\n下面是refs策略的使用规则：\n\n- only 和 except 可同时使用。如果`only`和`except`在一个 job 配置中同时存在，则以 only 为准，跳过 except(从下面示例中得出)。\n- only 和 except 可以使用正则表达式。\n- only 和 except 允许使用特殊的关键字：`branches`，`tags`和`triggers`。\n- only 和 except 允许使用指定仓库地址但不是forks的仓库(查看示例3)。\n  \n在下面这个例子中，job 将只会运行以`issue-`开始的refs(分支)，然而`except`中设置将被跳过。\n\n```yaml\njob:\n  # use regexp\n  only:\n    - /^issue-.*$/\n  # use special keyword\n  except:\n    - branches\n```\n\n在下面这个例子中，job 将只会执行有`tags`的refs，或者通过`API`触发器明确地请求构建。\n\n```yaml\njob:\n  # use special keywords\n  only:\n    - tags\n    - triggers\n```\n\n下面这个例子将会为所有的分支执行job，但 master 分支除外。\n\n```yaml\njob:\n  only:\n    - branches@gitlab-org/gitlab-ce\n  except:\n    - master@gitlab-org/gitlab-ce\n```\n\n### variables\n\nGItLab CI 允许在`.gitlab-ci.yml`文件中添加变量，并在 job 环境中起作用。因为这些配置是存储在 git 仓库中，所以**最好是存储项目的非敏感配置**，例如：\n\n```yaml\nvariables:\n  DATABASE_URL:\"postgres://postgres@postgres/my_database\"\n```\n\n这些变量可以被后续的命令和脚本使用。\n\n除了用户自定义的变量外，Runner 也可以定义它自己的变量。`CI_COMMIT_REG_NAME`就是一个很好的例子，它的值表示用于构建项目的分支或tag名称。除了在`.gitlab-ci.yml`中设置变量外，还有可以通过 GitLab 的界面上设置私有变量。\n\n这里有更多关于[variables](https://docs.gitlab.com/ce/ci/variables/README.html)的介绍。\n\n### cache\n\n#### cache: paths\n\n使用`paths`指令选择要缓存的文件或目录。也可以使用通配符。\n\n如果 cache 定义在 jobs 的作用域之外，那么它就是全局缓存，所有 jobs 都可以使用该缓存。\n\n缓存`binaries`和`.config`中的所有文件：\n\n```yaml\nrspec:\n  script: test\n  cache:\n    paths:\n    - binaries/\n    - .config\n```\n\n缓存`git`中没有被跟踪的文件：\n\n```yaml\nrspec:\n  script: test\n  cache:\n    untracked: true\n```\n\n缓存`binaries`下没有被`git`跟踪的文件：\n\n```yaml\nrspec:\n  script: test\n  cache:\n    untracked: true\n    paths:\n    - binaries/\n```\n\njob 中优先级高于全局的。下面这个`rspec` job中将只会缓存`binaries/`下的文件：\n\n```yaml\ncache:\n  paths:\n  - my/files\n\nrspec:\n  script: test\n  cache:\n    key: rspec\n    paths:\n    - binaries/\n```\n\n注意，缓存是在 jobs 之前进行共享的。如果你不同的 jobs 缓存不同的文件路径，必须设置不同的`cache:key`，否则缓存内容将被重写。缓存只是尽力而为之，所以别期望缓存会一直存在。\n\n#### cache: key\n\n`key`指令允许我们定义缓存的作用域(亲和性)，可以是所有 jobs 的单个缓存，也可以是每个 job，也可以是每个分支或者是任何你认为合适的地方。它也可以让你很好的调整缓存，允许你设置不同 jobs 的缓存，甚至是不同分支的缓存。\n\n`cache:key`可以使用任何的[预定义变量](https://docs.gitlab.com/ce/ci/variables/README.html)。\n\n默认key是默认设置的这个项目缓存，因此默认情况下，从GitLab 9.0开始，每个 pipelines 和 jobs 中可以共享一切。\n\n配置示例\n\n缓存每个job：\n\n```yaml\ncache:\n  key: \"$CI_JOB_NAME\"\n  untracked: true\n```\n\n缓存每个分支：\n\n```yaml\ncache:\n  key: \"$CI_COMMIT_REF_NAME\"\n  untracked: true\n```\n\n缓存每个 job 且每个分支：\n\n```yaml\ncache:\n  key: \"$CI_JOB_NAME/$CI_COMMIT_REF_NAME\"\n  untracked: true\n```\n\n缓存每个分支且每个stage：\n\n```yaml\ncache:\n  key: \"$CI_JOB_STAGE/$CI_COMMIT_REF_NAME\"\n  untracked: true\n```\n\n如果使用的Windows Batch(windows批处理)来跑脚本需要用%替代$：\n\n```yaml\ncache:\n  key: \"%CI_JOB_STAGE%/%CI_COMMIT_REF_NAME%\"\n  untracked: true\n```\n\n### allow_failure\n\n`allow_failure`可以用于当你想设置一个 job 失败的之后并不影响后续的CI组件的时候。失败的 jobs 不会影响到`commit`状态。\n\n当开启了允许 job 失败，所有的 intents 和 purposes 里的 pipeline 都是成功/绿色，但是也会有一个\"`CI build passed with warnings`\"信息显示在`Merge Request`或`commit`或`job page`。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。\n\n下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个 stage，因为这里有设置了`allow_failure: true`。\n\n```yaml\njob1:\n  stage: test\n  script:\n    - execute_script_that_will_fail\n  allow_failure: true\n\njob2:\n  stage: test\n  script:\n    - execute_script_that_will_succeed\n\njob3:\n  stage: deploy\n  script:\n    - deploy_to_staging\n```\n\n### when\n\n`when`用于实现在发生故障或尽管失败时运行的作业。when可以设置以下值：\n\n- `on_success` - 只有前面 stages 的所有工作成功时才执行。这是默认值。\n- `on_failure` - 当前面 stages 中任意一个jobs失败后执行。\n- `always` - 无论前面 stages 中 jobs 状态如何都执行。\n- `manual` - 手动执行(GitLab8.10增加)。更多请查看手动操作。\n\n### artifacts\n\n`artifacts`用于指定成功后应附加到 job 的文件和目录的列表。只能使用项目工作间内的文件或目录路径。在job成功完成后artifacts将会发送到GitLab中，同时也会在 GitLab UI 中提供下载。如果想要在不通的 job 之间传递`artifacts`，请查阅[依赖关系](https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies)。以下是一些例子：\n\n发送`binaries`和`.config`中的所有文件：\n\n```yaml\nartifacts:\n  paths:\n  - binaries/\n  - .config\n```\n\n发送所有没有被Git跟踪的文件：\n\n```yaml\nartifacts:\n  untracked: true\n```\n\n发送没有被Git跟踪和`binaries`中的所有文件：\n\n```yaml\nartifacts:\n  untracked: true\n  paths:\n  - binaries/\n```\n\n## 五、其他相关内容\n\n### 1 API触发器 Triggers\n\nTriggers 可用于强制使用API调用重建特定分支，`tag`或`commits`。API的使用示例可以在`Settings` -> `CI/CD` -> `Pipeline triggers`中找到。\n\n在`triggers`文档中[查看更多](https://docs.gitlab.com/ce/ci/triggers/README.html)。\n\n### 2 配置定时任务\n\nGitLab CI 中可以在 GitLab `Settings` -> `CI/CD` -> `Schedules`中配置定时任务，点击`New Schedule`按钮，可以配置你流水线的定时执行任务，包括：描述信息、定时的Cron表达式、目标分支、变量等信息。\n\n然后在需要定时执行的作业的`only`分支写上`schedules`即可。\n\n### 3 校验 .gitlab-ci.yml\n\nGitLab CI 的每个实例都有一个名为`Lint`的嵌入式调试工具。 你可以在 GitLab 实例的`-/ci/lint`下找到该链接。\n\n### 4 配置邮件发送\n\n如果希望在每次构建完成后（或者在仅构建失败的情况下），想邮件发送给相关开发人员，则可以在 GitLab `Settings` -> `Integrations` 中找到`Pipelines emails`，点击进去就可以配置邮件发送相关的内容了。\n\n### 5 GitLab Pages\n\n[GitLab Pages](https://gitlab.com/pages/)是用于托管静态文件的服务。而`pages`是一个特殊的job，用于将静态的内容上传到GitLab，可用于为您的网站提供服务。它有特殊的语法，因此必须满足以下两个要求：\n\n- 任何静态内容必须放在`public/`目录下\n- artifacts必须定义在`public/`目录下\n\n下面的这个例子是将所有文件从项目根目录移动到`public/`目录。`.public`工作流是`cp`，并且它不会循环复制`public/`本身。\n\n```yaml\npages:\n  stage: deploy\n  script:\n  - mkdir .public\n  - cp -r * .public\n  - mv .public public\n  artifacts:\n    paths:\n    - public\n  only:\n  - master\n```\n\n更多内容请查看[GitLab Pages用户文档](https://docs.gitlab.com/ce/user/project/pages/index.html)。\n\n### 6 跳过 jobs\n\n如果你的`commit`信息中包含`[ci skip]`或者`[skip ci]`，不论大小写，那么这个`commit`将会创建但是 jobs 也会跳过。\n\n---\n\n## 参考文档\n\n- [官方文档地址](https://docs.gitlab.com/ce/ci/yaml/README.html)\n- [segmentfault yaml配置中文翻译](https://segmentfault.com/a/1190000010442764#articleHeader24)","slug":"devops/GitLab CI 介绍和使用","published":1,"updated":"2024-12-12T16:49:46.413Z","comments":1,"layout":"post","photos":[],"_id":"cm4o27veg000rge9k0yrlf1hs","content":"<h2 id=\"一、持续集成介绍\"><a href=\"#一、持续集成介绍\" class=\"headerlink\" title=\"一、持续集成介绍\"></a>一、持续集成介绍</h2><blockquote>\n<p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。—— Martin Fowler</p>\n</blockquote>\n<h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1 概念\"></a>1 概念</h3><ul>\n<li><strong>持续集成</strong>(<code>Continuous Integration</code>)：<strong>频繁地(一天多次)将代码集成到主干。</strong>让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。“持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</li>\n<li><strong>持续交付</strong>(<code>Continuous Delivery</code>)：<strong>频繁地将软件的新版本，交付给质量团队或者用户，以供评审。</strong>如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</li>\n<li><strong>持续部署</strong>(<code>continuous Deployment</code>)：<strong>代码通过评审以后，自动部署到生产环境。</strong>是持续部署是持续交付的下一步，持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</li>\n</ul>\n<h3 id=\"2-持续集成的好处\"><a href=\"#2-持续集成的好处\" class=\"headerlink\" title=\"2 持续集成的好处\"></a>2 持续集成的好处</h3><ul>\n<li><strong>自动化构建且状态对每个人可见</strong>。可以使用<code>Maven</code>、<code>Gradle</code>等来实现自动化构建，可以在构建过程中实现自动化测试（前提是有写单元测试用例）。集成服务器在持续集成过程中发现问题可以及时发送警告给相关的干系人。</li>\n<li><strong>解放了重复性劳动。</strong>自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。</li>\n<li><strong>更快地发现和修复问题。</strong>持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。</li>\n<li><strong>更快的交付成果。</strong>更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。</li>\n<li><strong>减少手工的错误。</strong>在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。</li>\n<li><strong>减少了等待时间。</strong>缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。</li>\n<li><strong>更高的产品质量。</strong>集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。</li>\n</ul>\n<h3 id=\"3-常用持续集成工具\"><a href=\"#3-常用持续集成工具\" class=\"headerlink\" title=\"3 常用持续集成工具\"></a>3 常用持续集成工具</h3><ul>\n<li><a href=\"https://jenkins.io/\">Jenkins</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/README.html\">GitLab CI</a></li>\n<li><a href=\"https://www.jetbrains.com/teamcity/\">TeamCity</a></li>\n<li><a href=\"https://www.travis-ci.org/\">Travis CI</a></li>\n<li><a href=\"https://www.atlassian.com/software/bamboo\">Bamboo</a></li>\n<li><a href=\"https://circleci.com/\">CircleCI</a></li>\n<li>…</li>\n</ul>\n<h2 id=\"二、Gitlab-持续集成\"><a href=\"#二、Gitlab-持续集成\" class=\"headerlink\" title=\"二、Gitlab 持续集成\"></a>二、Gitlab 持续集成</h2><p><img src=\"https://statics.sh1a.qingstor.com/2018/11/22/pipelines.png\" alt=\"GitLab CI/CD\"></p>\n<h3 id=\"1-概念介绍\"><a href=\"#1-概念介绍\" class=\"headerlink\" title=\"1 概念介绍\"></a>1 概念介绍</h3><h4 id=\"1-GitLab\"><a href=\"#1-GitLab\" class=\"headerlink\" title=\"(1) GitLab\"></a>(1) GitLab</h4><p><a href=\"https://about.gitlab.com/\">GitLab</a> 是一个利用<code>Ruby on Rails</code>开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与<a href=\"https://github.com/\">GitHub</a>类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。</p>\n<h4 id=\"2-GitLab-CI-CD\"><a href=\"#2-GitLab-CI-CD\" class=\"headerlink\" title=\"(2) GitLab CI&#x2F;CD\"></a>(2) GitLab CI&#x2F;CD</h4><p><a href=\"https://docs.gitlab.com/ee/ci/README.html\">GitLab CI&#x2F;CD</a> 是<code>GitLab Continuous Integration</code>（Gitlab持续集成）的简称。GitLab 自<code>GitLab 8.0</code>开始提供了持续集成的功能，且对所有项目默认开启。只要在项目仓库的根目录添加<code>.gitlab-ci.yml</code>文件，并且配置了Runner（运行器），那么每一次<code>push</code>或者合并请求（<code>Merge Request</code>）都会触发<a href=\"https://docs.gitlab.com/ce/ci/pipelines.html\">CI Pipeline</a>。</p>\n<h4 id=\"3-GitLab-Runner\"><a href=\"#3-GitLab-Runner\" class=\"headerlink\" title=\"(3) GitLab Runner\"></a>(3) GitLab Runner</h4><p><a href=\"https://docs.gitlab.com/runner/\">GitLab Runner</a> <code>GitLab Runner</code>是一个开源项目，可以运行在 GNU &#x2F; Linux，macOS 和 Windows 操作系统上。每次<code>push</code>的时候 GitLab CI 会根据<code>.gitlab-ci.yml</code>配置文件运行你流水线（<code>Pipeline</code>）中各个阶段的任务（<code>Job</code>），并将结果发送回 GitLab。GitLab Runner 是基于 Gitlab CI 的 API 进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和 Gitlab 安装在同一台机器上，且考虑到 GitLab Runner 的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。</p>\n<p>Gitlab Runner 分为三种：</p>\n<ul>\n<li>共享Runner(<code>Shared runners</code>)</li>\n<li>专享Runner(<code>Specific runners</code>)</li>\n<li>分组Runner(<code>Group Runners</code>)</li>\n</ul>\n<h4 id=\"4-Pipelines\"><a href=\"#4-Pipelines\" class=\"headerlink\" title=\"(4) Pipelines\"></a>(4) Pipelines</h4><p><a href=\"https://docs.gitlab.com/ce/ci/pipelines.html\">Pipelines</a> 中文称为流水线，是分阶段执行的构建任务。如：安装依赖、运行测试、打包、部署开发服务器、部署生产服务器等流程。每一次<code>push</code>或者<code>Merge Request</code>都会触发生成一条新的Pipeline。</p>\n<p>下面是流水线示例图：</p>\n<p><img src=\"https://docs.gitlab.com/ce/ci/img/pipelines_index.png\" alt=\"Pipeline Status\"></p>\n<h4 id=\"5-Stages\"><a href=\"#5-Stages\" class=\"headerlink\" title=\"(5) Stages\"></a>(5) Stages</h4><p><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#stages\">Stages</a> 表示构建阶段，可以理解为上面所说“安装依赖”、“运行测试”等环节的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p>\n<ul>\n<li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始（当然可以在<code>.gitlab-ci.yml</code>文件中配置上一阶段失败时下一阶段也执行）</li>\n<li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li>\n<li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li>\n</ul>\n<p>下面是一个流水线内的阶段任务示例图：</p>\n<p><img src=\"https://docs.gitlab.com/ce/ci/img/pipelines.png\" alt=\"Job Status\"></p>\n<h4 id=\"6-Jobs\"><a href=\"#6-Jobs\" class=\"headerlink\" title=\"(6) Jobs\"></a>(6) Jobs</h4><p><a href=\"https://docs.gitlab.com/ce/ci/pipelines.html#jobs\">Jobs</a> 表示构建的作业（或称之为任务），表示某个 Stage 里面执行的具体任务。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p>\n<ul>\n<li>相同 Stage 中的 Jobs 无执行顺序要求，会并行执行</li>\n<li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li>\n<li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 也失败（可以在<code>.gitlab-ci.yml</code>文件中配置允许某 Job 可以失败，也算该 Stage 成功）</li>\n</ul>\n<h4 id=\"7-gitlab-ci-yml\"><a href=\"#7-gitlab-ci-yml\" class=\"headerlink\" title=\"(7) .gitlab-ci.yml\"></a>(7) .gitlab-ci.yml</h4><p>GitLab 中默认开启了 Gitlab CI&#x2F;CD 的支持，且使用<a href=\"http://yaml.org/\">YAML</a>文件<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#examples\">.gitlab-ci.yml</a>来管理项目构建配置。该文件需要存放于项目仓库的根目录（默认路径，可在 GitLab 中修改），它定义该项目的 CI&#x2F;CD 如何配置。所以，我们只需要在<code>.gitlab-ci.yml</code>配置文件中定义流水线的各个阶段，以及各个阶段中的若干作业（任务）即可。</p>\n<p>下面是<code>.gitlab-ci.yml</code>文件的一个简单的<code>Hello World</code>示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义 test 和 package 两个 Stages</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">package</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义 package 阶段的一个 job</span></span><br><span class=\"line\"><span class=\"attr\">package-job:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">package</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Hello, package-job&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;I am in package stage&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义 test 阶段的一个 job</span></span><br><span class=\"line\"><span class=\"attr\">test-job:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Hello, test-job&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;I am in test stage&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上配置中，用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的<code>script</code>关键字是每个 job 中必须要包含的，它表示每个 job 要执行的命令。</p>\n<blockquote>\n<p><strong>注</strong>：猜猜上面例子的运行结果？</p>\n</blockquote>\n<h4 id=\"8-Badges\"><a href=\"#8-Badges\" class=\"headerlink\" title=\"(8) Badges\"></a>(8) Badges</h4><p><a href=\"https://docs.gitlab.com/ce/ci/pipelines.html#badges\">Badges</a> 即：<strong>徽章</strong>，当 Pipelines 执行过程中或者执行完成时会生成徽章，你可以将这些徽章加入到你的<code>README.md</code>文件中，便于从仓库主页看到最新的构建状态。</p>\n<p>徽章的链接形如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://example.gitlab.com/namespace/project/badges/branch/build.svg </span><br></pre></td></tr></table></figure>\n\n<p>我们用 GitLab 项目的徽章作为例子，效果如下：</p>\n<p><img src=\"https://gitlab.com/gitlab-org/gitlab-ce/badges/master/build.svg\" alt=\"Gitlab build badges\"> <img src=\"https://gitlab.com/gitlab-org/gitlab-ce/badges/master/coverage.svg?job=coverage\" alt=\"Gitlab coverage badges\"></p>\n<h3 id=\"2-安装-GitLab-Runner\"><a href=\"#2-安装-GitLab-Runner\" class=\"headerlink\" title=\"2 安装 GitLab Runner\"></a>2 安装 GitLab Runner</h3><p><a href=\"https://docs.gitlab.com/runner/install/index.html\">这里</a>有 GitLab Runner安装相关的资源和文档可供大家参考。以下仅以咱们公司常用的<code>Centos</code>为例来做安装说明。</p>\n<h4 id=\"1-在线安装\"><a href=\"#1-在线安装\" class=\"headerlink\" title=\"(1) 在线安装\"></a>(1) 在线安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加官方的repo.</span></span><br><span class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | <span class=\"built_in\">sudo</span> bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yum 安装Gtilab Runner.</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install gitlab-runner</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-离线安装\"><a href=\"#2-离线安装\" class=\"headerlink\" title=\"(2) 离线安装\"></a>(2) 离线安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装Git</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum –y install git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rpm离线安装事先下载好的 Gitlab Runner rpm包.</span></span><br><span class=\"line\">rpm -ivh gitlab-runner-10.5.0-1.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注</strong>：Gitlab Runner 依赖了<code>Git</code>，所以，离线安装 Gitlab Runner 之前得首先安装Git，离线安装包可以从<a href=\"https://packages.gitlab.com/runner/gitlab-runner\">这里</a>下载。</p>\n</blockquote>\n<h3 id=\"3-注册-Gitlab-Runner\"><a href=\"#3-注册-Gitlab-Runner\" class=\"headerlink\" title=\"3 注册 Gitlab Runner\"></a>3 注册 Gitlab Runner</h3><p>安装了 GitLab Runner 之后,就可以为 GitLab 中的仓库<a href=\"https://docs.gitlab.com/runner/register/index.html\">注册一个 Runner</a>，注册的交互式命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> gitlab-runner register</span><br></pre></td></tr></table></figure>\n\n<p>命令的交互式的过程如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入注册命令</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> gitlab-runner register</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入公司的 GitLab 网站地址</span></span><br><span class=\"line\">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class=\"line\">http://gitlab.xxxx.com/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 你项目仓库的token，token可以在 Settings -&gt; CI/CD -&gt; Runners settings 中找到.</span></span><br><span class=\"line\">Please enter the gitlab-ci token <span class=\"keyword\">for</span> this runner</span><br><span class=\"line\">xxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入描述这个 runner 的名称</span></span><br><span class=\"line\">Please enter the gitlab-ci description <span class=\"keyword\">for</span> this runner</span><br><span class=\"line\">[hostame] my-runner</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入 runner 的标签</span></span><br><span class=\"line\">Please enter the gitlab-ci tags <span class=\"keyword\">for</span> this runner (comma separated):</span><br><span class=\"line\">my-tag,another-tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入 runner 的执行器.</span></span><br><span class=\"line\">Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br><span class=\"line\">shell</span><br></pre></td></tr></table></figure>\n\n<p>以上流程注册成功之后，就可以在你的项目仓库中 <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Runners settings</code> 看到这个 Runner 了。</p>\n<h3 id=\"4-Gitlab-Runner-常用命令汇总\"><a href=\"#4-Gitlab-Runner-常用命令汇总\" class=\"headerlink\" title=\"4 Gitlab Runner 常用命令汇总\"></a>4 Gitlab Runner 常用命令汇总</h3><p>下面的表格中列出了一些常用的<a href=\"https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-list\">Gitlab Runner命令</a>，以供参考：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gitlab-runner run</td>\n<td align=\"left\">运行一个runner服务</td>\n</tr>\n<tr>\n<td>gitlab-runner register</td>\n<td align=\"left\">注册一个新的runner</td>\n</tr>\n<tr>\n<td>gitlab-runner start</td>\n<td align=\"left\">启动服务</td>\n</tr>\n<tr>\n<td>gitlab-runner stop</td>\n<td align=\"left\">关闭服务</td>\n</tr>\n<tr>\n<td>gitlab-runner restart</td>\n<td align=\"left\">重启服务</td>\n</tr>\n<tr>\n<td>gitlab-runner status</td>\n<td align=\"left\">查看各个runner的状态</td>\n</tr>\n<tr>\n<td>gitlab-runner unregister</td>\n<td align=\"left\">注销掉某个runner</td>\n</tr>\n<tr>\n<td>gitlab-runner list</td>\n<td align=\"left\">显示所有运行着的runner</td>\n</tr>\n<tr>\n<td>gitlab-runner verify</td>\n<td align=\"left\">检查已注册的运行程序是否可以连接到GitLab，但它不验证GitLab Runner服务是否正在使用运行程序。</td>\n</tr>\n</tbody></table>\n<h2 id=\"三、一个Web项目-CI-CD-简单示例\"><a href=\"#三、一个Web项目-CI-CD-简单示例\" class=\"headerlink\" title=\"三、一个Web项目 CI&#x2F;CD 简单示例\"></a>三、一个Web项目 CI&#x2F;CD 简单示例</h2><p>接下来，用一个实际项目来演示 GitLab CI&#x2F;CD 的配置和使用，其中主要包括：编译测试、项目打包、部署服务、Sonar手动检查、Sonar定时检查五个阶段。</p>\n<p>下面用一个传统的 Java web 项目(这里称之为<code>cidemo</code>)和<code>Tomcat</code>来作为示例，并用来展示常用配置的使用。当我每次<code>push</code>代码或者<code>Merge Request</code>时，都会生成一条流水线，且会自动执行我们上面所说的一些阶段，而Sonar手动检查我们设置为手动操作，且再额外配置Sonar定时检查的任务。</p>\n<blockquote>\n<p><strong>注</strong>：我 Gitlab Runner 是安装在<code>Centos</code>环境中，并使用的<code>shell</code>执行器。</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义stages</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">install</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">run</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">sonar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义安装包的存放位置和Tomcat服务器的地址的变量，便于后续部署使用.</span></span><br><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">CIDEMO_PACKAGE_DIR:</span> <span class=\"string\">&#x27;/home/gitlab-runner/packages/cidemo/&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">SERVER_HOME_DIR:</span> <span class=\"string\">&#x27;/home/gitlab-runner/tomcat/cidemo-tomcat/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###################### 构建编译和单元测试的job. #######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">编译测试任务:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">branches</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mvn</span> <span class=\"string\">clean</span> <span class=\"string\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###################### Maven安装得到war包的job. #######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">打包任务:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">install</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">develop</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mvn</span> <span class=\"string\">install</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;准备将最新的war包复制、保存到某个目录里面供后续使用.&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">$CIDEMO_PACKAGE_DIR/*.war</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">target/*.war</span> <span class=\"string\">$CIDEMO_PACKAGE_DIR/cidemo.war</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################### 部署运行war包的job. #######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">部署运行任务:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">run</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">develop</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;准备部署和运行war包！(为了方便部署到了Tomcat中运行)&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">$SERVER_HOME_DIR</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">sh</span> <span class=\"string\">bin/shutdown.sh</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webapps/cidemo.war</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">$CIDEMO_PACKAGE_DIR/cidemo.war</span> <span class=\"string\">$SERVER_HOME_DIR/webapps/cidemo.war</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">nohup</span> <span class=\"string\">sh</span> <span class=\"string\">./bin/startup.sh</span> <span class=\"string\">&gt;</span> <span class=\"string\">logs/cidemo_nohup.log</span> <span class=\"number\">2</span><span class=\"string\">&gt;&amp;1</span> <span class=\"string\">&amp;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###################### Sonar手动构建的job. #######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">Sonar手动检查:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">sonar</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">manual</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">develop</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;准备对项目代码做sonar的质量检查！&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mvn</span> <span class=\"string\">compile</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">mvn</span> <span class=\"string\">sonar:sonar</span> <span class=\"string\">-Dsonar.host.url=http://172.16.34.102:9000</span> <span class=\"string\">-Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###################### Sonar每晚定时构建的job. #######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">Sonar定时检查:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">sonar</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">schedules</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;开始定时对项目代码做sonar的质量检查！&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mvn</span> <span class=\"string\">compile</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">mvn</span> <span class=\"string\">sonar:sonar</span> <span class=\"string\">-Dsonar.host.url=http://172.16.34.102:9000</span> <span class=\"string\">-Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、Gitlab-CI-CD-yaml-常用配置介绍\"><a href=\"#四、Gitlab-CI-CD-yaml-常用配置介绍\" class=\"headerlink\" title=\"四、Gitlab CI&#x2F;CD yaml 常用配置介绍\"></a>四、Gitlab CI&#x2F;CD yaml 常用配置介绍</h2><p>开始构建之前<code>.gitlab-ci.yml</code>文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含script部分，<code>.gitlab-ci.yml</code>允许指定无限量 jobs。每个 jobs 必须有一个唯一的名字，且名字不能是下面列出的保留字段：</p>\n<ul>\n<li><code>image</code></li>\n<li><code>services</code></li>\n<li><code>stages</code></li>\n<li><code>types</code></li>\n<li><code>before_script</code></li>\n<li><code>after_script</code></li>\n<li><code>variables</code></li>\n<li><code>cache</code></li>\n</ul>\n<p>job由一列参数来定义 jobs 的行为：</p>\n<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>script</td>\n<td>yes</td>\n<td>Runner执行的命令或脚本</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>no</td>\n<td>定义此作业将继承的配置条目</td>\n</tr>\n<tr>\n<td>image</td>\n<td>no</td>\n<td>所使用的docker镜像，查阅<a href=\"https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml\">使用docker镜像</a></td>\n</tr>\n<tr>\n<td>services</td>\n<td>no</td>\n<td>所使用的docker服务，查阅<a href=\"https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml\">使用docker镜像</a></td>\n</tr>\n<tr>\n<td>stage</td>\n<td>no</td>\n<td>定义job stage（默认：<code>test</code>）</td>\n</tr>\n<tr>\n<td>type</td>\n<td>no</td>\n<td><code>stage</code>的别名（已弃用）</td>\n</tr>\n<tr>\n<td>variables</td>\n<td>no</td>\n<td>定义job级别的变量</td>\n</tr>\n<tr>\n<td>only</td>\n<td>no</td>\n<td>定义一列git分支，并为其创建job</td>\n</tr>\n<tr>\n<td>except</td>\n<td>no</td>\n<td>定义一列git分支，不创建job</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>no</td>\n<td>定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags）</td>\n</tr>\n<tr>\n<td>allow_failure</td>\n<td>no</td>\n<td>允许job失败。失败的job不影响commit状态</td>\n</tr>\n<tr>\n<td>when</td>\n<td>no</td>\n<td>定义何时开始job。可以是<code>on_success</code>，<code>on_failure</code>，<code>always</code>或者<code>manual</code></td>\n</tr>\n<tr>\n<td>dependencies</td>\n<td>no</td>\n<td>定义job依赖关系，这样他们就可以互相传递artifacts</td>\n</tr>\n<tr>\n<td>cache</td>\n<td>no</td>\n<td>定义应在后续运行之间缓存的文件列表</td>\n</tr>\n<tr>\n<td>before_script</td>\n<td>no</td>\n<td>重写一组在作业前执行的命令</td>\n</tr>\n<tr>\n<td>after_script</td>\n<td>no</td>\n<td>重写一组在作业后执行的命令</td>\n</tr>\n<tr>\n<td>environment</td>\n<td>no</td>\n<td>定义此作业完成部署的环境名称</td>\n</tr>\n<tr>\n<td>coverage</td>\n<td>no</td>\n<td>定义给定作业的代码覆盖率设置</td>\n</tr>\n<tr>\n<td>etry</td>\n<td>no</td>\n<td>定义在发生故障时可以自动重试作业的时间和次数</td>\n</tr>\n<tr>\n<td>parallel</td>\n<td>no</td>\n<td>定义应并行运行的作业实例数</td>\n</tr>\n</tbody></table>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><blockquote>\n<p>是在 GitLab 11.3 中引入的。</p>\n</blockquote>\n<p><code>extends</code>定义了一个使用<code>extends</code>的作业将继承的条目名称。它是使用<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#anchors\">YAML锚点</a>的替代方案，并且更加灵活和可读：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">.tests:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">rake</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"attr\">refs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">branches</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">extends:</span> <span class=\"string\">.tests</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">rake</span> <span class=\"string\">rspec</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"attr\">variables:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$RSPEC</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，<code>rspec</code>作业继承自<code>.tests</code>模板作业。 GitLab 将根据键执行反向深度合并。 GitLab将：</p>\n<ul>\n<li>将<code>rspec</code>内容以递归方式合并到<code>.tests</code>中。</li>\n<li>不合并键的值。</li>\n</ul>\n<p>这实际生成的是以下<code>rspec</code>作业：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">rake</span> <span class=\"string\">rspec</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"attr\">refs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">branches</span></span><br><span class=\"line\">    <span class=\"attr\">variables:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$RSPEC</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注</strong>: <code>rake test</code>已被<code>rake rspec</code>脚本覆盖。</p>\n</blockquote>\n<h3 id=\"image-和-services\"><a href=\"#image-和-services\" class=\"headerlink\" title=\"image 和 services\"></a>image 和 services</h3><p>这两个关键字允许使用一个自定义的 Docker 镜像和一系列的服务，并且可以用于整个 job 周期。详细配置文档请查看<a href=\"https://docs.gitlab.com/ee/ci/docker/README.html\">a separate document</a>。</p>\n<h3 id=\"before-script-和-after-script\"><a href=\"#before-script-和-after-script\" class=\"headerlink\" title=\"before_script 和 after_script\"></a>before_script 和 after_script</h3><p><code>before_script</code>用来定义所有 job 之前运行的命令，<code>after_script</code>用来定义所有 job 之后运行的命令。它们可以是一个数组或者是多行字符串。</p>\n<h3 id=\"stages\"><a href=\"#stages\" class=\"headerlink\" title=\"stages\"></a>stages</h3><p>stages 用来定义可以被 job 调用的 stages。stages 的规范允许有灵活的多级 pipelines。</p>\n<p>stages中的元素顺序决定了对应job的执行顺序：</p>\n<ol>\n<li>相同 stage 的 job 可以平行执行。</li>\n<li>下一个 stage 的 job 会在前一个 stage 的 job 成功后开始执行。</li>\n</ol>\n<p>接下仔细看看这个例子，它包含了3个 stage：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首先，所有 build 的 jobs 都是并行执行的。</li>\n<li>所有 build 的 jobs 执行成功后，test 的 jobs 才会开始并行执行。</li>\n<li>所有 test 的 jobs 执行成功，deploy 的 jobs 才会开始并行执行。</li>\n<li>所有的 deploy 的 jobs 执行成功，<code>commit</code>才会标记为<code>success</code>。</li>\n<li>任何一个前置的 jobs 失败了，<code>commit</code>会标记为<code>failed</code>并且下一个 stages 的 jobs 都不会执行。</li>\n</ol>\n<p>这有两个特殊的例子值得一提：</p>\n<ol>\n<li>如果<code>.gitlab-ci.yml</code>中没有定义stages，那么 job’s stages 会默认定义为<code>build</code>，<code>test</code>和<code>deploy</code>。</li>\n<li>如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。</li>\n</ol>\n<h3 id=\"only-和-except\"><a href=\"#only-和-except\" class=\"headerlink\" title=\"only 和 except\"></a>only 和 except</h3><p><code>only</code>和<code>except</code>是两个参数用分支策略来限制 jobs 构建：</p>\n<ul>\n<li><code>only</code>定义哪些分支和标签的git项目将会被job执行。</li>\n<li><code>except</code>定义哪些分支和标签的git项目将不会被job执行。</li>\n</ul>\n<p>下面是refs策略的使用规则：</p>\n<ul>\n<li>only 和 except 可同时使用。如果<code>only</code>和<code>except</code>在一个 job 配置中同时存在，则以 only 为准，跳过 except(从下面示例中得出)。</li>\n<li>only 和 except 可以使用正则表达式。</li>\n<li>only 和 except 允许使用特殊的关键字：<code>branches</code>，<code>tags</code>和<code>triggers</code>。</li>\n<li>only 和 except 允许使用指定仓库地址但不是forks的仓库(查看示例3)。</li>\n</ul>\n<p>在下面这个例子中，job 将只会运行以<code>issue-</code>开始的refs(分支)，然而<code>except</code>中设置将被跳过。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span></span><br><span class=\"line\">  <span class=\"comment\"># use regexp</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/^issue-.*$/</span></span><br><span class=\"line\">  <span class=\"comment\"># use special keyword</span></span><br><span class=\"line\">  <span class=\"attr\">except:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">branches</span></span><br></pre></td></tr></table></figure>\n\n<p>在下面这个例子中，job 将只会执行有<code>tags</code>的refs，或者通过<code>API</code>触发器明确地请求构建。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span></span><br><span class=\"line\">  <span class=\"comment\"># use special keywords</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tags</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">triggers</span></span><br></pre></td></tr></table></figure>\n\n<p>下面这个例子将会为所有的分支执行job，但 master 分支除外。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">branches@gitlab-org/gitlab-ce</span></span><br><span class=\"line\">  <span class=\"attr\">except:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master@gitlab-org/gitlab-ce</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"variables\"><a href=\"#variables\" class=\"headerlink\" title=\"variables\"></a>variables</h3><p>GItLab CI 允许在<code>.gitlab-ci.yml</code>文件中添加变量，并在 job 环境中起作用。因为这些配置是存储在 git 仓库中，所以<strong>最好是存储项目的非敏感配置</strong>，例如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"string\">DATABASE_URL:&quot;postgres://postgres@postgres/my_database&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些变量可以被后续的命令和脚本使用。</p>\n<p>除了用户自定义的变量外，Runner 也可以定义它自己的变量。<code>CI_COMMIT_REG_NAME</code>就是一个很好的例子，它的值表示用于构建项目的分支或tag名称。除了在<code>.gitlab-ci.yml</code>中设置变量外，还有可以通过 GitLab 的界面上设置私有变量。</p>\n<p>这里有更多关于<a href=\"https://docs.gitlab.com/ce/ci/variables/README.html\">variables</a>的介绍。</p>\n<h3 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h3><h4 id=\"cache-paths\"><a href=\"#cache-paths\" class=\"headerlink\" title=\"cache: paths\"></a>cache: paths</h4><p>使用<code>paths</code>指令选择要缓存的文件或目录。也可以使用通配符。</p>\n<p>如果 cache 定义在 jobs 的作用域之外，那么它就是全局缓存，所有 jobs 都可以使用该缓存。</p>\n<p>缓存<code>binaries</code>和<code>.config</code>中的所有文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">binaries/</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">.config</span></span><br></pre></td></tr></table></figure>\n\n<p>缓存<code>git</code>中没有被跟踪的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>缓存<code>binaries</code>下没有被<code>git</code>跟踪的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">binaries/</span></span><br></pre></td></tr></table></figure>\n\n<p>job 中优先级高于全局的。下面这个<code>rspec</code> job中将只会缓存<code>binaries/</code>下的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">my/files</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">key:</span> <span class=\"string\">rspec</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">binaries/</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，缓存是在 jobs 之前进行共享的。如果你不同的 jobs 缓存不同的文件路径，必须设置不同的<code>cache:key</code>，否则缓存内容将被重写。缓存只是尽力而为之，所以别期望缓存会一直存在。</p>\n<h4 id=\"cache-key\"><a href=\"#cache-key\" class=\"headerlink\" title=\"cache: key\"></a>cache: key</h4><p><code>key</code>指令允许我们定义缓存的作用域(亲和性)，可以是所有 jobs 的单个缓存，也可以是每个 job，也可以是每个分支或者是任何你认为合适的地方。它也可以让你很好的调整缓存，允许你设置不同 jobs 的缓存，甚至是不同分支的缓存。</p>\n<p><code>cache:key</code>可以使用任何的<a href=\"https://docs.gitlab.com/ce/ci/variables/README.html\">预定义变量</a>。</p>\n<p>默认key是默认设置的这个项目缓存，因此默认情况下，从GitLab 9.0开始，每个 pipelines 和 jobs 中可以共享一切。</p>\n<p>配置示例</p>\n<p>缓存每个job：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&quot;$CI_JOB_NAME&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>缓存每个分支：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&quot;$CI_COMMIT_REF_NAME&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>缓存每个 job 且每个分支：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&quot;$CI_JOB_NAME/$CI_COMMIT_REF_NAME&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>缓存每个分支且每个stage：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&quot;$CI_JOB_STAGE/$CI_COMMIT_REF_NAME&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用的Windows Batch(windows批处理)来跑脚本需要用%替代$：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&quot;%CI_JOB_STAGE%/%CI_COMMIT_REF_NAME%&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"allow-failure\"><a href=\"#allow-failure\" class=\"headerlink\" title=\"allow_failure\"></a>allow_failure</h3><p><code>allow_failure</code>可以用于当你想设置一个 job 失败的之后并不影响后续的CI组件的时候。失败的 jobs 不会影响到<code>commit</code>状态。</p>\n<p>当开启了允许 job 失败，所有的 intents 和 purposes 里的 pipeline 都是成功&#x2F;绿色，但是也会有一个”<code>CI build passed with warnings</code>“信息显示在<code>Merge Request</code>或<code>commit</code>或<code>job page</code>。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。</p>\n<p>下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个 stage，因为这里有设置了<code>allow_failure: true</code>。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job1:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">execute_script_that_will_fail</span></span><br><span class=\"line\">  <span class=\"attr\">allow_failure:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">job2:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">execute_script_that_will_succeed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">job3:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">deploy_to_staging</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"when\"><a href=\"#when\" class=\"headerlink\" title=\"when\"></a>when</h3><p><code>when</code>用于实现在发生故障或尽管失败时运行的作业。when可以设置以下值：</p>\n<ul>\n<li><code>on_success</code> - 只有前面 stages 的所有工作成功时才执行。这是默认值。</li>\n<li><code>on_failure</code> - 当前面 stages 中任意一个jobs失败后执行。</li>\n<li><code>always</code> - 无论前面 stages 中 jobs 状态如何都执行。</li>\n<li><code>manual</code> - 手动执行(GitLab8.10增加)。更多请查看手动操作。</li>\n</ul>\n<h3 id=\"artifacts\"><a href=\"#artifacts\" class=\"headerlink\" title=\"artifacts\"></a>artifacts</h3><p><code>artifacts</code>用于指定成功后应附加到 job 的文件和目录的列表。只能使用项目工作间内的文件或目录路径。在job成功完成后artifacts将会发送到GitLab中，同时也会在 GitLab UI 中提供下载。如果想要在不通的 job 之间传递<code>artifacts</code>，请查阅<a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies\">依赖关系</a>。以下是一些例子：</p>\n<p>发送<code>binaries</code>和<code>.config</code>中的所有文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">artifacts:</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">binaries/</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">.config</span></span><br></pre></td></tr></table></figure>\n\n<p>发送所有没有被Git跟踪的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">artifacts:</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>发送没有被Git跟踪和<code>binaries</code>中的所有文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">artifacts:</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">binaries/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、其他相关内容\"><a href=\"#五、其他相关内容\" class=\"headerlink\" title=\"五、其他相关内容\"></a>五、其他相关内容</h2><h3 id=\"1-API触发器-Triggers\"><a href=\"#1-API触发器-Triggers\" class=\"headerlink\" title=\"1 API触发器 Triggers\"></a>1 API触发器 Triggers</h3><p>Triggers 可用于强制使用API调用重建特定分支，<code>tag</code>或<code>commits</code>。API的使用示例可以在<code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Pipeline triggers</code>中找到。</p>\n<p>在<code>triggers</code>文档中<a href=\"https://docs.gitlab.com/ce/ci/triggers/README.html\">查看更多</a>。</p>\n<h3 id=\"2-配置定时任务\"><a href=\"#2-配置定时任务\" class=\"headerlink\" title=\"2 配置定时任务\"></a>2 配置定时任务</h3><p>GitLab CI 中可以在 GitLab <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Schedules</code>中配置定时任务，点击<code>New Schedule</code>按钮，可以配置你流水线的定时执行任务，包括：描述信息、定时的Cron表达式、目标分支、变量等信息。</p>\n<p>然后在需要定时执行的作业的<code>only</code>分支写上<code>schedules</code>即可。</p>\n<h3 id=\"3-校验-gitlab-ci-yml\"><a href=\"#3-校验-gitlab-ci-yml\" class=\"headerlink\" title=\"3 校验 .gitlab-ci.yml\"></a>3 校验 .gitlab-ci.yml</h3><p>GitLab CI 的每个实例都有一个名为<code>Lint</code>的嵌入式调试工具。 你可以在 GitLab 实例的<code>-/ci/lint</code>下找到该链接。</p>\n<h3 id=\"4-配置邮件发送\"><a href=\"#4-配置邮件发送\" class=\"headerlink\" title=\"4 配置邮件发送\"></a>4 配置邮件发送</h3><p>如果希望在每次构建完成后（或者在仅构建失败的情况下），想邮件发送给相关开发人员，则可以在 GitLab <code>Settings</code> -&gt; <code>Integrations</code> 中找到<code>Pipelines emails</code>，点击进去就可以配置邮件发送相关的内容了。</p>\n<h3 id=\"5-GitLab-Pages\"><a href=\"#5-GitLab-Pages\" class=\"headerlink\" title=\"5 GitLab Pages\"></a>5 GitLab Pages</h3><p><a href=\"https://gitlab.com/pages/\">GitLab Pages</a>是用于托管静态文件的服务。而<code>pages</code>是一个特殊的job，用于将静态的内容上传到GitLab，可用于为您的网站提供服务。它有特殊的语法，因此必须满足以下两个要求：</p>\n<ul>\n<li>任何静态内容必须放在<code>public/</code>目录下</li>\n<li>artifacts必须定义在<code>public/</code>目录下</li>\n</ul>\n<p>下面的这个例子是将所有文件从项目根目录移动到<code>public/</code>目录。<code>.public</code>工作流是<code>cp</code>，并且它不会循环复制<code>public/</code>本身。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pages:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">mkdir</span> <span class=\"string\">.public</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">-r</span> <span class=\"string\">*</span> <span class=\"string\">.public</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">mv</span> <span class=\"string\">.public</span> <span class=\"string\">public</span></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">public</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>更多内容请查看<a href=\"https://docs.gitlab.com/ce/user/project/pages/index.html\">GitLab Pages用户文档</a>。</p>\n<h3 id=\"6-跳过-jobs\"><a href=\"#6-跳过-jobs\" class=\"headerlink\" title=\"6 跳过 jobs\"></a>6 跳过 jobs</h3><p>如果你的<code>commit</code>信息中包含<code>[ci skip]</code>或者<code>[skip ci]</code>，不论大小写，那么这个<code>commit</code>将会创建但是 jobs 也会跳过。</p>\n<hr>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html\">官方文档地址</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000010442764#articleHeader24\">segmentfault yaml配置中文翻译</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"一、持续集成介绍\"><a href=\"#一、持续集成介绍\" class=\"headerlink\" title=\"一、持续集成介绍\"></a>一、持续集成介绍</h2><blockquote>\n<p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。—— Martin Fowler</p>\n</blockquote>\n<h3 id=\"1-概念\"><a href=\"#1-概念\" class=\"headerlink\" title=\"1 概念\"></a>1 概念</h3><ul>\n<li><strong>持续集成</strong>(<code>Continuous Integration</code>)：<strong>频繁地(一天多次)将代码集成到主干。</strong>让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。“持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</li>\n<li><strong>持续交付</strong>(<code>Continuous Delivery</code>)：<strong>频繁地将软件的新版本，交付给质量团队或者用户，以供评审。</strong>如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</li>\n<li><strong>持续部署</strong>(<code>continuous Deployment</code>)：<strong>代码通过评审以后，自动部署到生产环境。</strong>是持续部署是持续交付的下一步，持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</li>\n</ul>\n<h3 id=\"2-持续集成的好处\"><a href=\"#2-持续集成的好处\" class=\"headerlink\" title=\"2 持续集成的好处\"></a>2 持续集成的好处</h3><ul>\n<li><strong>自动化构建且状态对每个人可见</strong>。可以使用<code>Maven</code>、<code>Gradle</code>等来实现自动化构建，可以在构建过程中实现自动化测试（前提是有写单元测试用例）。集成服务器在持续集成过程中发现问题可以及时发送警告给相关的干系人。</li>\n<li><strong>解放了重复性劳动。</strong>自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。</li>\n<li><strong>更快地发现和修复问题。</strong>持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。</li>\n<li><strong>更快的交付成果。</strong>更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。</li>\n<li><strong>减少手工的错误。</strong>在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。</li>\n<li><strong>减少了等待时间。</strong>缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。</li>\n<li><strong>更高的产品质量。</strong>集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。</li>\n</ul>\n<h3 id=\"3-常用持续集成工具\"><a href=\"#3-常用持续集成工具\" class=\"headerlink\" title=\"3 常用持续集成工具\"></a>3 常用持续集成工具</h3><ul>\n<li><a href=\"https://jenkins.io/\">Jenkins</a></li>\n<li><a href=\"https://docs.gitlab.com/ee/ci/README.html\">GitLab CI</a></li>\n<li><a href=\"https://www.jetbrains.com/teamcity/\">TeamCity</a></li>\n<li><a href=\"https://www.travis-ci.org/\">Travis CI</a></li>\n<li><a href=\"https://www.atlassian.com/software/bamboo\">Bamboo</a></li>\n<li><a href=\"https://circleci.com/\">CircleCI</a></li>\n<li>…</li>\n</ul>\n<h2 id=\"二、Gitlab-持续集成\"><a href=\"#二、Gitlab-持续集成\" class=\"headerlink\" title=\"二、Gitlab 持续集成\"></a>二、Gitlab 持续集成</h2><p><img src=\"https://statics.sh1a.qingstor.com/2018/11/22/pipelines.png\" alt=\"GitLab CI/CD\"></p>\n<h3 id=\"1-概念介绍\"><a href=\"#1-概念介绍\" class=\"headerlink\" title=\"1 概念介绍\"></a>1 概念介绍</h3><h4 id=\"1-GitLab\"><a href=\"#1-GitLab\" class=\"headerlink\" title=\"(1) GitLab\"></a>(1) GitLab</h4><p><a href=\"https://about.gitlab.com/\">GitLab</a> 是一个利用<code>Ruby on Rails</code>开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与<a href=\"https://github.com/\">GitHub</a>类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。</p>\n<h4 id=\"2-GitLab-CI-CD\"><a href=\"#2-GitLab-CI-CD\" class=\"headerlink\" title=\"(2) GitLab CI&#x2F;CD\"></a>(2) GitLab CI&#x2F;CD</h4><p><a href=\"https://docs.gitlab.com/ee/ci/README.html\">GitLab CI&#x2F;CD</a> 是<code>GitLab Continuous Integration</code>（Gitlab持续集成）的简称。GitLab 自<code>GitLab 8.0</code>开始提供了持续集成的功能，且对所有项目默认开启。只要在项目仓库的根目录添加<code>.gitlab-ci.yml</code>文件，并且配置了Runner（运行器），那么每一次<code>push</code>或者合并请求（<code>Merge Request</code>）都会触发<a href=\"https://docs.gitlab.com/ce/ci/pipelines.html\">CI Pipeline</a>。</p>\n<h4 id=\"3-GitLab-Runner\"><a href=\"#3-GitLab-Runner\" class=\"headerlink\" title=\"(3) GitLab Runner\"></a>(3) GitLab Runner</h4><p><a href=\"https://docs.gitlab.com/runner/\">GitLab Runner</a> <code>GitLab Runner</code>是一个开源项目，可以运行在 GNU &#x2F; Linux，macOS 和 Windows 操作系统上。每次<code>push</code>的时候 GitLab CI 会根据<code>.gitlab-ci.yml</code>配置文件运行你流水线（<code>Pipeline</code>）中各个阶段的任务（<code>Job</code>），并将结果发送回 GitLab。GitLab Runner 是基于 Gitlab CI 的 API 进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和 Gitlab 安装在同一台机器上，且考虑到 GitLab Runner 的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。</p>\n<p>Gitlab Runner 分为三种：</p>\n<ul>\n<li>共享Runner(<code>Shared runners</code>)</li>\n<li>专享Runner(<code>Specific runners</code>)</li>\n<li>分组Runner(<code>Group Runners</code>)</li>\n</ul>\n<h4 id=\"4-Pipelines\"><a href=\"#4-Pipelines\" class=\"headerlink\" title=\"(4) Pipelines\"></a>(4) Pipelines</h4><p><a href=\"https://docs.gitlab.com/ce/ci/pipelines.html\">Pipelines</a> 中文称为流水线，是分阶段执行的构建任务。如：安装依赖、运行测试、打包、部署开发服务器、部署生产服务器等流程。每一次<code>push</code>或者<code>Merge Request</code>都会触发生成一条新的Pipeline。</p>\n<p>下面是流水线示例图：</p>\n<p><img src=\"https://docs.gitlab.com/ce/ci/img/pipelines_index.png\" alt=\"Pipeline Status\"></p>\n<h4 id=\"5-Stages\"><a href=\"#5-Stages\" class=\"headerlink\" title=\"(5) Stages\"></a>(5) Stages</h4><p><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#stages\">Stages</a> 表示构建阶段，可以理解为上面所说“安装依赖”、“运行测试”等环节的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p>\n<ul>\n<li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始（当然可以在<code>.gitlab-ci.yml</code>文件中配置上一阶段失败时下一阶段也执行）</li>\n<li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li>\n<li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li>\n</ul>\n<p>下面是一个流水线内的阶段任务示例图：</p>\n<p><img src=\"https://docs.gitlab.com/ce/ci/img/pipelines.png\" alt=\"Job Status\"></p>\n<h4 id=\"6-Jobs\"><a href=\"#6-Jobs\" class=\"headerlink\" title=\"(6) Jobs\"></a>(6) Jobs</h4><p><a href=\"https://docs.gitlab.com/ce/ci/pipelines.html#jobs\">Jobs</a> 表示构建的作业（或称之为任务），表示某个 Stage 里面执行的具体任务。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p>\n<ul>\n<li>相同 Stage 中的 Jobs 无执行顺序要求，会并行执行</li>\n<li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li>\n<li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 也失败（可以在<code>.gitlab-ci.yml</code>文件中配置允许某 Job 可以失败，也算该 Stage 成功）</li>\n</ul>\n<h4 id=\"7-gitlab-ci-yml\"><a href=\"#7-gitlab-ci-yml\" class=\"headerlink\" title=\"(7) .gitlab-ci.yml\"></a>(7) .gitlab-ci.yml</h4><p>GitLab 中默认开启了 Gitlab CI&#x2F;CD 的支持，且使用<a href=\"http://yaml.org/\">YAML</a>文件<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#examples\">.gitlab-ci.yml</a>来管理项目构建配置。该文件需要存放于项目仓库的根目录（默认路径，可在 GitLab 中修改），它定义该项目的 CI&#x2F;CD 如何配置。所以，我们只需要在<code>.gitlab-ci.yml</code>配置文件中定义流水线的各个阶段，以及各个阶段中的若干作业（任务）即可。</p>\n<p>下面是<code>.gitlab-ci.yml</code>文件的一个简单的<code>Hello World</code>示例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义 test 和 package 两个 Stages</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">package</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义 package 阶段的一个 job</span></span><br><span class=\"line\"><span class=\"attr\">package-job:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">package</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Hello, package-job&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;I am in package stage&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义 test 阶段的一个 job</span></span><br><span class=\"line\"><span class=\"attr\">test-job:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;Hello, test-job&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;I am in test stage&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>以上配置中，用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的<code>script</code>关键字是每个 job 中必须要包含的，它表示每个 job 要执行的命令。</p>\n<blockquote>\n<p><strong>注</strong>：猜猜上面例子的运行结果？</p>\n</blockquote>\n<h4 id=\"8-Badges\"><a href=\"#8-Badges\" class=\"headerlink\" title=\"(8) Badges\"></a>(8) Badges</h4><p><a href=\"https://docs.gitlab.com/ce/ci/pipelines.html#badges\">Badges</a> 即：<strong>徽章</strong>，当 Pipelines 执行过程中或者执行完成时会生成徽章，你可以将这些徽章加入到你的<code>README.md</code>文件中，便于从仓库主页看到最新的构建状态。</p>\n<p>徽章的链接形如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://example.gitlab.com/namespace/project/badges/branch/build.svg </span><br></pre></td></tr></table></figure>\n\n<p>我们用 GitLab 项目的徽章作为例子，效果如下：</p>\n<p><img src=\"https://gitlab.com/gitlab-org/gitlab-ce/badges/master/build.svg\" alt=\"Gitlab build badges\"> <img src=\"https://gitlab.com/gitlab-org/gitlab-ce/badges/master/coverage.svg?job=coverage\" alt=\"Gitlab coverage badges\"></p>\n<h3 id=\"2-安装-GitLab-Runner\"><a href=\"#2-安装-GitLab-Runner\" class=\"headerlink\" title=\"2 安装 GitLab Runner\"></a>2 安装 GitLab Runner</h3><p><a href=\"https://docs.gitlab.com/runner/install/index.html\">这里</a>有 GitLab Runner安装相关的资源和文档可供大家参考。以下仅以咱们公司常用的<code>Centos</code>为例来做安装说明。</p>\n<h4 id=\"1-在线安装\"><a href=\"#1-在线安装\" class=\"headerlink\" title=\"(1) 在线安装\"></a>(1) 在线安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 添加官方的repo.</span></span><br><span class=\"line\">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | <span class=\"built_in\">sudo</span> bash</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yum 安装Gtilab Runner.</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum install gitlab-runner</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-离线安装\"><a href=\"#2-离线安装\" class=\"headerlink\" title=\"(2) 离线安装\"></a>(2) 离线安装</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装Git</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> yum –y install git</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># rpm离线安装事先下载好的 Gitlab Runner rpm包.</span></span><br><span class=\"line\">rpm -ivh gitlab-runner-10.5.0-1.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注</strong>：Gitlab Runner 依赖了<code>Git</code>，所以，离线安装 Gitlab Runner 之前得首先安装Git，离线安装包可以从<a href=\"https://packages.gitlab.com/runner/gitlab-runner\">这里</a>下载。</p>\n</blockquote>\n<h3 id=\"3-注册-Gitlab-Runner\"><a href=\"#3-注册-Gitlab-Runner\" class=\"headerlink\" title=\"3 注册 Gitlab Runner\"></a>3 注册 Gitlab Runner</h3><p>安装了 GitLab Runner 之后,就可以为 GitLab 中的仓库<a href=\"https://docs.gitlab.com/runner/register/index.html\">注册一个 Runner</a>，注册的交互式命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">sudo</span> gitlab-runner register</span><br></pre></td></tr></table></figure>\n\n<p>命令的交互式的过程如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 输入注册命令</span></span><br><span class=\"line\"><span class=\"built_in\">sudo</span> gitlab-runner register</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入公司的 GitLab 网站地址</span></span><br><span class=\"line\">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class=\"line\">http://gitlab.xxxx.com/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 你项目仓库的token，token可以在 Settings -&gt; CI/CD -&gt; Runners settings 中找到.</span></span><br><span class=\"line\">Please enter the gitlab-ci token <span class=\"keyword\">for</span> this runner</span><br><span class=\"line\">xxx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入描述这个 runner 的名称</span></span><br><span class=\"line\">Please enter the gitlab-ci description <span class=\"keyword\">for</span> this runner</span><br><span class=\"line\">[hostame] my-runner</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入 runner 的标签</span></span><br><span class=\"line\">Please enter the gitlab-ci tags <span class=\"keyword\">for</span> this runner (comma separated):</span><br><span class=\"line\">my-tag,another-tag</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 输入 runner 的执行器.</span></span><br><span class=\"line\">Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br><span class=\"line\">shell</span><br></pre></td></tr></table></figure>\n\n<p>以上流程注册成功之后，就可以在你的项目仓库中 <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Runners settings</code> 看到这个 Runner 了。</p>\n<h3 id=\"4-Gitlab-Runner-常用命令汇总\"><a href=\"#4-Gitlab-Runner-常用命令汇总\" class=\"headerlink\" title=\"4 Gitlab Runner 常用命令汇总\"></a>4 Gitlab Runner 常用命令汇总</h3><p>下面的表格中列出了一些常用的<a href=\"https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-list\">Gitlab Runner命令</a>，以供参考：</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>gitlab-runner run</td>\n<td align=\"left\">运行一个runner服务</td>\n</tr>\n<tr>\n<td>gitlab-runner register</td>\n<td align=\"left\">注册一个新的runner</td>\n</tr>\n<tr>\n<td>gitlab-runner start</td>\n<td align=\"left\">启动服务</td>\n</tr>\n<tr>\n<td>gitlab-runner stop</td>\n<td align=\"left\">关闭服务</td>\n</tr>\n<tr>\n<td>gitlab-runner restart</td>\n<td align=\"left\">重启服务</td>\n</tr>\n<tr>\n<td>gitlab-runner status</td>\n<td align=\"left\">查看各个runner的状态</td>\n</tr>\n<tr>\n<td>gitlab-runner unregister</td>\n<td align=\"left\">注销掉某个runner</td>\n</tr>\n<tr>\n<td>gitlab-runner list</td>\n<td align=\"left\">显示所有运行着的runner</td>\n</tr>\n<tr>\n<td>gitlab-runner verify</td>\n<td align=\"left\">检查已注册的运行程序是否可以连接到GitLab，但它不验证GitLab Runner服务是否正在使用运行程序。</td>\n</tr>\n</tbody></table>\n<h2 id=\"三、一个Web项目-CI-CD-简单示例\"><a href=\"#三、一个Web项目-CI-CD-简单示例\" class=\"headerlink\" title=\"三、一个Web项目 CI&#x2F;CD 简单示例\"></a>三、一个Web项目 CI&#x2F;CD 简单示例</h2><p>接下来，用一个实际项目来演示 GitLab CI&#x2F;CD 的配置和使用，其中主要包括：编译测试、项目打包、部署服务、Sonar手动检查、Sonar定时检查五个阶段。</p>\n<p>下面用一个传统的 Java web 项目(这里称之为<code>cidemo</code>)和<code>Tomcat</code>来作为示例，并用来展示常用配置的使用。当我每次<code>push</code>代码或者<code>Merge Request</code>时，都会生成一条流水线，且会自动执行我们上面所说的一些阶段，而Sonar手动检查我们设置为手动操作，且再额外配置Sonar定时检查的任务。</p>\n<blockquote>\n<p><strong>注</strong>：我 Gitlab Runner 是安装在<code>Centos</code>环境中，并使用的<code>shell</code>执行器。</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 定义stages</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">install</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">run</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">sonar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 定义安装包的存放位置和Tomcat服务器的地址的变量，便于后续部署使用.</span></span><br><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">CIDEMO_PACKAGE_DIR:</span> <span class=\"string\">&#x27;/home/gitlab-runner/packages/cidemo/&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">SERVER_HOME_DIR:</span> <span class=\"string\">&#x27;/home/gitlab-runner/tomcat/cidemo-tomcat/&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###################### 构建编译和单元测试的job. #######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">编译测试任务:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">branches</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mvn</span> <span class=\"string\">clean</span> <span class=\"string\">test</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###################### Maven安装得到war包的job. #######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">打包任务:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">install</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">develop</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mvn</span> <span class=\"string\">install</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;准备将最新的war包复制、保存到某个目录里面供后续使用.&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">$CIDEMO_PACKAGE_DIR/*.war</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">target/*.war</span> <span class=\"string\">$CIDEMO_PACKAGE_DIR/cidemo.war</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">####################### 部署运行war包的job. #######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">部署运行任务:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">run</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">develop</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;准备部署和运行war包！(为了方便部署到了Tomcat中运行)&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">$SERVER_HOME_DIR</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">sh</span> <span class=\"string\">bin/shutdown.sh</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webapps/cidemo.war</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">$CIDEMO_PACKAGE_DIR/cidemo.war</span> <span class=\"string\">$SERVER_HOME_DIR/webapps/cidemo.war</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">nohup</span> <span class=\"string\">sh</span> <span class=\"string\">./bin/startup.sh</span> <span class=\"string\">&gt;</span> <span class=\"string\">logs/cidemo_nohup.log</span> <span class=\"number\">2</span><span class=\"string\">&gt;&amp;1</span> <span class=\"string\">&amp;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###################### Sonar手动构建的job. #######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">Sonar手动检查:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">sonar</span></span><br><span class=\"line\">  <span class=\"attr\">when:</span> <span class=\"string\">manual</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">develop</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;准备对项目代码做sonar的质量检查！&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mvn</span> <span class=\"string\">compile</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">mvn</span> <span class=\"string\">sonar:sonar</span> <span class=\"string\">-Dsonar.host.url=http://172.16.34.102:9000</span> <span class=\"string\">-Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###################### Sonar每晚定时构建的job. #######################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">Sonar定时检查:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">sonar</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">schedules</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&#x27;开始定时对项目代码做sonar的质量检查！&#x27;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">mvn</span> <span class=\"string\">compile</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">mvn</span> <span class=\"string\">sonar:sonar</span> <span class=\"string\">-Dsonar.host.url=http://172.16.34.102:9000</span> <span class=\"string\">-Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、Gitlab-CI-CD-yaml-常用配置介绍\"><a href=\"#四、Gitlab-CI-CD-yaml-常用配置介绍\" class=\"headerlink\" title=\"四、Gitlab CI&#x2F;CD yaml 常用配置介绍\"></a>四、Gitlab CI&#x2F;CD yaml 常用配置介绍</h2><p>开始构建之前<code>.gitlab-ci.yml</code>文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含script部分，<code>.gitlab-ci.yml</code>允许指定无限量 jobs。每个 jobs 必须有一个唯一的名字，且名字不能是下面列出的保留字段：</p>\n<ul>\n<li><code>image</code></li>\n<li><code>services</code></li>\n<li><code>stages</code></li>\n<li><code>types</code></li>\n<li><code>before_script</code></li>\n<li><code>after_script</code></li>\n<li><code>variables</code></li>\n<li><code>cache</code></li>\n</ul>\n<p>job由一列参数来定义 jobs 的行为：</p>\n<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>script</td>\n<td>yes</td>\n<td>Runner执行的命令或脚本</td>\n</tr>\n<tr>\n<td>extends</td>\n<td>no</td>\n<td>定义此作业将继承的配置条目</td>\n</tr>\n<tr>\n<td>image</td>\n<td>no</td>\n<td>所使用的docker镜像，查阅<a href=\"https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml\">使用docker镜像</a></td>\n</tr>\n<tr>\n<td>services</td>\n<td>no</td>\n<td>所使用的docker服务，查阅<a href=\"https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml\">使用docker镜像</a></td>\n</tr>\n<tr>\n<td>stage</td>\n<td>no</td>\n<td>定义job stage（默认：<code>test</code>）</td>\n</tr>\n<tr>\n<td>type</td>\n<td>no</td>\n<td><code>stage</code>的别名（已弃用）</td>\n</tr>\n<tr>\n<td>variables</td>\n<td>no</td>\n<td>定义job级别的变量</td>\n</tr>\n<tr>\n<td>only</td>\n<td>no</td>\n<td>定义一列git分支，并为其创建job</td>\n</tr>\n<tr>\n<td>except</td>\n<td>no</td>\n<td>定义一列git分支，不创建job</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>no</td>\n<td>定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags）</td>\n</tr>\n<tr>\n<td>allow_failure</td>\n<td>no</td>\n<td>允许job失败。失败的job不影响commit状态</td>\n</tr>\n<tr>\n<td>when</td>\n<td>no</td>\n<td>定义何时开始job。可以是<code>on_success</code>，<code>on_failure</code>，<code>always</code>或者<code>manual</code></td>\n</tr>\n<tr>\n<td>dependencies</td>\n<td>no</td>\n<td>定义job依赖关系，这样他们就可以互相传递artifacts</td>\n</tr>\n<tr>\n<td>cache</td>\n<td>no</td>\n<td>定义应在后续运行之间缓存的文件列表</td>\n</tr>\n<tr>\n<td>before_script</td>\n<td>no</td>\n<td>重写一组在作业前执行的命令</td>\n</tr>\n<tr>\n<td>after_script</td>\n<td>no</td>\n<td>重写一组在作业后执行的命令</td>\n</tr>\n<tr>\n<td>environment</td>\n<td>no</td>\n<td>定义此作业完成部署的环境名称</td>\n</tr>\n<tr>\n<td>coverage</td>\n<td>no</td>\n<td>定义给定作业的代码覆盖率设置</td>\n</tr>\n<tr>\n<td>etry</td>\n<td>no</td>\n<td>定义在发生故障时可以自动重试作业的时间和次数</td>\n</tr>\n<tr>\n<td>parallel</td>\n<td>no</td>\n<td>定义应并行运行的作业实例数</td>\n</tr>\n</tbody></table>\n<h3 id=\"extends\"><a href=\"#extends\" class=\"headerlink\" title=\"extends\"></a>extends</h3><blockquote>\n<p>是在 GitLab 11.3 中引入的。</p>\n</blockquote>\n<p><code>extends</code>定义了一个使用<code>extends</code>的作业将继承的条目名称。它是使用<a href=\"https://docs.gitlab.com/ee/ci/yaml/README.html#anchors\">YAML锚点</a>的替代方案，并且更加灵活和可读：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">.tests:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">rake</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"attr\">refs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">branches</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">extends:</span> <span class=\"string\">.tests</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">rake</span> <span class=\"string\">rspec</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"attr\">variables:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$RSPEC</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的示例中，<code>rspec</code>作业继承自<code>.tests</code>模板作业。 GitLab 将根据键执行反向深度合并。 GitLab将：</p>\n<ul>\n<li>将<code>rspec</code>内容以递归方式合并到<code>.tests</code>中。</li>\n<li>不合并键的值。</li>\n</ul>\n<p>这实际生成的是以下<code>rspec</code>作业：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">rake</span> <span class=\"string\">rspec</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"attr\">refs:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">branches</span></span><br><span class=\"line\">    <span class=\"attr\">variables:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">$RSPEC</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注</strong>: <code>rake test</code>已被<code>rake rspec</code>脚本覆盖。</p>\n</blockquote>\n<h3 id=\"image-和-services\"><a href=\"#image-和-services\" class=\"headerlink\" title=\"image 和 services\"></a>image 和 services</h3><p>这两个关键字允许使用一个自定义的 Docker 镜像和一系列的服务，并且可以用于整个 job 周期。详细配置文档请查看<a href=\"https://docs.gitlab.com/ee/ci/docker/README.html\">a separate document</a>。</p>\n<h3 id=\"before-script-和-after-script\"><a href=\"#before-script-和-after-script\" class=\"headerlink\" title=\"before_script 和 after_script\"></a>before_script 和 after_script</h3><p><code>before_script</code>用来定义所有 job 之前运行的命令，<code>after_script</code>用来定义所有 job 之后运行的命令。它们可以是一个数组或者是多行字符串。</p>\n<h3 id=\"stages\"><a href=\"#stages\" class=\"headerlink\" title=\"stages\"></a>stages</h3><p>stages 用来定义可以被 job 调用的 stages。stages 的规范允许有灵活的多级 pipelines。</p>\n<p>stages中的元素顺序决定了对应job的执行顺序：</p>\n<ol>\n<li>相同 stage 的 job 可以平行执行。</li>\n<li>下一个 stage 的 job 会在前一个 stage 的 job 成功后开始执行。</li>\n</ol>\n<p>接下仔细看看这个例子，它包含了3个 stage：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">test</span></span><br><span class=\"line\"> <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首先，所有 build 的 jobs 都是并行执行的。</li>\n<li>所有 build 的 jobs 执行成功后，test 的 jobs 才会开始并行执行。</li>\n<li>所有 test 的 jobs 执行成功，deploy 的 jobs 才会开始并行执行。</li>\n<li>所有的 deploy 的 jobs 执行成功，<code>commit</code>才会标记为<code>success</code>。</li>\n<li>任何一个前置的 jobs 失败了，<code>commit</code>会标记为<code>failed</code>并且下一个 stages 的 jobs 都不会执行。</li>\n</ol>\n<p>这有两个特殊的例子值得一提：</p>\n<ol>\n<li>如果<code>.gitlab-ci.yml</code>中没有定义stages，那么 job’s stages 会默认定义为<code>build</code>，<code>test</code>和<code>deploy</code>。</li>\n<li>如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。</li>\n</ol>\n<h3 id=\"only-和-except\"><a href=\"#only-和-except\" class=\"headerlink\" title=\"only 和 except\"></a>only 和 except</h3><p><code>only</code>和<code>except</code>是两个参数用分支策略来限制 jobs 构建：</p>\n<ul>\n<li><code>only</code>定义哪些分支和标签的git项目将会被job执行。</li>\n<li><code>except</code>定义哪些分支和标签的git项目将不会被job执行。</li>\n</ul>\n<p>下面是refs策略的使用规则：</p>\n<ul>\n<li>only 和 except 可同时使用。如果<code>only</code>和<code>except</code>在一个 job 配置中同时存在，则以 only 为准，跳过 except(从下面示例中得出)。</li>\n<li>only 和 except 可以使用正则表达式。</li>\n<li>only 和 except 允许使用特殊的关键字：<code>branches</code>，<code>tags</code>和<code>triggers</code>。</li>\n<li>only 和 except 允许使用指定仓库地址但不是forks的仓库(查看示例3)。</li>\n</ul>\n<p>在下面这个例子中，job 将只会运行以<code>issue-</code>开始的refs(分支)，然而<code>except</code>中设置将被跳过。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span></span><br><span class=\"line\">  <span class=\"comment\"># use regexp</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">/^issue-.*$/</span></span><br><span class=\"line\">  <span class=\"comment\"># use special keyword</span></span><br><span class=\"line\">  <span class=\"attr\">except:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">branches</span></span><br></pre></td></tr></table></figure>\n\n<p>在下面这个例子中，job 将只会执行有<code>tags</code>的refs，或者通过<code>API</code>触发器明确地请求构建。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span></span><br><span class=\"line\">  <span class=\"comment\"># use special keywords</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">tags</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">triggers</span></span><br></pre></td></tr></table></figure>\n\n<p>下面这个例子将会为所有的分支执行job，但 master 分支除外。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">branches@gitlab-org/gitlab-ce</span></span><br><span class=\"line\">  <span class=\"attr\">except:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">master@gitlab-org/gitlab-ce</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"variables\"><a href=\"#variables\" class=\"headerlink\" title=\"variables\"></a>variables</h3><p>GItLab CI 允许在<code>.gitlab-ci.yml</code>文件中添加变量，并在 job 环境中起作用。因为这些配置是存储在 git 仓库中，所以<strong>最好是存储项目的非敏感配置</strong>，例如：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"string\">DATABASE_URL:&quot;postgres://postgres@postgres/my_database&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些变量可以被后续的命令和脚本使用。</p>\n<p>除了用户自定义的变量外，Runner 也可以定义它自己的变量。<code>CI_COMMIT_REG_NAME</code>就是一个很好的例子，它的值表示用于构建项目的分支或tag名称。除了在<code>.gitlab-ci.yml</code>中设置变量外，还有可以通过 GitLab 的界面上设置私有变量。</p>\n<p>这里有更多关于<a href=\"https://docs.gitlab.com/ce/ci/variables/README.html\">variables</a>的介绍。</p>\n<h3 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h3><h4 id=\"cache-paths\"><a href=\"#cache-paths\" class=\"headerlink\" title=\"cache: paths\"></a>cache: paths</h4><p>使用<code>paths</code>指令选择要缓存的文件或目录。也可以使用通配符。</p>\n<p>如果 cache 定义在 jobs 的作用域之外，那么它就是全局缓存，所有 jobs 都可以使用该缓存。</p>\n<p>缓存<code>binaries</code>和<code>.config</code>中的所有文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">binaries/</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">.config</span></span><br></pre></td></tr></table></figure>\n\n<p>缓存<code>git</code>中没有被跟踪的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>缓存<code>binaries</code>下没有被<code>git</code>跟踪的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">binaries/</span></span><br></pre></td></tr></table></figure>\n\n<p>job 中优先级高于全局的。下面这个<code>rspec</code> job中将只会缓存<code>binaries/</code>下的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">my/files</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">rspec:</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">cache:</span></span><br><span class=\"line\">    <span class=\"attr\">key:</span> <span class=\"string\">rspec</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">binaries/</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，缓存是在 jobs 之前进行共享的。如果你不同的 jobs 缓存不同的文件路径，必须设置不同的<code>cache:key</code>，否则缓存内容将被重写。缓存只是尽力而为之，所以别期望缓存会一直存在。</p>\n<h4 id=\"cache-key\"><a href=\"#cache-key\" class=\"headerlink\" title=\"cache: key\"></a>cache: key</h4><p><code>key</code>指令允许我们定义缓存的作用域(亲和性)，可以是所有 jobs 的单个缓存，也可以是每个 job，也可以是每个分支或者是任何你认为合适的地方。它也可以让你很好的调整缓存，允许你设置不同 jobs 的缓存，甚至是不同分支的缓存。</p>\n<p><code>cache:key</code>可以使用任何的<a href=\"https://docs.gitlab.com/ce/ci/variables/README.html\">预定义变量</a>。</p>\n<p>默认key是默认设置的这个项目缓存，因此默认情况下，从GitLab 9.0开始，每个 pipelines 和 jobs 中可以共享一切。</p>\n<p>配置示例</p>\n<p>缓存每个job：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&quot;$CI_JOB_NAME&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>缓存每个分支：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&quot;$CI_COMMIT_REF_NAME&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>缓存每个 job 且每个分支：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&quot;$CI_JOB_NAME/$CI_COMMIT_REF_NAME&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>缓存每个分支且每个stage：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&quot;$CI_JOB_STAGE/$CI_COMMIT_REF_NAME&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>如果使用的Windows Batch(windows批处理)来跑脚本需要用%替代$：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">key:</span> <span class=\"string\">&quot;%CI_JOB_STAGE%/%CI_COMMIT_REF_NAME%&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"allow-failure\"><a href=\"#allow-failure\" class=\"headerlink\" title=\"allow_failure\"></a>allow_failure</h3><p><code>allow_failure</code>可以用于当你想设置一个 job 失败的之后并不影响后续的CI组件的时候。失败的 jobs 不会影响到<code>commit</code>状态。</p>\n<p>当开启了允许 job 失败，所有的 intents 和 purposes 里的 pipeline 都是成功&#x2F;绿色，但是也会有一个”<code>CI build passed with warnings</code>“信息显示在<code>Merge Request</code>或<code>commit</code>或<code>job page</code>。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。</p>\n<p>下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个 stage，因为这里有设置了<code>allow_failure: true</code>。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job1:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">execute_script_that_will_fail</span></span><br><span class=\"line\">  <span class=\"attr\">allow_failure:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">job2:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">test</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">execute_script_that_will_succeed</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">job3:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">deploy_to_staging</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"when\"><a href=\"#when\" class=\"headerlink\" title=\"when\"></a>when</h3><p><code>when</code>用于实现在发生故障或尽管失败时运行的作业。when可以设置以下值：</p>\n<ul>\n<li><code>on_success</code> - 只有前面 stages 的所有工作成功时才执行。这是默认值。</li>\n<li><code>on_failure</code> - 当前面 stages 中任意一个jobs失败后执行。</li>\n<li><code>always</code> - 无论前面 stages 中 jobs 状态如何都执行。</li>\n<li><code>manual</code> - 手动执行(GitLab8.10增加)。更多请查看手动操作。</li>\n</ul>\n<h3 id=\"artifacts\"><a href=\"#artifacts\" class=\"headerlink\" title=\"artifacts\"></a>artifacts</h3><p><code>artifacts</code>用于指定成功后应附加到 job 的文件和目录的列表。只能使用项目工作间内的文件或目录路径。在job成功完成后artifacts将会发送到GitLab中，同时也会在 GitLab UI 中提供下载。如果想要在不通的 job 之间传递<code>artifacts</code>，请查阅<a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies\">依赖关系</a>。以下是一些例子：</p>\n<p>发送<code>binaries</code>和<code>.config</code>中的所有文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">artifacts:</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">binaries/</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">.config</span></span><br></pre></td></tr></table></figure>\n\n<p>发送所有没有被Git跟踪的文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">artifacts:</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>发送没有被Git跟踪和<code>binaries</code>中的所有文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">artifacts:</span></span><br><span class=\"line\">  <span class=\"attr\">untracked:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">binaries/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"五、其他相关内容\"><a href=\"#五、其他相关内容\" class=\"headerlink\" title=\"五、其他相关内容\"></a>五、其他相关内容</h2><h3 id=\"1-API触发器-Triggers\"><a href=\"#1-API触发器-Triggers\" class=\"headerlink\" title=\"1 API触发器 Triggers\"></a>1 API触发器 Triggers</h3><p>Triggers 可用于强制使用API调用重建特定分支，<code>tag</code>或<code>commits</code>。API的使用示例可以在<code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Pipeline triggers</code>中找到。</p>\n<p>在<code>triggers</code>文档中<a href=\"https://docs.gitlab.com/ce/ci/triggers/README.html\">查看更多</a>。</p>\n<h3 id=\"2-配置定时任务\"><a href=\"#2-配置定时任务\" class=\"headerlink\" title=\"2 配置定时任务\"></a>2 配置定时任务</h3><p>GitLab CI 中可以在 GitLab <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Schedules</code>中配置定时任务，点击<code>New Schedule</code>按钮，可以配置你流水线的定时执行任务，包括：描述信息、定时的Cron表达式、目标分支、变量等信息。</p>\n<p>然后在需要定时执行的作业的<code>only</code>分支写上<code>schedules</code>即可。</p>\n<h3 id=\"3-校验-gitlab-ci-yml\"><a href=\"#3-校验-gitlab-ci-yml\" class=\"headerlink\" title=\"3 校验 .gitlab-ci.yml\"></a>3 校验 .gitlab-ci.yml</h3><p>GitLab CI 的每个实例都有一个名为<code>Lint</code>的嵌入式调试工具。 你可以在 GitLab 实例的<code>-/ci/lint</code>下找到该链接。</p>\n<h3 id=\"4-配置邮件发送\"><a href=\"#4-配置邮件发送\" class=\"headerlink\" title=\"4 配置邮件发送\"></a>4 配置邮件发送</h3><p>如果希望在每次构建完成后（或者在仅构建失败的情况下），想邮件发送给相关开发人员，则可以在 GitLab <code>Settings</code> -&gt; <code>Integrations</code> 中找到<code>Pipelines emails</code>，点击进去就可以配置邮件发送相关的内容了。</p>\n<h3 id=\"5-GitLab-Pages\"><a href=\"#5-GitLab-Pages\" class=\"headerlink\" title=\"5 GitLab Pages\"></a>5 GitLab Pages</h3><p><a href=\"https://gitlab.com/pages/\">GitLab Pages</a>是用于托管静态文件的服务。而<code>pages</code>是一个特殊的job，用于将静态的内容上传到GitLab，可用于为您的网站提供服务。它有特殊的语法，因此必须满足以下两个要求：</p>\n<ul>\n<li>任何静态内容必须放在<code>public/</code>目录下</li>\n<li>artifacts必须定义在<code>public/</code>目录下</li>\n</ul>\n<p>下面的这个例子是将所有文件从项目根目录移动到<code>public/</code>目录。<code>.public</code>工作流是<code>cp</code>，并且它不会循环复制<code>public/</code>本身。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">pages:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">mkdir</span> <span class=\"string\">.public</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cp</span> <span class=\"string\">-r</span> <span class=\"string\">*</span> <span class=\"string\">.public</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">mv</span> <span class=\"string\">.public</span> <span class=\"string\">public</span></span><br><span class=\"line\">  <span class=\"attr\">artifacts:</span></span><br><span class=\"line\">    <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">public</span></span><br><span class=\"line\">  <span class=\"attr\">only:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n\n<p>更多内容请查看<a href=\"https://docs.gitlab.com/ce/user/project/pages/index.html\">GitLab Pages用户文档</a>。</p>\n<h3 id=\"6-跳过-jobs\"><a href=\"#6-跳过-jobs\" class=\"headerlink\" title=\"6 跳过 jobs\"></a>6 跳过 jobs</h3><p>如果你的<code>commit</code>信息中包含<code>[ci skip]</code>或者<code>[skip ci]</code>，不论大小写，那么这个<code>commit</code>将会创建但是 jobs 也会跳过。</p>\n<hr>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://docs.gitlab.com/ce/ci/yaml/README.html\">官方文档地址</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000010442764#articleHeader24\">segmentfault yaml配置中文翻译</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm4o27ve70003ge9k5bou46e7","category_id":"cm4o27ve90006ge9kdo1k9chf","_id":"cm4o27vef000kge9k1s4m98of"},{"post_id":"cm4o27ve90005ge9k1v01grkv","category_id":"cm4o27ve90006ge9kdo1k9chf","_id":"cm4o27veg000oge9k0cx6bz6y"},{"post_id":"cm4o27vef000mge9kfa0kekgp","category_id":"cm4o27vef000jge9k6w4fe0h9","_id":"cm4o27veg000tge9ka0gv6uii"},{"post_id":"cm4o27veb0009ge9kab0tfc5k","category_id":"cm4o27vef000jge9k6w4fe0h9","_id":"cm4o27veh000xge9k83d3c6bd"},{"post_id":"cm4o27veg000nge9kf8xj4fwk","category_id":"cm4o27vef000jge9k6w4fe0h9","_id":"cm4o27veh000yge9k8vulhc4z"},{"post_id":"cm4o27veg000rge9k0yrlf1hs","category_id":"cm4o27vef000jge9k6w4fe0h9","_id":"cm4o27veh0010ge9k1gmybrwx"},{"post_id":"cm4o27vec000bge9k2p6h3ku6","category_id":"cm4o27vef000jge9k6w4fe0h9","_id":"cm4o27veh0012ge9k0s0s9osk"},{"post_id":"cm4o27ved000dge9kdqe02nat","category_id":"cm4o27vef000jge9k6w4fe0h9","_id":"cm4o27veh0014ge9kfdw4actt"},{"post_id":"cm4o27vee000hge9kgcvmcufq","category_id":"cm4o27vef000jge9k6w4fe0h9","_id":"cm4o27veh0017ge9k147843vd"},{"post_id":"cm4o27vef000ige9kcxa3bzjf","category_id":"cm4o27vef000jge9k6w4fe0h9","_id":"cm4o27veh001bge9kdfkh1wrd"}],"PostTag":[{"post_id":"cm4o27ve70003ge9k5bou46e7","tag_id":"cm4o27vea0007ge9k1z0e4cc0","_id":"cm4o27vee000gge9kgof33x6c"},{"post_id":"cm4o27ve90005ge9k1v01grkv","tag_id":"cm4o27ved000fge9k502y3kuu","_id":"cm4o27veg000sge9k6fs89mnt"},{"post_id":"cm4o27ve90005ge9k1v01grkv","tag_id":"cm4o27vef000lge9k4vx0962b","_id":"cm4o27veh000vge9kfdzt15nb"},{"post_id":"cm4o27veb0009ge9kab0tfc5k","tag_id":"cm4o27veg000qge9kfdde562o","_id":"cm4o27veh0016ge9k8yx277mn"},{"post_id":"cm4o27veb0009ge9kab0tfc5k","tag_id":"cm4o27veh000wge9kcknheqiq","_id":"cm4o27veh0018ge9kghx3ety9"},{"post_id":"cm4o27veb0009ge9kab0tfc5k","tag_id":"cm4o27veh0011ge9kdhoy1ia5","_id":"cm4o27veh001age9kba411x2f"},{"post_id":"cm4o27vec000bge9k2p6h3ku6","tag_id":"cm4o27veh0015ge9k6enx151y","_id":"cm4o27veh001cge9k6f2g2wsl"},{"post_id":"cm4o27ved000dge9kdqe02nat","tag_id":"cm4o27veh0019ge9k0wm28u6x","_id":"cm4o27vei001ege9k58si28w7"},{"post_id":"cm4o27vee000hge9kgcvmcufq","tag_id":"cm4o27veh0019ge9k0wm28u6x","_id":"cm4o27vei001gge9k6ui20yq3"},{"post_id":"cm4o27vef000ige9kcxa3bzjf","tag_id":"cm4o27veh0019ge9k0wm28u6x","_id":"cm4o27vei001ige9k4nv67vhw"},{"post_id":"cm4o27vef000mge9kfa0kekgp","tag_id":"cm4o27veh0019ge9k0wm28u6x","_id":"cm4o27vei001kge9k7yyp4y99"},{"post_id":"cm4o27veg000nge9kf8xj4fwk","tag_id":"cm4o27veg000qge9kfdde562o","_id":"cm4o27vei001oge9ka7mz5bx8"},{"post_id":"cm4o27veg000nge9kf8xj4fwk","tag_id":"cm4o27veh000wge9kcknheqiq","_id":"cm4o27vei001pge9kgeg80e2u"},{"post_id":"cm4o27veg000nge9kf8xj4fwk","tag_id":"cm4o27veh0011ge9kdhoy1ia5","_id":"cm4o27vej001rge9khnc90b1p"},{"post_id":"cm4o27veg000rge9k0yrlf1hs","tag_id":"cm4o27vei001nge9k2tz8e265","_id":"cm4o27vej001tge9kcf174k7q"},{"post_id":"cm4o27veg000rge9k0yrlf1hs","tag_id":"cm4o27vei001qge9k60krbxhk","_id":"cm4o27vej001uge9k03ru4vos"},{"post_id":"cm4o27veg000rge9k0yrlf1hs","tag_id":"cm4o27vej001sge9kbcfidgn9","_id":"cm4o27vej001vge9kcjiw8z1f"}],"Tag":[{"name":"JavaScript","_id":"cm4o27vea0007ge9k1z0e4cc0"},{"name":"Hexo","_id":"cm4o27ved000fge9k502y3kuu"},{"name":"hexo-theme-matery","_id":"cm4o27vef000lge9k4vx0962b"},{"name":"Typora","_id":"cm4o27veg000qge9kfdde562o"},{"name":"Markdown","_id":"cm4o27veh000wge9kcknheqiq"},{"name":"Vue","_id":"cm4o27veh0011ge9kdhoy1ia5"},{"name":"Git","_id":"cm4o27veh0015ge9k6enx151y"},{"name":"Linux","_id":"cm4o27veh0019ge9k0wm28u6x"},{"name":"GitLab CI","_id":"cm4o27vei001nge9k2tz8e265"},{"name":"DevOps","_id":"cm4o27vei001qge9k60krbxhk"},{"name":"Jenkins","_id":"cm4o27vej001sge9kbcfidgn9"}]}}